<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jayce的技术博客</title>
  <subtitle>一个程序员的折腾笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jaycechant.info/"/>
  <updated>2017-10-12T14:41:16.667Z</updated>
  <id>http://jaycechant.info/</id>
  
  <author>
    <name>Jayce Sigid Chant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>改用 screen 作为 byobu 的后端</title>
    <link href="http://jaycechant.info/2017/use-screen-as-byobu-backend/"/>
    <id>http://jaycechant.info/2017/use-screen-as-byobu-backend/</id>
    <published>2017-09-19T08:57:40.000Z</published>
    <updated>2017-10-12T14:41:16.667Z</updated>
    
    <content type="html"><![CDATA[<p>如题，一分钟Mark文。</p>
<a id="more"></a>
<p><strong>byobu</strong> 是很方便的 Unix 窗口管理器 和 Terminal Multiplexer，它是一套 profiles 或者说 wrapper ，降低使用 tmux 或 screen 的 配置 和 操作 成本。（如果不知道我说什么，看这里<a href="../special-for-tools/">《小工具专题》</a> ，还有 <a href="http://www.byobu.co/" target="_blank" rel="external">byobu主页</a>）</p>
<p>不过我只能算轻度用户，多数时间只使用两个功能：</p>
<ul>
<li>通过 detach 让我下线之后 Session 还能继续干活，以及下次上线不用重新找目录</li>
<li>方便的多窗口管理（F2，F3，F4 完事）</li>
</ul>
<p>从没关心过后面是 tmux 还是 screen。直到公司服务器的 byobu 由我一个人用，到大家都用。大家直接敲 <code>byobu</code> 完事，于是都挤在一个 Session 里，互相干扰。</p>
<hr>
<p>用 byobu 之前我是一个 screen 用户，自然想到大家各自连自己的 Session 。试着给 byobu 加 screen 的参数，发现不行。这时才想到去确认，发现当前版本（5.74）byobu 默认 backend 是 tmux。（印象中是不是早期 byobu 试过以 screen 为默认？忘了）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ byobu --version</div><div class="line">byobu version 5.74</div><div class="line">tmux 1.8</div><div class="line">$ cat ~/.byobu/backend</div><div class="line">BYOBU_BACKEND=tmux</div></pre></td></tr></table></figure>
<p>我知道 tmux 也很强大，加上一些指令和参数，也可以分别创建和管理 Session。可是，我已经习惯 screen ，所以决定把后端换掉。（各位看到这里不必跟我争论哪个好用）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 首先你要确定装了 screen，我一直有装就跳过</span></div><div class="line">$ vim ~/.byobu/backend <span class="comment"># 把里面的值改为 screen，然后保存</span></div><div class="line">$ cat ~/.byobu/backend</div><div class="line">BYOBU_BACKEND=screen</div></pre></td></tr></table></figure>
<p>这时候开始，执行 <code>byobu</code> 背后已经是 screen 在干活。最初目的是为了方便分别创建 Session，对应 <code>screen -S SessionName</code>，相应的 byobu 指令是否可行呢？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ byobu -S jayce</div><div class="line"><span class="comment"># 执行完跳到了一个新的窗口，但是不是真的成功了呢？</span></div><div class="line">~ byobu -ls</div><div class="line">There is a screen on:</div><div class="line">        151664.jayce    (Tuesday, September 19, 2017 05:30:12 CST)      (Attached)</div><div class="line">1 Socket <span class="keyword">in</span> /var/run/screen/jayce.</div></pre></td></tr></table></figure>
<p>注意最后的那个 Attached，表明现在就在这个 Session 里。</p>
<p>如果按 <code>F6</code> 或者 <code>Ctrl-A,Ctrl-D</code> detach ，之后再看：（注意，如果第一次在 screen 按 <code>Ctrl-A</code> ，它会询问 Escape Sequence，建议选 <code>1 screen mode</code> 就好）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ byobu -ls</div><div class="line">There is a screen on:</div><div class="line">        151664.jayce    (Tuesday, September 19, 2017 05:30:12 CST)      (Detached)</div><div class="line">1 Socket <span class="keyword">in</span> /var/run/screen/jayce.</div></pre></td></tr></table></figure>
<hr>
<p>基本能用了，只是还有一个小问题：如果不记得/不确定之前的 Session 还在不在，那么操作流程是</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ byobu -ls <span class="comment"># 列出当前所有 Session</span></div><div class="line">$ byobu -r mysession <span class="comment"># 如果 Session 还在就重连</span></div><div class="line">$ byobu -S mysession <span class="comment"># 如果因为重启的原因不在，新建一个</span></div></pre></td></tr></table></figure>
<p>比较麻烦。screen 自带 <code>-R SessionName</code> 参数实现『有则重连，无则新建』 的动作。可尝试把 <code>-R</code>加载 byobu 后面，不支持。byobu 是怎样接受参数并传递给 screen 的呢？试一下在没有 Session 的情况下，执行没有参数的 byobu：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ byobu</div><div class="line"><span class="comment"># Ctrl-A,D detach</span></div><div class="line">$ screen -ls <span class="comment"># 跟 byobu -ls 等价</span></div><div class="line">There is a screen on:</div><div class="line">        152910.byobu    (Tuesday, September 19, 2017 05:48:24 CST)      (Detached)</div><div class="line">1 Socket <span class="keyword">in</span> /var/run/screen/jayce.</div></pre></td></tr></table></figure>
<p><code>byobu</code> 背后执行的是 <code>screen -S byobu</code> ，也就是说，如果不指定任何参数，byobu 默认会创建一个名字叫 『byobu』 的 Session。而如果指定了（某些）参数，默认名字就不会起效。但 <code>-R</code> 不算在某些参数里。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ sudo vim `<span class="built_in">which</span> byobu`</div><div class="line"><span class="comment"># 省略....</span></div><div class="line">148                 BYOBU_SESSION_NAME=<span class="string">"-S <span class="variable">$PKG</span>"</span> <span class="comment"># 这里的 $PKG 的值就是 byobu</span></div><div class="line">149                 <span class="comment"># Zero out $BYOBU_SESSION_NAME if user has specified a session name</span></div><div class="line">150                 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span>; <span class="keyword">do</span></div><div class="line">151                         <span class="keyword">case</span> <span class="variable">$i</span> <span class="keyword">in</span></div><div class="line">152                                 -*r*|-*d*|-*D*|-*S*|-ls|-list)</div><div class="line">153                                         BYOBU_SESSION_NAME=</div><div class="line">154                                 ;;</div><div class="line">155                         <span class="keyword">esac</span></div><div class="line">156                 <span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>看完上面的内容，应该就知道了『某些参数』是哪些。当指定这几个参数时，默认 Session 名就会被清空。</p>
<p>那容易，把『某些参数』改成下面的样子：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">152                                 -*r*|-*R*|-*d*|-*D*|-*S*|-ls|-list)</div></pre></td></tr></table></figure>
<p>保存。好了，<code>-R</code> 可以用了。</p>
<p>就酱。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如题，一分钟Mark文。&lt;/p&gt;
    
    </summary>
    
    
      <category term="screen" scheme="http://jaycechant.info/tags/screen/"/>
    
      <category term="byobu" scheme="http://jaycechant.info/tags/byobu/"/>
    
  </entry>
  
  <entry>
    <title>OpenGrok + Universal ctags</title>
    <link href="http://jaycechant.info/2017/OpenGrok-Universal-ctags/"/>
    <id>http://jaycechant.info/2017/OpenGrok-Universal-ctags/</id>
    <published>2017-03-06T02:30:56.000Z</published>
    <updated>2017-09-24T09:04:30.354Z</updated>
    
    <content type="html"><![CDATA[<p>OpenGrok 环境搭建踩坑。</p>
<a id="more"></a>
<p>不知道 OpenGrok 自己放 Google ，为何选它不选 Source Insight 或者 Source Navigator 也请自己查。</p>
<p>安装时，服务器上已有 JDK 和 Tomcat，这部分直接跳过。</p>
<h2 id="Ctags"><a href="#Ctags" class="headerlink" title="Ctags"></a>Ctags</h2><h3 id="Exuberant-V-S-Universal"><a href="#Exuberant-V-S-Universal" class="headerlink" title="Exuberant V.S. Universal"></a>Exuberant V.S. Universal</h3><p>OpenGrok 官方 Requirements</p>
<blockquote>
<ul>
<li>Latest <a href="http://www.oracle.com/technetwork/java//" target="_blank" rel="external">Java</a> 1.8</li>
<li>A servlet container like <a href="https://glassfish.dev.java.net/" target="_blank" rel="external">GlassFish</a> or <a href="http://tomcat.apache.org/" target="_blank" rel="external">Tomcat</a> (8.x or later) also running with Java at least 1.8</li>
<li><a href="http://ctags.sourceforge.net/" target="_blank" rel="external">Exuberant Ctags</a></li>
</ul>
</blockquote>
<p>前两个就不说。原打算装 Exuberant Ctags（以下简称EC） ，结果看到知乎上大家讨论，说Universal Ctags （以下简称UC）更好。</p>
<p>官网在此 <a href="http://ctags.io/" target="_blank" rel="external">http://ctags.io/</a></p>
<p>简单说，就是 EC 托管在 SourceForge 不再活跃了，UC 作为 Fork 接过接力棒，继续开发。</p>
<hr>
<blockquote>
<p> autogen.sh runs autoreconf internally. If you use a (binary oriented) GNU/Linux distribution, autoreconf may be part of the autoconf package. In addition you may have to install automake and/or pkg-config, too.</p>
</blockquote>
<h3 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h3><p>官方提醒 autogen.sh 脚本里面调用了 <code>autoreconf</code> ，先安装 automake</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install automake <span class="comment"># ubuntu, centos 用 yum</span></div></pre></td></tr></table></figure>
<p>然后跟着官方走：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/universal-ctags/ctags.git</div><div class="line">$ <span class="built_in">cd</span> ctags</div><div class="line">$ ./autogen.sh</div><div class="line">$ ./configure --prefix=/<span class="built_in">where</span>/you/want <span class="comment"># defaults to /usr/local</span></div><div class="line">configure.ac:120: error: possibly undefined macro: AC_DEFINE</div><div class="line">      If this token and others are legitimate, please use m4_pattern_allow.</div><div class="line">      See the Autoconf documentation.</div><div class="line">configure.ac:342: error: possibly undefined macro: AC_MSG_ERROR</div><div class="line">configure.ac:596: error: possibly undefined macro: AS_IF</div><div class="line">autoreconf: /usr/bin/autoreconf failed with <span class="built_in">exit</span> status: 1</div></pre></td></tr></table></figure>
<p>报错，几个宏找不到。用这几个错误搜索，有人说这个包那个包，最后发现是 <code>pkg-config</code> 解决掉：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install pkg-config</div></pre></td></tr></table></figure>
<p>是不是很眼熟？是的，一开始那段提醒里就已经提到，因为 写着 or ，没当回事。安装完就不再报错了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ ./autogen.sh</div><div class="line">$ ./configure --prefix=/<span class="built_in">where</span>/you/want <span class="comment"># defaults to /usr/local</span></div><div class="line">$ make</div><div class="line">$ make install <span class="comment"># may require extra privileges depending on where to install</span></div><div class="line">$ ctags --version</div><div class="line">Universal Ctags 0.0.0(d2efd07), Copyright (C) 2015 Universal Ctags Team</div><div class="line">Universal Ctags is derived from Exuberant Ctags.</div><div class="line">Exuberant Ctags 5.8, Copyright (C) 1996-2009 Darren Hiebert</div><div class="line">  Compiled: Feb 15 2017, 15:19:35</div><div class="line">  URL: https://ctags.io/</div><div class="line">  Optional compiled features: +wildcards, +regex, +option-directory, +coproc</div></pre></td></tr></table></figure>
<p>UC 安装完毕。</p>
<h2 id="OpenGrok"><a href="#OpenGrok" class="headerlink" title="OpenGrok"></a>OpenGrok</h2><h3 id="初次索引"><a href="#初次索引" class="headerlink" title="初次索引"></a>初次索引</h3><p><a href="http://opengrok.github.io/OpenGrok/" target="_blank" rel="external">OpenGrok</a> 分两个主要部分：</p>
<ol>
<li>index 生成工具</li>
<li>搜索查询的 webapp</li>
</ol>
<p>下载之后，解压目录主要都是 1) ，llib/ 目录下的 <code>source.war</code> 则是 2)。</p>
<p>war 包直接放到 Tomcat 的 webapp 目录即可 通过 <code>http://path/to/tomcat/source/</code> 访问，只不过现在没有项目。</p>
<p>index 工具部分，主要是 lib/ 下的 <code>opengrok.jar</code> 和 bin/ 下的 <code>OpenGrok</code> 脚本。</p>
<p>网上大家讨论，往往要配置很多环境变量，调用 opengrok.jar 时还要给一堆参数。</p>
<p>我懒，直接来最简单的版本：</p>
<ol>
<li>环境变量只配置 <code>OPENGROK_INSTANCE_BASE</code> ，设为 OpenGrok 根目录，其他相关目录，你没有配置会自动在根目录下生成。然后把 <code>OPENGROK_INSTANCE_BASE/bin/</code> 加入 PATH （为了全局执行 OpenGrok ）。</li>
<li>上述配置生效后（source 或者 重新登录 ssh），将项目源码放到 <code>OPENGROK_INSTANCE_BASE/src/</code> 下 （我是直接<code>ln</code> 过去，当然你真放也行），然后 <code>sudo -E OpenGrok index</code> 。</li>
</ol>
<p>尽可能使用默认配置，除了上面半开玩笑的懒，另一方面原因是怕以后会忘掉自己怎么配置。默认配置有它的道理，刚接触拍脑袋决定很难比默认好，集中放在根目录下也方便管理。以后有新需要，再改不晚。</p>
<h3 id="关闭历史"><a href="#关闭历史" class="headerlink" title="关闭历史"></a>关闭历史</h3><p>第一次生成索引，非常顺利。</p>
<p>一段时间之后，代码有更新，重新生成索引，结果一堆报错，几乎每条都是相同内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">14:43:02 WARNING: Non-zero <span class="built_in">exit</span> code status 1 from <span class="built_in">command</span> [/usr/bin/svn, <span class="built_in">log</span>, --trust-server-cert, --non-interactive, --xml, -v] <span class="keyword">in</span> directory /path/to/the/<span class="built_in">source</span>: svn E170001: Unable to connect to a repository at URL <span class="string">'svn://path/to/SVN/repo'</span></div><div class="line">svn: E170001: Can<span class="string">'t get username or password</span></div></pre></td></tr></table></figure>
<p>原因清楚明白：OG 试图生成文件历史，对每个文件都执行 <code>svn log</code>。可是没有账号密码。</p>
<p>当然没有，我都没给它。</p>
<p>我后来查到，只要定义两个宏的值，就可以告诉它账号密码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">OPENGROK_SUBVERSION_USERNAME=<span class="string">"xxx"</span></div><div class="line">OPENGROK_SUBVERSION_PASSWORD=<span class="string">"yyy"</span></div></pre></td></tr></table></figure>
<p>其实你去看 OpenGrok 托管在 github 的 <a href="https://github.com/OpenGrok/OpenGrok" target="_blank" rel="external">源码</a> ，看<a href="https://github.com/OpenGrok/OpenGrok/blob/d2db363d135fe9eb6498bf458bbc49e30a494480/src/org/opensolaris/opengrok/history/SubversionRepository.java" target="_blank" rel="external">src/org/opensolaris/opengrok/history/SubversionRepository.java</a> ，源码里写得很清楚。</p>
<p>不过因为某些原因，我暂时不想生成历史，怎么关闭历史索引功能呢？我找到了一个讨论：<a href="https://github.com/OpenGrok/OpenGrok/issues/32" target="_blank" rel="external">https://github.com/OpenGrok/OpenGrok/issues/32</a></p>
<p>简单说，只有加了 <code>-S</code> 和 <code>-H</code> 参数，才会生成历史；这点去看 <a href="https://github.com/OpenGrok/OpenGrok/blob/75f1fc793f0b203cc97c1a75dc82522f171aa431/src/org/opensolaris/opengrok/index/Indexer.java" target="_blank" rel="external">src/org/opensolaris/opengrok/index/Indexer.java</a> 能得到证实。</p>
<hr>
<p>然而，我并没有加任何参数 ？！</p>
<p>一研究，是这样，参数是传给 oepngrok.jar 的。OpenGrok 脚本默认有添加一系列参数。</p>
<p>那就简单了，直接在 /path/to/OpenGrok/bin/OpenGrok 脚本里搜索，将 <code>-S</code> 和 <code>-H</code> 去掉。很简单，就不贴出来了。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OpenGrok 环境搭建踩坑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="OpenGrok" scheme="http://jaycechant.info/tags/OpenGrok/"/>
    
      <category term="ctags" scheme="http://jaycechant.info/tags/ctags/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins + 蒲公英 自动发布两个小技巧</title>
    <link href="http://jaycechant.info/2017/two-tips-for-jenkins-pgyer/"/>
    <id>http://jaycechant.info/2017/two-tips-for-jenkins-pgyer/</id>
    <published>2017-02-23T06:05:53.000Z</published>
    <updated>2017-09-24T09:32:31.724Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins 自动编译打包应用，配合蒲公英上传发布，可以做到扫码安装，简化测试步骤。这不是什么新鲜事物，以下两篇文章基本讲得很全：</p>
<ul>
<li><a href="http://www.jianshu.com/p/441e75f527f2" target="_blank" rel="external">jenkins配合蒲公英实现APK的自动发布</a></li>
<li><a href="http://blog.csdn.net/u011904605/article/details/54619549" target="_blank" rel="external">使用Jenkins生成 二维码</a></li>
</ul>
<p>我只说两个没有提到的小技巧。</p>
<a id="more"></a>
<h1 id="获取上传文件路径"><a href="#获取上传文件路径" class="headerlink" title="获取上传文件路径"></a>获取上传文件路径</h1><p>网上文章要么是直接用插件上传，要么学官方示例直接 curl。文件名要么直接跳过，要么需要 生成物名字 固定不变。</p>
<p>可我这里就不固定，为区分不同编译输出，会带有版本号日期等信息在文件名里。</p>
<p>我的做法是让 <code>find</code> 来处理，上代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FILENAME=`find ./app/build/outputs/apk/ -type f -name <span class="string">"*.apk"</span>`</div><div class="line">curl -F <span class="string">"file=@<span class="variable">$&#123;FILENAME&#125;</span>"</span> -F <span class="string">"uKey=yourUserKey"</span> -F <span class="string">"_api_key=yourApiKey"</span> http://www.pgyer.com/apiv1/app/upload</div></pre></td></tr></table></figure>
<p>脚本有效的前提是，对应目录下只能有一个apk，否则 FILENAME 里面就不止一个文件名了。要是不止一个 apk ，就要修改 <code>-name</code> 参数，让正则式只匹配想要的文件。</p>
<h1 id="获取二维码"><a href="#获取二维码" class="headerlink" title="获取二维码"></a>获取二维码</h1><p>基本原理是利用 <a href="http://wiki.jenkins-ci.org/display/JENKINS/Description+Setter+Plugin" target="_blank" rel="external">Jenkins description setter</a> ，并且在 <code>管理 &gt; Global Security &gt; Markup Formatter</code>  里打开 HTML。选 Safe HTML 也行，选 PegDown 然后不要 Suppress HTML 也行。我习惯Markdown，选了后者。</p>
<p>虽然启用 Markdown，但二维码还是要用 <code>&lt;img&gt;</code> 而不是 <code>![]()</code> ：因为 Markdown 在 Job 页面不解析，非得进入具体 build 页面才能看到，多点一下，不够方便。</p>
<p>上传应用后，在蒲公英管理页能看到二维码。可看地址，发现是与 应用 相关的 <strong>固定地址</strong>，相当于指向 latest-build 的链接。用这个链接，所有 build 都是相同二维码，都指向最新 build。</p>
<p>这当然不是想要的效果。前面列出的第二篇文章解决办法是，每次都把最新的二维码下载下来保存在本地，显示本地图片。</p>
<p>其实不用那么麻烦，让我们看看log输出：（星号是消去敏感信息）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"code"</span>:0,<span class="string">"message"</span>:<span class="string">""</span>,<span class="string">"data"</span>:&#123;<span class="string">"appKey"</span>:<span class="string">"*****"</span>,<span class="string">"userKey"</span>:<span class="string">"*****"</span>,<span class="string">"appType"</span>:<span class="string">"2"</span>,<span class="string">"appIsLastest"</span>:<span class="string">"1"</span>,<span class="string">"appFileSize"</span>:<span class="string">"*****"</span>,<span class="string">"appName"</span>:<span class="string">"*****"</span>,<span class="string">"appVersion"</span>:<span class="string">"1.1.3"</span>,<span class="string">"appVersionNo"</span>:<span class="string">"113"</span>,<span class="string">"appBuildVersion"</span>:<span class="string">"13"</span>,<span class="string">"appIdentifier"</span>:<span class="string">"**.**.**"</span>,<span class="string">"appIcon"</span>:<span class="string">"*****"</span>,<span class="string">"appDescription"</span>:<span class="string">"*****"</span>,<span class="string">"appUpdateDescription"</span>:<span class="string">""</span>,<span class="string">"appScreenshots"</span>:<span class="string">""</span>,<span class="string">"appShortcutUrl"</span>:<span class="string">"****"</span>,<span class="string">"appCreated"</span>:<span class="string">"2017-02-23 13:52:58"</span>,<span class="string">"appUpdated"</span>:<span class="string">"2017-02-23 13:52:58"</span>,<span class="string">"appQRCodeURL"</span>:<span class="string">"http:\/\/static.pgyer.com\/app\/qrcodeHistory\/*****(长度64的16进制hash，相当于256bit)"</span>&#125;&#125;</div></pre></td></tr></table></figure>
<p>这是 curl post 之后的输出，其实就是 服务器的 response。</p>
<p>appShortcutUrl 就是上面提到固定不变的短链接，假定这个值是 abcd，那么对应的链接就是 <code>static.pgyer.com/app/qrcode/abcd</code>。</p>
<p>不过，仔细留意的话，二维码的真实链接也已经在里面，就是：<code>&quot;appQRCodeURL&quot;:&quot;http:\/\/static.pgyer.com\/app\/qrcodeHistory\/*****(长度64的hash)&quot;</code> 。</p>
<p>怎么用呢？要知道 Jenkins description setter 本来就支持 正则式！</p>
<blockquote>
<p>If configured, the regular expression will be applied to each line in the build log. A description will be set based on the first match.</p>
</blockquote>
<p>换言之，它可以用正则式在 log 输出中找匹配，并且将匹配到的 match 用于description。</p>
<p>直接上配置：</p>
<p>Regular expression : <code>.*qrcodeHistory\\/(\S{64})</code></p>
<p>Description : <code>&lt;img src=&quot;http://static.pgyer.com/app/qrcodeHistory/\1&quot;&gt;</code></p>
<p>其中 <code>\1</code> 表示引用第一个匹配。（注意，匹配从0开始算，不过 <code>\0</code> 是整个匹配行）</p>
<p>搞定，提交代码之后，点一下build，然后扫码就可以测试了！！</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins 自动编译打包应用，配合蒲公英上传发布，可以做到扫码安装，简化测试步骤。这不是什么新鲜事物，以下两篇文章基本讲得很全：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/441e75f527f2&quot;&gt;jenkins配合蒲公英实现APK的自动发布&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/u011904605/article/details/54619549&quot;&gt;使用Jenkins生成 二维码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我只说两个没有提到的小技巧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://jaycechant.info/tags/Jenkins/"/>
    
      <category term="pgyer" scheme="http://jaycechant.info/tags/pgyer/"/>
    
  </entry>
  
  <entry>
    <title>json-lib-2.4-jdk15 的疑似 bug</title>
    <link href="http://jaycechant.info/2017/suspected-bug-in-json-lib-2-4-jdk15/"/>
    <id>http://jaycechant.info/2017/suspected-bug-in-json-lib-2-4-jdk15/</id>
    <published>2017-02-21T09:12:31.000Z</published>
    <updated>2017-09-24T10:00:50.145Z</updated>
    
    <content type="html"><![CDATA[<p>使用 json-lib 时发现了比较诡异的现象，分析半天没有找到原因。最后因时间关系，直接替换成 org.json 解决了。疑似json-lib 有 bug，Mark 一个，以后再看。</p>
<a id="more"></a>
<p>最近尝试封装某网络 API ，提供接口给上层调用。该 API 使用 json 发送数据。一开始图方便，本想直接用 String 拼接了事，后来实际一写，发现 json 结构有三层，比较复杂，而且有动态增删改字段的需求，改为老老实实构建 JSONObject ，发送前转成 String 。</p>
<p>不像 JavaScript 和 Python 那样有官方的 json 实现，Java 的 json 实现山头林立。我粗略数了一下 json.org 官网上都有25个之多！我也不要什么复杂的功能，只要</p>
<ol>
<li>根据需要建立标准 json 对象结构</li>
<li>方便在 对象 和 字符串 之间互相转换</li>
</ol>
<p>够了。</p>
<p>大概扫一眼，<code>net.sf.json-lib</code> 和 <code>org.json</code> 都够用，刚好这两个包接口极为接近。项目别的地方已经引用了 json-lib，干脆就它。</p>
<p><em>注：代码是对某网络 API的封装，它的API都是公开信息。敏感信息我已经消去。</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setPredefinedKeyValue</span><span class="params">(String key, Object value)</span></span></div><div class="line">        <span class="keyword">throws</span> Exception &#123;</div><div class="line">    System.out.println(<span class="string">"key:"</span> + key + <span class="string">", value:"</span> + value);</div><div class="line">    <span class="keyword">if</span> (ROOT_KEYS.contains(key)) &#123;</div><div class="line">        rootJson.put(key, value);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (PAYLOAD_KEYS.contains(key)) &#123;</div><div class="line">        JSONObject payloadJson = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (rootJson.has(<span class="string">"payload"</span>)) &#123;</div><div class="line">            payloadJson = rootJson.getJSONObject(<span class="string">"payload"</span>);</div><div class="line">            System.out.println(<span class="string">"payload exists: "</span> + payloadJson.toString());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            payloadJson = <span class="keyword">new</span> JSONObject();</div><div class="line">            rootJson.put(<span class="string">"payload"</span>, payloadJson);</div><div class="line">            System.out.println(<span class="string">"new payload."</span>);</div><div class="line">        &#125;</div><div class="line">        payloadJson.put(key, value);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (BODY_KEYS.contains(key)) &#123;</div><div class="line">        System.out.println(<span class="string">"Enter body =========="</span>);</div><div class="line">        JSONObject bodyJson = <span class="keyword">null</span>;</div><div class="line">        JSONObject payloadJson = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (rootJson.has(<span class="string">"payload"</span>)) &#123;</div><div class="line">            payloadJson = rootJson.getJSONObject(<span class="string">"payload"</span>);</div><div class="line">            System.out.println(<span class="string">"payload exists: "</span> + payloadJson.toString());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            payloadJson = <span class="keyword">new</span> JSONObject();</div><div class="line">            rootJson.put(<span class="string">"payload"</span>, payloadJson);</div><div class="line">            System.out.println(<span class="string">"new payload and add. root: "</span> + rootJson.toString());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"payload before has(body) : "</span> + payloadJson.toString());</div><div class="line">        <span class="keyword">if</span> (payloadJson.has(<span class="string">"body"</span>)) &#123;</div><div class="line">            bodyJson = payloadJson.getJSONObject(<span class="string">"body"</span>);</div><div class="line">            System.out.println(<span class="string">"body exists: "</span> + bodyJson.toString());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            bodyJson = <span class="keyword">new</span> JSONObject();</div><div class="line">            payloadJson.put(<span class="string">"body"</span>, bodyJson);</div><div class="line">            System.out.println(<span class="string">"new body and add. payload: "</span> + payloadJson.toString());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"body before put: "</span> + bodyJson.toString());</div><div class="line">        bodyJson.put(key, value);</div><div class="line">        System.out.println(<span class="string">"body after put: "</span> + bodyJson.toString());</div><div class="line">        System.out.println(<span class="string">"Exit body =========="</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (POLICY_KEYS.contains(key)) &#123;</div><div class="line">        <span class="comment">// ......</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// ......</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下是 <code>json-lib</code> 的log</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">key:appkey, value:********************************</div><div class="line">key:<span class="built_in">type</span>, value:customizedcast</div><div class="line">key:<span class="built_in">alias</span>, value:***********</div><div class="line">key:alias_type, value:phone</div><div class="line">key:ticker, value:测试</div><div class="line">Enter body ==========</div><div class="line">new payload and add. root: &#123;<span class="string">"alias_type"</span>:<span class="string">"phone"</span>,<span class="string">"payload"</span>:&#123;&#125;,<span class="string">"alias"</span>:<span class="string">"***********"</span>,<span class="string">"appkey"</span>:<span class="string">"********************************"</span>,<span class="string">"type"</span>:<span class="string">"customizedcast"</span>&#125;</div><div class="line">payload before has(body) : &#123;&#125;</div><div class="line">new body and add. payload: &#123;<span class="string">"body"</span>:&#123;&#125;&#125;</div><div class="line">body before put: &#123;&#125;</div><div class="line">body after put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:title, value:测试标题</div><div class="line">Enter body ==========</div><div class="line">payload exists: &#123;&#125;</div><div class="line">payload before has(body) : &#123;&#125;</div><div class="line">new body and add. payload: &#123;<span class="string">"body"</span>:&#123;&#125;&#125;</div><div class="line">body before put: &#123;&#125;</div><div class="line">body after put: &#123;<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:text, value:测试内容</div><div class="line">Enter body ==========</div><div class="line">payload exists: &#123;&#125;</div><div class="line">payload before has(body) : &#123;&#125;</div><div class="line">new body and add. payload: &#123;<span class="string">"body"</span>:&#123;&#125;&#125;</div><div class="line">body before put: &#123;&#125;</div><div class="line">body after put: &#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:after_open, value:go_app</div><div class="line">Enter body ==========</div><div class="line">payload exists: &#123;<span class="string">"body"</span>:&#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>&#125;&#125;</div><div class="line">payload before has(body) : &#123;<span class="string">"body"</span>:&#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>&#125;&#125;</div><div class="line">body exists: &#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>&#125;</div><div class="line">body before put: &#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>&#125;</div><div class="line">body after put: &#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"after_open"</span>:<span class="string">"go_app"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:display_type, value:notification</div><div class="line">payload exists: &#123;<span class="string">"body"</span>:&#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"after_open"</span>:<span class="string">"go_app"</span>&#125;&#125;</div><div class="line">key:production_mode, value:<span class="literal">true</span></div><div class="line">key:timestamp, value:**********</div><div class="line">body: &#123;<span class="string">"appkey"</span>:<span class="string">"********************************"</span>,<span class="string">"type"</span>:<span class="string">"customizedcast"</span>,<span class="string">"alias"</span>:<span class="string">"***********"</span>,<span class="string">"alias_type"</span>:<span class="string">"phone"</span>,<span class="string">"payload"</span>:&#123;<span class="string">"display_type"</span>:<span class="string">"notification"</span>,<span class="string">"body"</span>:&#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"after_open"</span>:<span class="string">"go_app"</span>&#125;&#125;,<span class="string">"production_mode"</span>:<span class="string">"true"</span>,<span class="string">"timestamp"</span>:<span class="string">"**********"</span>&#125;</div></pre></td></tr></table></figure>
<p>问题在第 15 行开始出现，明明前面刚添加完 body ，马上就不见了；然而最后添加 after_open 时，包含 text 的 body 却保留下来了！ 而且每次运行结果都一样，并不随机。</p>
<p>改为 <code>org.json</code> 后的 log （因两个包接口基本兼容，只是修改 import 的包，还有把初始化 <code>JSONObject.fromObject(str)</code> 改为 <code>new JSONObject(str)</code> 而已，上面代码一点没动，就不重新贴了）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">key:appkey, value:********************************</div><div class="line">key:<span class="built_in">type</span>, value:customizedcast</div><div class="line">key:<span class="built_in">alias</span>, value:***********</div><div class="line">key:alias_type, value:phone</div><div class="line">key:ticker, value:测试</div><div class="line">Enter body ==========</div><div class="line">new payload and add. root: &#123;<span class="string">"alias_type"</span>:<span class="string">"phone"</span>,<span class="string">"payload"</span>:&#123;&#125;,<span class="string">"alias"</span>:<span class="string">"***********"</span>,<span class="string">"appkey"</span>:<span class="string">"********************************"</span>,<span class="string">"type"</span>:<span class="string">"customizedcast"</span>&#125;</div><div class="line">payload before has(body) : &#123;&#125;</div><div class="line">new body and add. payload: &#123;<span class="string">"body"</span>:&#123;&#125;&#125;</div><div class="line">body before put: &#123;&#125;</div><div class="line">body after put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:title, value:测试标题</div><div class="line">Enter body ==========</div><div class="line">payload exists: &#123;<span class="string">"body"</span>:&#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>&#125;&#125;</div><div class="line">payload before has(body) : &#123;<span class="string">"body"</span>:&#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>&#125;&#125;</div><div class="line">body exists: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>&#125;</div><div class="line">body before put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>&#125;</div><div class="line">body after put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:text, value:测试内容</div><div class="line">Enter body ==========</div><div class="line">payload exists: &#123;<span class="string">"body"</span>:&#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;&#125;</div><div class="line">payload before has(body) : &#123;<span class="string">"body"</span>:&#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;&#125;</div><div class="line">body exists: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">body before put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">body after put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:after_open, value:go_app</div><div class="line">Enter body ==========</div><div class="line">payload exists: &#123;<span class="string">"body"</span>:&#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;&#125;</div><div class="line">payload before has(body) : &#123;<span class="string">"body"</span>:&#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;&#125;</div><div class="line">body exists: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">body before put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">body after put: &#123;<span class="string">"after_open"</span>:<span class="string">"go_app"</span>,<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:display_type, value:notification</div><div class="line">payload exists: &#123;<span class="string">"body"</span>:&#123;<span class="string">"after_open"</span>:<span class="string">"go_app"</span>,<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;&#125;</div><div class="line">key:production_mode, value:<span class="literal">true</span></div><div class="line">key:timestamp, value:**********</div><div class="line">body: &#123;<span class="string">"alias_type"</span>:<span class="string">"phone"</span>,<span class="string">"payload"</span>:&#123;<span class="string">"display_type"</span>:<span class="string">"notification"</span>,<span class="string">"body"</span>:&#123;<span class="string">"after_open"</span>:<span class="string">"go_app"</span>,<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;&#125;,<span class="string">"alias"</span>:<span class="string">"***********"</span>,<span class="string">"appkey"</span>:<span class="string">"********************************"</span>,<span class="string">"type"</span>:<span class="string">"customizedcast"</span>,<span class="string">"production_mode"</span>:<span class="string">"true"</span>,<span class="string">"timestamp"</span>:<span class="string">"**********"</span>&#125;</div></pre></td></tr></table></figure>
<p>一个可以明显发现的细节是，json-lib 保持了添加顺序，而 org.json 没有。我看过 json-lib 源码是用 ListOrderedMap（看的最新代码，没找我引用的版本，不过估计差别不会太大）。</p>
<p>然而这并没有什么用，内容都丢了，保持顺序有毛线用。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 json-lib 时发现了比较诡异的现象，分析半天没有找到原因。最后因时间关系，直接替换成 org.json 解决了。疑似json-lib 有 bug，Mark 一个，以后再看。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://jaycechant.info/tags/Java/"/>
    
      <category term="json" scheme="http://jaycechant.info/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>我的自用 软件 和 服务 清单</title>
    <link href="http://jaycechant.info/2017/my-software-and-service-list/"/>
    <id>http://jaycechant.info/2017/my-software-and-service-list/</id>
    <published>2017-01-23T07:30:50.000Z</published>
    <updated>2017-09-24T16:05:44.805Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个 <strong>持续更新</strong> 的清单，记录我在 各个平台（目前主要是 Windows 、 Linux  和 Android） 的首选 软件 / App / 服务。供我换机或重装系统时 <strong>回顾</strong>，也供大家参考；也欢迎大家在留言推荐更好的选择。</p>
<a id="more"></a>
<h2 id="选择标准"><a href="#选择标准" class="headerlink" title="选择标准"></a>选择标准</h2><ul>
<li><p>好用：超级主观的标准。我会谈谈到底哪里好，但不一定适合其他人。</p>
</li>
<li><p>开源：省钱是一方面，但只是一部分原因。  </p>
<p>更重要的，第一是 <strong>『林纳斯定律』</strong> ：一个社区活跃的开源软件，会有更少的 bug，快速的演化，以及几乎不可能有后门。（当然也并不绝对，参见『Ken Thompson 大神的 C 语言编译器后门』，最好工具引用的技术也都是开源的）  </p>
<p>第二是开源决定了，即使原作者 / 版权方 放弃更新，或者转向闭源，足够活跃的社区依然可以维持开源分支的开发（例如 Hudson &gt; Jenkins， MySQL &gt; MariaDB），开源的软件能使用更长时间，不会因为商业上的原因突然中断。一个开源工具沉寂之时，往往是被另一个更优秀的工具代替了。  </p>
<p>在此基础上，拒绝所有破解版工具。如果一个工具实在没有开源 / 免费 的替代品，那就购买。使用破解软件，一方面存在安全风险，另一方面有违软件开发者的立场。  </p>
<p>基于类似原因，推荐大家都到官网下载，谨慎使用所谓的绿化软件。确实有『绿化』需求可以考虑自己用UniversalExtractor 制作。</p>
</li>
<li><p>跨平台一致性：需要在不同的平台上使用软件，已经是一个不可回避的现实。如果两个软件各方面都差不多，我会优先选择跨平台，并 <strong>使用体验一致</strong> 的。这样会降低 学习 和 来回切换 的成本。</p>
</li>
</ul>
<p>这个清单一开始是 <code>平台 &gt; 需求 &gt; 软件</code> 的结构。后来发现，由于某些优秀跨平台软件的存在，在不同平台下都是同一个选项，会有很多重复内容。后改为 <code>需求 &gt; 软件（备注适用平台）</code> 的结构。</p>
<p>曾用过的软件如果比较优秀也会列出，当前已经不用或者很少用的，会加上<del>删除线</del>。只有标题的，先占位，慢慢补充。</p>
<p>注意这是一个清单，只列出简介，不涉及用法，另有一篇 <a href="../special-for-tools/">小工具专题</a> 分享小工具的使用。</p>
<hr>
<h2 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h2><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p>我主要使用 Markdown 作为文档原稿，Markdown 编辑器单独列出。（参见 <a href="../why-you-should-document-with-Markdown/">《为什么你应该用 Markdown 写文档？》</a> ， Markdown 足以应对绝大多数场景。其他标记语言偶尔使用，但要么不如 Markdown 轻巧，要么不如 Markdown 工具支持丰富。日后如果 Markdown 方言陷入兼容性问题，考虑往 AsciiDoc 迁移。）</p>
<p>目前主力 Typora ，Smark 备用。</p>
<ul>
<li><p><a href="http://www.typora.io/" target="_blank" rel="external">Typora</a> (Windows / Linux / Mac) ： 简洁强大的 Markdown 编辑器，当前首选。</p>
<ul>
<li>优点 ： 功能强大，该有都有，导出选项丰富（后端是 pandoc）。界面简洁美观，支持多种写作模式，尽量减少打扰，让你专注在写字这件事上。用它写东西是一种享受。需要自己体验。</li>
<li>缺点 ： 虽还在 beta 阶段，已经很好用，稳定，更新也很勤快，刚支持完 Linux ，马上又推出了 Mac 的支持。非要挑缺点的话，不开源，而且稳定版之后存在收费的可能（？）。</li>
</ul>
</li>
<li><p><a href="https://github.com/elerao/Smark" target="_blank" rel="external">Smark(Github)</a> / <a href="http://www.oschina.net/p/smark-editor" target="_blank" rel="external">Smark(OSChina)</a> (Windwos / Linux / Mac) ：作者为自己写的 pandoc 前端。</p>
<ul>
<li>优点 ： 以 pandoc 为后端，也就继承 pandoc 的强大。同时以图形界面避免记忆命令行。基于 pandoc 和 Qt 都是跨平台的，它可以保持多平台体验一致。我对它非常满意，直到发现了Typora。</li>
<li>缺点 ： 不是实时刷新。问题不大，先专心写一段，想看预览点一下 F5 也不是大问题。另外就是，源码跨平台，但作者只编译打包了 Win32 的包（他自己用）。Win64 需要自己替换64位的 pandoc ，其他平台需要自己配置 Python + PyQt 环境编译。目前在 Ubuntu 上编过一个，其他平台还没试过。</li>
</ul>
</li>
<li><p><a href="http://pandoc.org/" target="_blank" rel="external">pandoc</a> (跨平台)：pandoc 号称 标记语言的瑞士军刀，可以在多种标记语言和文档格式之间自由切换，Markdown 只是它支持的其中一种语言。不过是命令行工具，一般用户使用会有不便。上面两个优秀的编辑器都有使用 pandoc 作为后端。</p>
</li>
<li><s><a href="http://markdownpad.com/" target="_blank" rel="external">MarkdownPad</a> </s>(Windows, 需要.NET)：早期 Windows 上的选择。<ul>
<li>优点：简单易用，实时刷新，复制可以选择复制 Markdown 还是 HTM L，而且 HTML 会自动带上 CSS 。在不支持 Markdown 的 web 编辑器上面写东西，直接复制 HTML 连 CSS 很省心。</li>
<li>缺点：在早期的优点成为标配后，毫无亮点。功能很少，导出选项很少。就这样，很多功能还动不动要收费版才提供。后备，基本不用了。</li>
</ul>
</li>
</ul>
<h3 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h3><p>大文件加载快，支持多编码多格式（例如自动识别 Windows 和 Linux 的换行），能写字，也能在写段小脚本懒得开IDE时编辑代码，要么小巧要么强大。</p>
<p>目前 Linux 环境用 Vim，Windows 环境主用 Notepad++，但默认打开方式设为 Notepad2（因为更轻巧）。后面想试用一下Atom，再回来更新。</p>
<p>更多编辑器比较，可以参考 <a href="https://zh.wikipedia.org/wiki/文件编辑器比较" target="_blank" rel="external">维基百科:文件编辑器比较</a></p>
<ul>
<li><a href="http://www.vim.org/" target="_blank" rel="external">Vim</a> (跨平台)：老牌、强大、经典，只要你愿意，通过增加插件和配置，好像没有做不到的事情，Linux 下的首选编辑器，我用它纯粹习惯，无意与 Emacs 党争论。</li>
</ul>
<ul>
<li><p><a href="https://notepad-plus-plus.org/" target="_blank" rel="external">Notepad++</a> (Windows) ：Windows 下支持各种语法高亮、宏和插件的编辑器多面手。默认就很强大，也可以轻易通过配置和插件变得更适合自己。多行编辑是比较少见的特色。</p>
</li>
<li><p><a href="http://www.flos-freeware.ch/notepad2.html" target="_blank" rel="external">Notepad2</a> (Windows) ： 百K单文件的轻量级软件，系统 Notepad 的最佳替代品。</p>
</li>
<li><p><s><a href="http://www.scintilla.org/SciTE.html" target="_blank" rel="external">SciTE</a></s>(<a href="http://www.scintilla.org/" target="_blank" rel="external">Scintilla</a> , 跨平台) ： SciTE 是 <strong>SCIntilla based Text Editor</strong> 的缩写，一开始只是作者作为Scintilla 使用范例写的。  </p>
<p>Scintilla 是用 C++ 写的开源编辑器组件，因为太过优秀，一经出现就很少有人会重头写编辑器了，都是基于Scintilla 加一个外壳。这里有一个很长的 <a href="http://www.scintilla.org/ScintillaRelated.html" target="_blank" rel="external">列表</a> 列出基于 Scintilla 的编辑器，里面就包括了 Notepad++ 和 Notepad2。作为 Scintilla 嫡亲的 SciTE 当然也很优秀，单文件就已经非常强大，也有极强的可配置性，还能通过 Lua 脚本扩展功能。</p>
<p>引用 <a href="http://www.appinn.com/scite/" target="_blank" rel="external">小众软件</a> 的话： 『较其它同重量级软件，最耀眼的就是导出功能，可以导出 PDF/HTML/RTF/XML/LaTex 类型的文件，直接就能将语法高亮的内容导出』。对于中文用户有个比较致命的缺点，就是中文支持不稳定。放在这里致敬，但并不是十分推荐。</p>
</li>
<li><p><s><a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a></s>(跨平台) ： 个人感觉各方面都很像 Notepad++，不过颜值更高一些。本身是专有软件，但是上面很多扩展包都是开源的，因为社区的活跃而变得强大。严格来说，使用Sublime Text 需要购买授权，只是比较良心提供不限期试用，导致很多人一直不注册。授权方式比较灵活，可以按人数，也可以按机器，官方甚至贴心地推荐按便宜的方式买；个人授权可以用于工作环境，但反过来不行。如果你觉得它好用，最好付费使用，不然就选择开源免费的工具。</p>
</li>
</ul>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><h3 id="IDE-Integrated-Development-Environment-集成开发环境"><a href="#IDE-Integrated-Development-Environment-集成开发环境" class="headerlink" title="IDE (Integrated Development Environment 集成开发环境)"></a>IDE (Integrated Development Environment 集成开发环境)</h3><p><em>像 Android 选 AS 这种官方钦定的就不列了</em></p>
<h4 id="跨语言"><a href="#跨语言" class="headerlink" title="跨语言"></a>跨语言</h4><ul>
<li>Eclipse</li>
<li>Visual Studio Code</li>
</ul>
<h4 id="C-C"><a href="#C-C" class="headerlink" title="C / C++"></a>C / C++</h4><ul>
<li>Code::Block</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><ul>
<li>PyCharm Community edition</li>
</ul>
<h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><ul>
<li>Jenkins (Windows / Linux / Mac) ：</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>暂时不足以自成一格分类的，或者先列出来等待整理的，都暂时放这里。</p>
<ul>
<li>curl</li>
<li>Postman</li>
<li>Markdown + gitbook (based on node.js) + gitbook.com</li>
<li>rst + <a href="https://pypi.python.org/pypi/Sphinx" target="_blank" rel="external">Sphinx</a> (based on Python)+ readthedocs.org</li>
<li>AsciiDoc + <a href="http://asciidoctor.org/" target="_blank" rel="external">Asciidoctor</a> (based on Ruby)</li>
<li>hexo + github</li>
</ul>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个 &lt;strong&gt;持续更新&lt;/strong&gt; 的清单，记录我在 各个平台（目前主要是 Windows 、 Linux  和 Android） 的首选 软件 / App / 服务。供我换机或重装系统时 &lt;strong&gt;回顾&lt;/strong&gt;，也供大家参考；也欢迎大家在留言推荐更好的选择。&lt;/p&gt;
    
    </summary>
    
    
      <category term="a list" scheme="http://jaycechant.info/tags/a-list/"/>
    
      <category term="keep-updating" scheme="http://jaycechant.info/tags/keep-updating/"/>
    
      <category term="software" scheme="http://jaycechant.info/tags/software/"/>
    
      <category term="service" scheme="http://jaycechant.info/tags/service/"/>
    
      <category term="app" scheme="http://jaycechant.info/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>git: 在两个 repo 之间 merge</title>
    <link href="http://jaycechant.info/2017/git-merge-between-different-repo/"/>
    <id>http://jaycechant.info/2017/git-merge-between-different-repo/</id>
    <published>2017-01-21T03:28:29.000Z</published>
    <updated>2017-10-12T14:20:54.010Z</updated>
    
    <content type="html"><![CDATA[<p>事情是这样，有一个叫 scripts 的 git 库，里面放了一些所属不明的脚本。我希望把这些零散脚本管理起来，它们不属于任何一个项目，为每个脚本都建一个库又太小题大做，于是有了一个『脚本孤儿院』。</p>
<p>与此同时，另外有个项目在进行，到一定程度时，它需要引用前面脚本里的一个。我突然明白，那个脚本就是这个项目的一部分，它『找到组织』，该『认祖归宗』了！</p>
<a id="more"></a>
<h1 id="剪切，粘贴？"><a href="#剪切，粘贴？" class="headerlink" title="剪切，粘贴？"></a>剪切，粘贴？</h1><p>最简单的方法当然是，从原库 <strong>剪切</strong> 相关文件， <strong>粘贴</strong> 到新库，然后两边分别提交变更。</p>
<p>确实，文件管理权移交这件事完成了。但结果是，新库历史里这些文件是凭空出现的，之前的提交历史都丢失了。你当然可以在新库提交时，在message里提一下，这些文件原本是在哪个库，详细历史请参考该库历史。可如果有一天旧库不再维护呢？你无法保证两个库生命周期一致。</p>
<h1 id="merge"><a href="#merge" class="headerlink" title="merge ?"></a>merge ?</h1><p>怎么连带提交历史一起移动呢？Merge ！Merge 就是为这个目的存在的。不过等等，merge 只能在 branch  之间进行吧，两个 repo 怎么做？（严格说，是 commit 之间，branch 也好 tag 也罢，在 git 里最后都是指向 commit 的指针）</p>
<h1 id="fetch-amp-merge"><a href="#fetch-amp-merge" class="headerlink" title="fetch &amp; merge"></a>fetch &amp; merge</h1><p>当然可以，只要把要合并来源，当做远程库，获取到目标库生成一个远程分支，再合并即可。</p>
<p>假设要做的是 <code>repo-from</code> =&gt; <code>repo-target</code> 的合并，按以下操作即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> repo-target</div><div class="line">$ git remote add other /<span class="built_in">local</span>/path/to/repo-from <span class="comment"># 不要忘了 git 支持的协议非常广泛，除了常用的http(s)和ssh，也支持文件夹作为远程库</span></div><div class="line">$ git fetch other</div><div class="line">$ git merge other/master <span class="comment"># 这里假定你要合并master，别的分支改一下就好</span></div></pre></td></tr></table></figure>
<p>完事之后再 <code>git remote rm other</code>  ， 然后 <code>git rebase</code> 稍微调整一下提交历史就好（因为这样合并，会把完整历史引进来，但实际上你可能只要部分文件和相关的提交历史）。或者 fetch 后直接选择 rebase，把需要的 commit 挑选出来，不再赘述。</p>
<h1 id="fast-export-amp-fast-import"><a href="#fast-export-amp-fast-import" class="headerlink" title="fast-export &amp; fast-import"></a>fast-export &amp; fast-import</h1><p>上述方法基本可以解决问题，非要挑剔的话：</p>
<ol>
<li>要先 添加 远程库 再删掉</li>
<li>引入的历史可能太多</li>
</ol>
<p>其实 git  自带了相关工具：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> repo-from</div><div class="line">$ git fast-export master~5..master | sed <span class="string">"s|refs/heads/master|refs/heads/other|"</span> | (<span class="built_in">cd</span> /path/to/repo-target &amp;&amp; git fast-import)</div><div class="line">$ <span class="built_in">cd</span> repo-target</div><div class="line">$ git merge other</div></pre></td></tr></table></figure>
<p>通过 <code>fast-export</code> + pipe + <code>fast-import</code> 从一个库导入到另一个库。注意的地方有几个：</p>
<ol>
<li>因为两边都是本地分支，所以为了避免重名，中间可以用 sed 改名</li>
<li>fast-export 可以指定导入的范围，譬如上面就是获取 master 最后5个commit。不过注意的是，这个只是限制了commit 历史，文件还是会整个分支（也就是最新那个 commit 的所有祖先 commit）都包含进来。文件的筛选就要在merge 阶段做了。</li>
</ol>
<p>介绍到这，内容并不复杂。 对于 Git 的使用，不排斥甚至推荐用 TortoiseGit 和 SourceTree 这样的 GUI 工具，为常规操作节省时间。但是了解命令可以做到更多！</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事情是这样，有一个叫 scripts 的 git 库，里面放了一些所属不明的脚本。我希望把这些零散脚本管理起来，它们不属于任何一个项目，为每个脚本都建一个库又太小题大做，于是有了一个『脚本孤儿院』。&lt;/p&gt;
&lt;p&gt;与此同时，另外有个项目在进行，到一定程度时，它需要引用前面脚本里的一个。我突然明白，那个脚本就是这个项目的一部分，它『找到组织』，该『认祖归宗』了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://jaycechant.info/tags/git/"/>
    
      <category term="skill" scheme="http://jaycechant.info/tags/skill/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins &#39;Could not initialize JFreeChart&#39; 和 tomcat setenv.sh</title>
    <link href="http://jaycechant.info/2017/Jenkins-Could-not-initialize-JFreeChart-and-tomcat-setenv/"/>
    <id>http://jaycechant.info/2017/Jenkins-Could-not-initialize-JFreeChart-and-tomcat-setenv/</id>
    <published>2017-01-20T06:44:31.000Z</published>
    <updated>2017-10-12T14:39:33.678Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins 有一系列插件，可以提供趋势图显示项目的情况，例如 Checkstyle, Dry, FindBugs, PMD, Tasks, 和 Warnings，还有把前面的内容合并显示的 <a href="http://wiki.jenkins-ci.org/x/tgeIAg" target="_blank" rel="external">Static Analysis Collector Plug-in</a>。实际上，你只要装最后一个，前面的会作为依赖全部装上。</p>
<p>作为尝试，先配置了 <strong>Maven Warnings Trend</strong>，打开一看，图是裂的……</p>
<a id="more"></a>
<h2 id="headless-mode"><a href="#headless-mode" class="headerlink" title="headless mode"></a>headless mode</h2><p>一看有几个Exception，根源应该是这个：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Could not initialize class org.jfree.chart.JFreeChart</div></pre></td></tr></table></figure>
<p>放Google，在官方issue里发现这个：<a href="https://issues.jenkins-ci.org/browse/JENKINS-21839" target="_blank" rel="external">https://issues.jenkins-ci.org/browse/JENKINS-21839</a></p>
<blockquote>
<p>It’s not a bug in Jenkins but a miss-configuration. Anyway I couldn’t find it in any knowledge base. Maybe adding this solution in JIRA is enough … but let me suggest you to try to add it somewhere in plugin’s documentation, for example on “Configuration” section found here <a href="https://wiki.jenkins-ci.org/display/JENKINS/Performance+Plugin" target="_blank" rel="external">https://wiki.jenkins-ci.org/display/JENKINS/Performance+Plugin</a></p>
<p>The solution is just adding</p>
<p>-Djava.awt.headless=true</p>
<p>I’m running Jenkins as a webapp on my Tomcat, so I just added this line to my /opt/tomcat/bin/catalina.sh :</p>
<p>CATALINA_OPTS=-Djava.awt.headless=true</p>
</blockquote>
<p>关于headless的信息：<a href="https://www.oschina.net/translate/using-headless-mode-in-java-se" target="_blank" rel="external">https://www.oschina.net/translate/using-headless-mode-in-java-se</a></p>
<p>简单说，JFreeChart 引用了awt 包，然后 awt 会尝试绑定本地 IO 设备——包括 显示器 和 Keyboard，结果失败就会引起异常。只要启用 headless mode 就可以避免。直接 java 命令启动的 Jenkins.war，在启动时加上参数即可。如果通过 tomcat 这样的容器启动，就要把参数加到容器去。</p>
<h2 id="setenv-sh"><a href="#setenv-sh" class="headerlink" title="setenv.sh"></a>setenv.sh</h2><p>一点题外话。</p>
<p>上面 issue 的讨论里，是直接往 <code>catalina.sh</code> 里加参数；当初配置 tomcat 时，也有文章说写到 <code>startup.sh</code> 和 <code>shutdown.sh</code> 里面去。</p>
<p>实际上这都是不那么好的做法，应该写在 <code>setenv.sh</code> 里。看一下就知道 <code>startup.sh</code> 和 <code>shutdown.sh</code>  最后都实际调用到 <code>catalina.sh</code> ，而它会自动加载 <code>setenv.sh</code>。</p>
<p>跟分别写在  <code>startup.sh</code> 和 <code>shutdown.sh</code>  比，写在一处当然更容易管理；那为什么不直接写在<code>catalina.sh</code> 开头，要多此一举呢？除了单独写在一个文件，更清晰以外，还有方便管理多个实例的好处。</p>
<p><code>catalina.sh</code> 会先检查 <code>$CATALINA_BASE/bin/setenv.sh</code> ，存在就加载，不存在再去检查 <code>$CATALINA_HOME/bin/setenv.sh</code> 并加载。也就是 <code>CATALINA_BASE</code> 的配置优先于 <code>CATALINA_HOME</code> 的配置。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ -r <span class="string">"<span class="variable">$CATALINA_BASE</span>/bin/setenv.sh"</span> ]; <span class="keyword">then</span></div><div class="line">  . <span class="string">"<span class="variable">$CATALINA_BASE</span>/bin/setenv.sh"</span></div><div class="line"><span class="keyword">elif</span> [ -r <span class="string">"<span class="variable">$CATALINA_HOME</span>/bin/setenv.sh"</span> ]; <span class="keyword">then</span></div><div class="line">  . <span class="string">"<span class="variable">$CATALINA_HOME</span>/bin/setenv.sh"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p><code>CATALINA_HOME</code> 就是 tomcat 的安装目录了。而 <code>CATALINA_BASE</code> 是工作目录，默认等于 <code>CATALINA_HOME</code> ：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Only set CATALINA_HOME if not already set</span></div><div class="line">[ -z <span class="string">"<span class="variable">$CATALINA_HOME</span>"</span> ] &amp;&amp; CATALINA_HOME=`<span class="built_in">cd</span> <span class="string">"<span class="variable">$PRGDIR</span>/.."</span> &gt;/dev/null; <span class="built_in">pwd</span>`</div><div class="line"></div><div class="line"><span class="comment"># Copy CATALINA_BASE from CATALINA_HOME if not already set</span></div><div class="line">[ -z <span class="string">"<span class="variable">$CATALINA_BASE</span>"</span> ] &amp;&amp; CATALINA_BASE=<span class="string">"<span class="variable">$CATALINA_HOME</span>"</span></div></pre></td></tr></table></figure>
<p>如果需要安装一个 tomcat 跑多个实例，这时<code>CATALINA_BASE</code> 就会指向各个实例自己的目录。这时分别写在工作目录下的 <code>setenv.sh</code> 就可以分别设置不同的配置。</p>
<p>就酱。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins 有一系列插件，可以提供趋势图显示项目的情况，例如 Checkstyle, Dry, FindBugs, PMD, Tasks, 和 Warnings，还有把前面的内容合并显示的 &lt;a href=&quot;http://wiki.jenkins-ci.org/x/tgeIAg&quot;&gt;Static Analysis Collector Plug-in&lt;/a&gt;。实际上，你只要装最后一个，前面的会作为依赖全部装上。&lt;/p&gt;
&lt;p&gt;作为尝试，先配置了 &lt;strong&gt;Maven Warnings Trend&lt;/strong&gt;，打开一看，图是裂的……&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://jaycechant.info/tags/Java/"/>
    
      <category term="Jenkins" scheme="http://jaycechant.info/tags/Jenkins/"/>
    
      <category term="trouble" scheme="http://jaycechant.info/tags/trouble/"/>
    
      <category term="Tomcat" scheme="http://jaycechant.info/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>小工具专题（持续更新）</title>
    <link href="http://jaycechant.info/2017/special-for-tools/"/>
    <id>http://jaycechant.info/2017/special-for-tools/</id>
    <published>2017-01-16T06:56:57.000Z</published>
    <updated>2017-01-25T04:21:21.999Z</updated>
    
    <content type="html"><![CDATA[<p>这个专题收集一些趁手的小工具，并附使用技巧。尽量地小和简单，尽量的用完即走，简单到不足以单独成篇，集中放这里；如果复杂的工具，就单独开一篇不放这里，因此可能比较多是命令行工具也不一定。</p>
<p>另外开一篇常用软件列表，只列举优缺点对比不展开用法，所以某些工具可能会有重叠，但内容侧重点不同。</p>
<p>只有标题的，先占坑慢慢填。</p>
<a id="more"></a>
<h1 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h1><h2 id="Web-API-工具"><a href="#Web-API-工具" class="headerlink" title="Web API 工具"></a>Web API 工具</h2><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><h3 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h3><h2 id="Click-Python-包"><a href="#Click-Python-包" class="headerlink" title="Click (Python 包)"></a>Click (Python 包)</h2><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="Terminal-mutiplexer"><a href="#Terminal-mutiplexer" class="headerlink" title="Terminal mutiplexer"></a>Terminal mutiplexer</h2><p><strong>multiplexer</strong> 电子上是指多路复用器，但这里是指Linux上的终端多会话管理器。</p>
<h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><p><a href="http://www.gnu.org/software/screen/" target="_blank" rel="external">Screen</a>是GNU项目中的一个工具，一般的Linux发行版本应该都有自带。其主页上的介绍是：</p>
<blockquote>
<p>” Screen is a full-screen window manager that multiplexes a physical terminal between several processes, typically interactive shells.”</p>
</blockquote>
<p>可以简单看作一个远程会话 / 窗口管理器。</p>
<p>不过高级技巧我总是记不住，一般只是用到它的一个主要功能： <strong>断开ssh连接之后，远程端的程序继续运行，需要时再重新连上继续工作。</strong></p>
<p>更多的技巧，大家自行了解：<a href="http://www.ibm.com/developerworks/cn/linux/l-cn-screen/" target="_blank" rel="external">IBM 开发者网络上的介绍</a> </p>
<p>如果需要管理多个ssh连接， <strong>Byobu(tmux)</strong> (对Screen的强化，一般需要额外安装，不过我有权限的服务器一般都会装上，哈哈。)会更方便好用，定制化更高。</p>
<p>入门使用，以下几个命令已经基本够用了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ screen</div></pre></td></tr></table></figure>
<p>直接输入screen，就会启动一个执行shell的会话。你可以执行任意shell程序，就像在ssh窗口中那样。在该窗口中键入exit退出该窗口，如果这是该screen会话的唯一窗口，该screen会话退出，否则screen自动切换到前一个窗口。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C<span class="_">-a</span>, d (即Ctrl键+a键，之后再按下d键)</div></pre></td></tr></table></figure>
<p>暂时断开(detach)当前会话，之后再重新连接(attach)。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ screen –ls</div></pre></td></tr></table></figure>
<p>列出当前所有会话</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ screen –r [pid | session name]</div></pre></td></tr></table></figure>
<p>重新连接会话。如果只有一个会话，参数可以留空。如果有多个会话，可以通过上一个命令查看pid或session name(需要另外命令指定)。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ screen –R</div></pre></td></tr></table></figure>
<p>跟-r作用一样，但是如果当前没有可用会话，会自动新建一个。</p>
<h3 id="Tmux-amp-byobu"><a href="#Tmux-amp-byobu" class="headerlink" title="Tmux &amp; byobu"></a>Tmux &amp; byobu</h3><p><a href="http://tmux.github.io/" target="_blank" rel="external">Tmux</a> 的官方介绍写着</p>
<blockquote>
<p><em>tmux</em> is a terminal multiplexer.</p>
<p><strong>What is a terminal multiplexer?</strong> It lets you switch easily between several programs in one terminal, detach them (they keep running in the background) and reattach them to a different terminal. And do a lot more.</p>
</blockquote>
<p>用法可以看这篇介绍：<a href="http://aofengblog.blog.163.com/blog/static/6317021201310207323925/" target="_blank" rel="external">Linux终端多窗口工具tmux</a></p>
<p>Tmux 比 screen强了不是一丁半点，但是要自己折腾的地方太多了，我连screen的命令还经常忘呢，何况这个。</p>
<hr>
<p>所以我最后选择了 <a href="http://www.byobu.co/" target="_blank" rel="external">byobu</a> (日语屏风的罗马音)。</p>
<blockquote>
<p>Byobu is a Japanese term for decorative, multi-panel screens that serve as folding room dividers. As an open source software project, Byobu is an elegant enhancement of the otherwise functional, plain, practical <a href="http://www.gnu.org/software/screen/" target="_blank" rel="external">GNU Screen</a>. Byobu includes an enhanced profile, configuration utilities, and system status notifications for the GNU screen window manager as well as the <a href="http://tmux.sourceforge.net/" target="_blank" rel="external">Tmux</a> terminal multiplexer. Byobu is developed and released as free software under the <a href="http://www.gnu.org/licenses/gpl-3.0.txt" target="_blank" rel="external">GPLv3</a>.</p>
</blockquote>
<p>介绍里第一句说，byobu是个日语词，是一种multi-panel的screens（英语里有屏风的意思，不过常见屏风一般是单块的，而日式屏风往往是多折的），所以byobu其实不是新东西，它本质上是一个tmux的frontend，是一个tmux 加上一堆设计好的配置和一些小工具（配置工具，系统状态显示器），用来解决tmux比较复杂的问题。执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ byobu --help</div><div class="line">usage: tmux [-28lquvV] [-c shell-command] [<span class="_">-f</span> file] [-L socket-name]</div><div class="line">            [-S socket-path] [<span class="built_in">command</span> [flags]]</div></pre></td></tr></table></figure>
<p>就暴露真身了。</p>
<p>虽然是这样说，byobu除了能执行tmux本身的功能之外，还是给懒人提供了方便的，最简单的就是直接<code>$ byobu</code> ，然后通过F2~F9就可以执行绝大多数功能：</p>
<table>
<thead>
<tr>
<th>按键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>F2</strong></td>
<td>Create a new window</td>
</tr>
<tr>
<td><strong>F3</strong></td>
<td>Move to the previous window</td>
</tr>
<tr>
<td><strong>F4</strong></td>
<td>Move to the next window</td>
</tr>
<tr>
<td><strong>F5</strong></td>
<td>Refresh all status notifications</td>
</tr>
<tr>
<td><strong>F6</strong></td>
<td>Detach from the session and logout</td>
</tr>
<tr>
<td><strong>Shift-F6</strong></td>
<td>Detach from the session, but do not logout</td>
</tr>
<tr>
<td><strong>F7 </strong></td>
<td>Enter scrollback/search mode</td>
</tr>
<tr>
<td><strong>F8</strong></td>
<td>Rename the current window</td>
</tr>
<tr>
<td><strong>F9</strong></td>
<td>Launch the Byobu Configuration Menu</td>
</tr>
<tr>
<td><strong>F12</strong></td>
<td>GNU Screen’s Escape Key</td>
</tr>
<tr>
<td><strong>Alt-Pageup</strong></td>
<td>Scroll back through this window’s history</td>
</tr>
<tr>
<td><strong>Alt-Pagedown</strong></td>
<td>Scroll forward through this window’s history</td>
</tr>
<tr>
<td><strong>Shift-F2</strong></td>
<td>Split the screen horizontally</td>
</tr>
<tr>
<td><strong>Ctrl-F2</strong></td>
<td>Split the screen vertically</td>
</tr>
<tr>
<td><strong>Shift-F3 </strong></td>
<td>Move focus to the next split</td>
</tr>
<tr>
<td><strong>Shift-F4</strong></td>
<td>Move focus to the previous split</td>
</tr>
<tr>
<td><strong>Shift-F5</strong></td>
<td>Collapse all splits</td>
</tr>
<tr>
<td><strong>Ctrl-F5</strong></td>
<td>Reconnect any SSH/GPG sockets or agents</td>
</tr>
<tr>
<td><strong>Shift-F12 </strong></td>
<td>Toggle all of Byobu’s keybindings on or off</td>
</tr>
</tbody>
</table>
<p>这些功能中，最常用的就是F2 新建，F3 / F4 前后切换，还有 F6 detach了。如果像我习惯了screen，也可以用 Ctrl + a, d 来detach。</p>
<p>最后提一下，tmux 和 byobu 在 Linux界两大包管理器 yum 和 apt-get 的源里都有，直接安装就好了。</p>
<h2 id="links"><a href="#links" class="headerlink" title="links"></a>links</h2><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个专题收集一些趁手的小工具，并附使用技巧。尽量地小和简单，尽量的用完即走，简单到不足以单独成篇，集中放这里；如果复杂的工具，就单独开一篇不放这里，因此可能比较多是命令行工具也不一定。&lt;/p&gt;
&lt;p&gt;另外开一篇常用软件列表，只列举优缺点对比不展开用法，所以某些工具可能会有重叠，但内容侧重点不同。&lt;/p&gt;
&lt;p&gt;只有标题的，先占坑慢慢填。&lt;/p&gt;
    
    </summary>
    
    
      <category term="screen" scheme="http://jaycechant.info/tags/screen/"/>
    
      <category term="byobu" scheme="http://jaycechant.info/tags/byobu/"/>
    
      <category term="keep-updating" scheme="http://jaycechant.info/tags/keep-updating/"/>
    
  </entry>
  
  <entry>
    <title>Linux 上 为 Jenkins 配置 Android-sdk 及其它</title>
    <link href="http://jaycechant.info/2017/Android-sdk-on-Linux-for-Jenkins-etc/"/>
    <id>http://jaycechant.info/2017/Android-sdk-on-Linux-for-Jenkins-etc/</id>
    <published>2017-01-16T03:24:34.000Z</published>
    <updated>2017-01-25T04:21:21.999Z</updated>
    
    <content type="html"><![CDATA[<p>用 Jenkins 编译APK，在Jenkins所在的Linux (Ubuntu) 服务器配置 Android-sdk。</p>
<p>惯例踩坑，不是完整教程。</p>
<a id="more"></a>
<h1 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h1><p>配置完 Git 库直接开跑</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.io.IOException: Cannot run program <span class="string">"gradle"</span></div></pre></td></tr></table></figure>
<p>指定了本地gradle，但服务器上并没有gradle，改为使用gradle wrapper。</p>
<p>……结果跑了一个周末，gradlew还停在：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Downloading https://services.gradle.org/distributions/gradle-2.14.1-all.zip</div></pre></td></tr></table></figure>
<p>[捂脸]国内的开发者就是困难，gradle不同版本改动大，gradle wrapper多好一个解决方案，我们享受不到。</p>
<p>好吧，好好地根据目前项目的需要，安装一个在服务器，然后到 Jenkins &gt; 系统管理 &gt; Global Tool Configuration 添加一个gradle的版本。</p>
<h1 id="Android-sdk"><a href="#Android-sdk" class="headerlink" title="Android-sdk"></a>Android-sdk</h1><p>再跑，这回找不到ANDROID_HOME。当然，我没装SDK，也没配置环境变量。一个一个去想装什么多累啊，报什么错解决什么就好了。</p>
<p>心想我不需要在服务器开发，只是要管理依赖，只要sdk-tools就好了。官方源各种连不上，到<a href="https://dsx.bugly.qq.com/repository/1" target="_blank" rel="external">腾讯大师兄</a> 下载一个 tools_r25.2.3-linux.zip，在要安装的地方（这次是/opt/下某目录）建一个android-sdk/tools目录，然后解压到里面，执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> android-sdk/tools</div><div class="line">$ sudo ./android</div></pre></td></tr></table></figure>
<p>我去，默认运行居然是GUI工具，不过我也不愿意敲一堆参数，那就配置一下x11 forwarding 然后本地开一个Xming就好了。（当然也可以选择 <code>./android update sdk --no-ui --filter sdk1, sdk2, sdk3,...</code>）</p>
<p>安装好之后，定义 <code>ANDROID_HOME</code> 为 <code>android-sdk</code> 所在目录，并且把 <code>$ANDROID_HOME/tools</code> 和 <code>$ANDROID_HOME/platform-tools</code> 加入 <code>PATH</code> 。如果不确定配置的 <code>ANDROID_HOME</code> 能不能被Jenkins读到，也可以在Jenkins的全局配置里添加这个环境变量。</p>
<p>好了，接下来就是编译报缺什么就装什么了。不过每次失败只能看到遇到的第一个错误，如果自己判断不准依赖，往往要浪费好几个build。还好build号完全不值钱。</p>
<p>这里有一个被误导的点：每次遇到缺什么依赖的时候，报的错误是</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Before building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.</div></pre></td></tr></table></figure>
<p>焦点很容易被引导到License上面去，加上我们很容易以外自己都已经安装了需要的东西，然后就开始折腾License。网上的教程往往默认你依赖的包已经安装好了（或者从别的机器挪过来了），只是没有好好同意License（或License没有一起挪过来），然后告诉你sdk-manager 会对License文件做一个签名保存在 <code>licenses/</code> 目录，要么从原来的机器导出，要么怎样同意重新生成签名云云。</p>
<p>实际上无论是 没有accept license，还是根本没有安装，都会报这个错误，所以在检查License之前，首先要确认包真的安装了。<strong>实际上确实很多时候就是安装漏了东西。要仔细留意是不是名字像，或者同一个包依赖了不同的版本。</strong></p>
<p>不过这里有个我没想明白的地方，一开始我想直接从Windows本地将包和License一起拷到Linux时，发现sdk目录下根本没有 <code>licenses/</code> 目录，Linux上也没有发现，我以为是最新的版本不再这样存放License（实际上是License的sha-1签名）。因为这样，我选择了全部在Linux上用UI重新accept然后安装一次。还好配置了大师兄的镜像速度还是很快的，比拷过去再研究自己生成签名要省事。（配置镜像请看<a href="../../2016/mirrors-collection/">这里</a>）</p>
<p>然后今天我写这篇文章的时候重新进去，忽然发现 <code>licenses/</code> 目录不知道啥时候生成了…… 里面只有一个 <code>android-sdk-license</code> 文件，里面只有一行sha-1 签名，也不知道是对哪个包的，没搞懂原理，暂时能用也先不追究了。</p>
<h1 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h1><p>一路这样一个build号搞定一个依赖，直到一个包在sdk-manager怎么也找不到</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; You have not accepted the license agreements of the following SDK components:</div><div class="line">  [com.android.support.constraint:constraint-layout:1.0.0-alpha4, com.android.support.constraint:constraint-layout-solver:1.0.0-alpha4].</div><div class="line">  Before building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.</div><div class="line">  Alternatively, to learn how to transfer the license agreements from one workstation to another, go to http://d.android.com/r/studio-ui/<span class="built_in">export</span>-licenses.html</div></pre></td></tr></table></figure>
<p>网上找了半天，发现大家都是在Android Studio的SDK Manager里安装，我就在Windows上试了一下，果然只能在Android Studio里看得到……</p>
<p>好吧先不追究原因，我装一个AS还不行吗。同样是在大师兄下载AS的包，解压到对应目录，然后执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> bin</div><div class="line">$ ./studio.sh</div></pre></td></tr></table></figure>
<p>注意这个必须要有界面，不像sdk-manager还有 –no-ui 参数可选，所以 x-server是必须的，我还是x11 forwarding + Xming。</p>
<p>然后就是第一次启动的Setup Wizard。Linux的AS不带SDK，而是在Setup Wizard时从官方(dl.google.com)下载，一般是一个最新的SDK-Tools 和 一个推荐的platform。platform和一些其他的推荐是可以取消复选框的，但是SDK-Tools是强制选中的。官方网址自然很卡，而且我们前面已经安装了一堆东西，没有必要重来，所以只要把 <code>android-sdk</code> 目录指定给AS就好，<strong>它会自动检测，有了的东西不会重复安装</strong> ，所以正常应该什么都会装就过了。启动之后进入 settings，然后在SDK-Manager部分把缺的这两个包安装了，AS的使命就完成了（我又不在服务器写代码[捂脸]）。</p>
<h1 id="gradle-task"><a href="#gradle-task" class="headerlink" title="gradle task"></a>gradle task</h1><p>按理说到了这里，应该没什么错误了，再开一个build，成功了，但是却没有生成物（Artifacts）。</p>
<p>看输出日志</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">:<span class="built_in">help</span></div><div class="line"></div><div class="line">Welcome to Gradle 2.14.1.</div><div class="line"></div><div class="line">To run a build, run gradle &lt;task&gt; ...</div><div class="line"></div><div class="line">To see a list of available tasks, run gradle tasks</div><div class="line"></div><div class="line">To see a list of <span class="built_in">command</span>-line options, run gradle --help</div><div class="line"></div><div class="line">To see more detail about a task, run gradle <span class="built_in">help</span> --task &lt;task&gt;</div></pre></td></tr></table></figure>
<p>额…光顾着搞SDK了，都没有给gradle指定task。</p>
<p>增加一个参数 <code>BUILD_TYPE</code>，然后把task指定为 <code>clean assemble${BUILD_TYPE} --stacktrace --debug</code> ，收工。（task是顺序执行的，这里是两个task，先clean，然后再assemble，参数是为了输出详细的gradle编译信息，好出问题时分析。）</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 Jenkins 编译APK，在Jenkins所在的Linux (Ubuntu) 服务器配置 Android-sdk。&lt;/p&gt;
&lt;p&gt;惯例踩坑，不是完整教程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://jaycechant.info/tags/Jenkins/"/>
    
      <category term="Android" scheme="http://jaycechant.info/tags/Android/"/>
    
      <category term="Android-sdk" scheme="http://jaycechant.info/tags/Android-sdk/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins JavaMail 配置：JCE 及其他</title>
    <link href="http://jaycechant.info/2017/Jenkins-javamail-config-JCE-etc/"/>
    <id>http://jaycechant.info/2017/Jenkins-javamail-config-JCE-etc/</id>
    <published>2017-01-11T07:02:31.000Z</published>
    <updated>2017-01-11T15:19:23.186Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins 上线一段时间，逐渐完善中。原想 nightly build 缓一缓开启，前两天发现trunk有编译不过的代码导致build fail，心想着要是不早点发现，代码排查也麻烦，如果新版本上线当天发现就更折腾，于是就开了nightly build。</p>
<p>既然开了nightly build，跟手动启动的build你会去关注结果不一样，自动启动的build不一定会记得，如果没有留意到build fail就没有意义了。所以顺便就配置结果邮件了。以下是踩坑记录。JCE部分建议大家留意一下，不知道的话，做security相关开发一不小心就在这上面浪费时间。</p>
<a id="more"></a>
<h1 id="JCE"><a href="#JCE" class="headerlink" title="JCE"></a>JCE</h1><p>邮箱直接用QQ邮箱的SMTP服务，理由有二：</p>
<ol>
<li>自己配置邮件服务器，折腾</li>
<li>折腾完之后，对于这种无名服务器发出来的邮件，还极高概率被扔进垃圾箱，得一个一个通知收件同事设置例外，还是折腾</li>
</ol>
<p>这本没有什么难度，在Jenkins全局配置里，多数一看就知道怎么填：</p>
<ul>
<li>SMTP服务器：smtp.qq.com</li>
<li>使用SMTP认证：√  <ul>
<li>用户名：youraccount@qq.com</li>
<li>密码：这里比较特殊，不是填登录密码，而是在QQ邮箱设置 &gt; 账户 里打开SMTP功能时，会生成一个密码，填这个</li>
</ul>
</li>
<li>使用SSL协议：√ （QQ邮箱要求打开）  </li>
<li>SMTP端口：465</li>
</ul>
<p>发送测试邮件，发现无法连上服务器。报以下错误：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure 	at com.sun.mail.smtp.SMTPTransport.openServer(SMTPTransport.java:1934)</div></pre></td></tr></table></figure>
<p>第一反应，检查Jenkins服务器的网络环境，网络连接、端口检查了一通，没发现问题，只好拿着这个Exception放Google，然后果然就找到了原因：</p>
<p><a href="http://www.cnblogs.com/interdrp/p/5766107.html" target="_blank" rel="external">http://www.cnblogs.com/interdrp/p/5766107.html</a></p>
<p>原文一笔带过，我补充解释一下：</p>
<p>JCE，Java Cryptography Extension，在早期JDK版本中，由于受美国的密码出口条例约束，Java中涉及加解密功能的API被限制出口，所以Java中安全组件被分成了两部分: 不含加密功能的JCA（Java Cryptography Architecture ）和含加密功能的JCE（Java Cryptography Extension）。在JDK1.1-1.3版本期间，JCE属于扩展包，仅供美国和加拿大的用户下载，JDK1.4+版本后，随JDK核心包一起分发。</p>
<p>然而，即使是最新版JDK自带的JCE，仍然是受限的版本，引用unlimited JCE自带的README的内容：</p>
<blockquote>
<p>Due to import control restrictions of some countries, the version of<br>the JCE policy files that are bundled in the Java Runtime Environment,<br>or JRE(TM), 8 environment allow “strong” but limited cryptography to be<br>used. This download bundle (the one including this README file)<br>provides “unlimited strength” policy files which contain no<br>restrictions on cryptographic strengths.</p>
</blockquote>
<p>受某些国家的进口控制约束，随 JDK / JRE 发布的JCE版本的加密算法是受限制的，想摆脱这个限制，就要额外下载unlimited JCE，替换掉 <code>$JRE_HOME/lib/security/</code>下的 local_policy.jar 和 US_export_policy.jar 两个文件。</p>
<p>替换之后，要重启一下tomcat让它重新加载lib。</p>
<p><strong>个人觉得这个问题特别坑！！ 一般人只会怀疑自己的环境配置，或者代码，很少会怀疑到JDK本身上面去。建议大家记住这个坑，以后跟加密有关的错误，例如SSL相关的，可以排查一下是不是JCE的问题。或者干脆现在就去，把开发环境和生产环境的JCE换掉。</strong></p>
<h1 id="管理员邮箱"><a href="#管理员邮箱" class="headerlink" title="管理员邮箱"></a>管理员邮箱</h1><p>换了JCE之后重新测试，这次报以下错误：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">com.sun.mail.smtp.SMTPSendFailedException: 501 mail from address must be same as authorization user</div><div class="line">;</div><div class="line">  nested exception is:</div><div class="line">	com.sun.mail.smtp.SMTPSenderFailedException: 501 mail from address must be same as authorization user</div></pre></td></tr></table></figure>
<p>这倒是个小问题：前面设置管理员邮箱时，我填了我自己的邮箱；但是为了区分哪些是自动发的，哪些是我个人发的邮件，SMTP邮箱填的是团队的邮箱。</p>
<p>Jenkins 会自动把管理员邮箱设为发信人，但是QQ邮箱不允许发信人和登录账号不一致，所以报错。</p>
<p>把管理员邮箱也换成同一个邮箱就好了。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins 上线一段时间，逐渐完善中。原想 nightly build 缓一缓开启，前两天发现trunk有编译不过的代码导致build fail，心想着要是不早点发现，代码排查也麻烦，如果新版本上线当天发现就更折腾，于是就开了nightly build。&lt;/p&gt;
&lt;p&gt;既然开了nightly build，跟手动启动的build你会去关注结果不一样，自动启动的build不一定会记得，如果没有留意到build fail就没有意义了。所以顺便就配置结果邮件了。以下是踩坑记录。JCE部分建议大家留意一下，不知道的话，做security相关开发一不小心就在这上面浪费时间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://jaycechant.info/tags/Jenkins/"/>
    
      <category term="trouble" scheme="http://jaycechant.info/tags/trouble/"/>
    
      <category term="JavaMail" scheme="http://jaycechant.info/tags/JavaMail/"/>
    
      <category term="smtp" scheme="http://jaycechant.info/tags/smtp/"/>
    
      <category term="JCE" scheme="http://jaycechant.info/tags/JCE/"/>
    
  </entry>
  
  <entry>
    <title>supervisor 踩坑</title>
    <link href="http://jaycechant.info/2017/supervisor-traps/"/>
    <id>http://jaycechant.info/2017/supervisor-traps/</id>
    <published>2017-01-09T07:02:15.000Z</published>
    <updated>2017-01-09T15:39:21.891Z</updated>
    
    <content type="html"><![CDATA[<p>在对比过几个Git web端管理器之后，在内网部署了gogs。初次运行不讲究，直接</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ su git</div><div class="line">$ ./gogs web</div></pre></td></tr></table></figure>
<p>然而这不是长久之计，一直挂着一个shell不说（虽然我用byobu可以detach），重启还得手动再起来。</p>
<p>之前在 CentOS 7 部署，因为有 systemd ，非常方便，可是 Ubuntu 只有 init ，全部换成 systemd 管理又太折腾了。<br>然后我就留意到 gogs 的 scripts 目录有 supervisor 的配置，于是就尝试用 supervisor 管理。</p>
<p>纯踩坑记录，非详细教程。</p>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>apt 源有，不解释。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install superviosr</div></pre></td></tr></table></figure>
<p>安装完之后，supervisor 自动就启动了。<code>service --status-all</code> 可以看到。</p>
<p>据说如果通过Python安装，需要自己生成配置文件之后启动：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ echo_supervisord_conf &gt; /etc/supervisord.conf</div></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>gogs 的 scripts 目录下已经有了对应的配置，复制到 <code>/etc/supervisor/conf.d/</code>，并把名字改为 <code>gogs.conf</code>即可。</p>
<h1 id="尝试启动"><a href="#尝试启动" class="headerlink" title="尝试启动"></a>尝试启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo supervisorctl start gogs</div><div class="line">gogs: ERROR (no such process)</div></pre></td></tr></table></figure>
<p>原因是，supervisor 找不到 gogs 的配置。刚不是已经添加了配置了吗？生效之前，还要（每次修改配置之后都要）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo supervisorctl reload</div><div class="line">Restarted supervisord</div></pre></td></tr></table></figure>
<p>再来一次</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo supervisorctl start gogs</div><div class="line">unix:///var/run/supervisor.sock no such file</div></pre></td></tr></table></figure>
<p>没有socket文件，我们帮它创建一个</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo touch /var/run/supervisor.sock</div><div class="line">$ sudo chmod 777 /var/run/supervisor.sock</div><div class="line">$ sudo service supervisor restart</div><div class="line">Restarting supervisor: Error: The directory named as part of the path /var/<span class="built_in">log</span>/gogs/stdout.log does not exist.</div></pre></td></tr></table></figure>
<p>这个文件夹不存在，帮它建一个：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo mkdir -p /var/<span class="built_in">log</span>/gogs/</div><div class="line">$ sudo service supervisor restart</div><div class="line">$ sudo supervisorctl start gogs</div><div class="line">gogs: ERROR (no such file)</div></pre></td></tr></table></figure>
<p>查看 <code>/etc/supervisor/conf.d/gogs.conf</code> ，原来配置模板里，gogs的目录路径是随便填的，根据当前实际的路径改过来（记得reload），就好了。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>gogs 在supervisor 的管理下跑起来了，而且下次重启也会自动启动。</p>
<p>我重新看了一次 gogs 的 scripts 目录，忽然发现，它其实是带了 init 配置的……</p>
<p>我折腾这干嘛…… 谁叫我眼瞎[捂脸]</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在对比过几个Git web端管理器之后，在内网部署了gogs。初次运行不讲究，直接&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ su git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ./gogs web&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而这不是长久之计，一直挂着一个shell不说（虽然我用byobu可以detach），重启还得手动再起来。&lt;/p&gt;
&lt;p&gt;之前在 CentOS 7 部署，因为有 systemd ，非常方便，可是 Ubuntu 只有 init ，全部换成 systemd 管理又太折腾了。&lt;br&gt;然后我就留意到 gogs 的 scripts 目录有 supervisor 的配置，于是就尝试用 supervisor 管理。&lt;/p&gt;
&lt;p&gt;纯踩坑记录，非详细教程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="trouble" scheme="http://jaycechant.info/tags/trouble/"/>
    
      <category term="Linux" scheme="http://jaycechant.info/tags/Linux/"/>
    
      <category term="supervisor" scheme="http://jaycechant.info/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>为什么你应该用 Markdown 写文档？</title>
    <link href="http://jaycechant.info/2017/why-you-should-document-with-Markdown/"/>
    <id>http://jaycechant.info/2017/why-you-should-document-with-Markdown/</id>
    <published>2017-01-04T04:13:27.000Z</published>
    <updated>2017-09-11T15:26:15.633Z</updated>
    
    <content type="html"><![CDATA[<p>不记得第几次安利 Markdown 了。</p>
<p>曾发过一篇<a href="../../2012/blog-with-markdown/">《用Markdown写日志》</a>。</p>
<p>还是决定重写一篇：</p>
<ol>
<li>那篇重点在 HowTo ，理由一塌糊涂；这次不讨论语法，只谈为什么。</li>
<li>那篇重点讨论写日志（博客）；这次想讨论 Markdown 串起各种文档的可能性。</li>
<li>四年过去，环境和工具有了变化，像 Typora 、nodePPT 和 Marp 的出现，让 Markdown 有了更多可能，更加易用。 <strong>Typora 让写字有了仪式感和幸福感。</strong> </li>
</ol>
<a id="more"></a>
<h2 id="一、为什么写文档"><a href="#一、为什么写文档" class="headerlink" title="一、为什么写文档"></a>一、为什么写文档</h2><h3 id="1-1-从一个问题开始"><a href="#1-1-从一个问题开始" class="headerlink" title="1.1 从一个问题开始"></a>1.1 从一个问题开始</h3><blockquote>
<p><strong>成熟企业</strong> 跟 <strong>初创企业</strong> ，差距在哪？</p>
</blockquote>
<p>设备？钱？人？…</p>
<p>或者说一个领域 <strong>专家</strong> 跟 <strong>新手</strong> ，差距在哪？</p>
<p>经验？人脉？</p>
<p><br></p>
<p>『经验』难以量化，让我们换一个词：</p>
<blockquote>
<p>知识资产（Knowledge assets）</p>
<p>是指企业拥有或控制的、不具有独立实物形态、对生产和服务长期发挥作用并能带来经济效益的知识。</p>
</blockquote>
<p>知识资产 又叫 智力资产。这是 MBA智库 的狭义定义，其实个人、社会，都拥有知识资产。</p>
<h3 id="1-2-知识资产"><a href="#1-2-知识资产" class="headerlink" title="1.2 知识资产"></a>1.2 知识资产</h3><ul>
<li>人力资产（HR）</li>
<li>市场资产</li>
<li>知识产权资产（IP）</li>
<li>基础结构资产<ul>
<li>管理哲学 、 企业文化</li>
<li>IT系统 、 财务结构</li>
<li>…</li>
</ul>
</li>
</ul>
<p>人力资产就是人才，市场资产主要以品牌美誉度 和 企业关系 的方式存在。剩下的知识资产 都以某种形式的资料——主要是文件、文档的方式——存在、传播 和 传承。</p>
<p>PMP（Project Management Professional）讲 『组织过程资产』，就是 项目组织在实践中形成自己独特的过程资产，构成组织核心竞争力。</p>
<p><strong>好好写文档，其实是在积累『知识资产』。</strong></p>
<h2 id="二、跟文档打交道"><a href="#二、跟文档打交道" class="headerlink" title="二、跟文档打交道"></a>二、跟文档打交道</h2><h3 id="2-1-『资产』管理"><a href="#2-1-『资产』管理" class="headerlink" title="2.1 『资产』管理"></a>2.1 『资产』管理</h3><p>既然是资产，就要把它管理起来。</p>
<blockquote>
<p>知识管理 =&gt; 信息管理 =&gt; 文档管理</p>
</blockquote>
<p>三个词范围交叉，又不一样。前面范围大，越往后越具体，作为前面的开展手段。前面范围太大，我们聊聊文档的管理（其实范围也很大）。源码作为一种非常特殊的文档，自己形成了一套管理的方法（譬如 Github flow）；下面主要讨论非代码文档。当然你会发现，很多理论和工具正是来自源码管理。</p>
<p>『管理』过程中，我们可能面对以下一些操作：</p>
<p><img src="/images/document-management.png" alt="">  </p>
<ul>
<li>『归档』 和 『检索』 需要文件系统支持，如 Win-7 以后引入库的概念</li>
<li>审批需要 OA 系统的导入</li>
<li>销毁需要安全工具</li>
</ul>
<p>等等。涉及的工具超出了文档的范围，有机会再具体讨论。</p>
<p>这次集中说加粗部分。</p>
<h3 id="2-2-一些烦恼"><a href="#2-2-一些烦恼" class="headerlink" title="2.2 一些烦恼"></a>2.2 一些烦恼</h3><h4 id="记录：不完整、不准确"><a href="#记录：不完整、不准确" class="headerlink" title="记录：不完整、不准确"></a>记录：不完整、不准确</h4><p>事件、经过、数据、观点……都必须通过某种记录，变成素材。可以说，记录是获取文档素材的主要途径——如果再考虑到引用而来的素材，其实也来自别人的记录，那么就是唯一的途径。然而除了闭路电视全天候自动化的记录，多数的记录都面临不完整、不准确的问题。</p>
<p><strong>事后的追述，既费力，也不准确。而费力不讨好又会进一步降低记录的意愿。</strong> 随时随地记录，有利于保持内容的 完整 和 有效，也减少事后整理的负担。</p>
<p>这需要工具足够便利，跨平台（包括移动端），快速加载打开，没有使用负担。</p>
<p>事实上，很多人嫌记录麻烦，写文档变成了很痛苦的例行公事。只有在面临考核时，事后回忆 甚至编造一些记录应付了事。我自己就试过月度总结不写，到检查时一口气补几个月；有见过有人没有写 commit message，事后补上。</p>
<h4 id="编辑：缺乏好用的工具；思路总被打断"><a href="#编辑：缺乏好用的工具；思路总被打断" class="headerlink" title="编辑：缺乏好用的工具；思路总被打断"></a>编辑：缺乏好用的工具；思路总被打断</h4><p>好的编辑器很重要。除了编辑效率的差别，还有很重要的一点，就是内容和格式同时编辑，会引起思路的打断。</p>
<h4 id="发布：不同场景、不同用途需要不同的格式，明明差不多的内容，却整天要返工"><a href="#发布：不同场景、不同用途需要不同的格式，明明差不多的内容，却整天要返工" class="headerlink" title="发布：不同场景、不同用途需要不同的格式，明明差不多的内容，却整天要返工"></a>发布：不同场景、不同用途需要不同的格式，明明差不多的内容，却整天要返工</h4><h4 id="演示：做-PPT-KeyNote-吃力不讨好"><a href="#演示：做-PPT-KeyNote-吃力不讨好" class="headerlink" title="演示：做 PPT / KeyNote 吃力不讨好"></a>演示：做 PPT / KeyNote 吃力不讨好</h4><h4 id="版本跟踪"><a href="#版本跟踪" class="headerlink" title="版本跟踪"></a>版本跟踪</h4><ul>
<li>非程序员：『版本跟踪』是什么？</li>
<li>程序员：文档还要做版本跟踪？/ 我们已经做了。</li>
</ul>
<p>演示上面，一个是已有的文档不能简单地转换成演示文稿；另一个是，容易在一些花俏的细节上（例如动画）花过多精力，但最终的效果也不好</p>
<p>版本管理 程序员一般是知道的。目前我们多数用SVN，后面有机会跟大家分享一下Git的使用。我们现在的产品文档是已经用SVN管理起来，但严格来说，没有得到很好的管理，因为你没办法像代码一样diff两个版本。因为多数文档是二进制文件，你必须两个版本都获取下来，分别打开用肉眼判断，这是很低效而且容易犯错的。</p>
<h3 id="2-3-贵在坚持"><a href="#2-3-贵在坚持" class="headerlink" title="2.3 贵在坚持"></a>2.3 贵在坚持</h3><p>说完高大上的概念，说说个人体会。</p>
<p>我高中写代码，曾经问过为什么要写注释和文档的蠢话。那是因为小时候写的东西都太简单了。<br>而工作这几年，我发现无论当时多么刻骨铭心的坑，通过多个宵，你最终都会忘记，只有写下来的才是你的、你的团队的。<br>我觉得最可惜的事情，就是因为三星的安保政策加上我的懒，有很多东西我没有记下来。所以一定要有方便的工具，让你保持随时记录的习惯。</p>
<h2 id="三、为什么是Markdown"><a href="#三、为什么是Markdown" class="headerlink" title="三、为什么是Markdown"></a>三、为什么是Markdown</h2><h3 id="2-1-纯文本的威力"><a href="#2-1-纯文本的威力" class="headerlink" title="2.1 纯文本的威力"></a>2.1 纯文本的威力</h3><blockquote>
<p>Markdown 是一种纯文本标记语言</p>
</blockquote>
<p><em>*注：本章节的标题及部分内容引用自 《The Pragmatic Programmer》——Andrew Hunt &amp; David Thomas</em></p>
<h4 id="什么是纯文本"><a href="#什么是纯文本" class="headerlink" title="什么是纯文本"></a>什么是纯文本</h4><ul>
<li><p>plain text (.txt)</p>
</li>
<li><p>Initialization file (.ini), Properties, YAML, JavaScript Object Notation (.json)</p>
</li>
<li><p>eXtensive Markup Language (.xml), HyperText Markup Language (.html)</p>
</li>
<li><p>各种wiki (.wiki)</p>
</li>
<li><p>Markdown (.md), reStructuredText (.rst)</p>
</li>
<li><p>…</p>
</li>
</ul>
<p><br></p>
<blockquote>
<p><strong>纯文本</strong> 由可打印字符组成，人可以直接阅读和理解其形式。</p>
</blockquote>
<p>举例说，尽管以下内容是可打印字符，却没有意义：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">Field19</span>=<span class="number">467</span>abe</div></pre></td></tr></table></figure>
<p>更好的选择，是让其变得能让人理解：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">DrawingType</span>=UMLActivityDrawing</div></pre></td></tr></table></figure>
<p>关键在于定义后半句：<br>不仅可以直接不借助任何特殊工具查看。而且是 <strong>人（脱离特定上下文也）比较容易理解</strong> 。</p>
<p>项目进行当中，你对项目细节如数家珍，觉得 <code>Field19</code> 非常清晰，<code>467abe</code> 意义也显而易见。但 <strong>上线一年后</strong> 再回来维护呢？一个 <strong>新同事</strong> 接手维护呢？ </p>
<p>（一个题外话：基于类似的理由，代码中应该尽可能避免使用『魔法值』（Magic Number）。）</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>纯文本两个主要缺点：</p>
<ol>
<li>跟压缩的二进制格式相比，纯文本占据 <strong>更多空间</strong></li>
<li>解析处理纯文本，可能需要 <strong>更多运算</strong></li>
</ol>
<p>某些场景下，这两个缺点无法容忍：例如超大量需要压缩存储的数据，或者资源非常紧张的单片机。</p>
<p>然而随着 <strong>存储空间 和 运算能力</strong> 变得越来越廉价，这点缺点跟以下优点比起来越来越微不足道。</p>
<h4 id="文本的威力"><a href="#文本的威力" class="headerlink" title="文本的威力"></a>文本的威力</h4><h5 id="保证不过时"><a href="#保证不过时" class="headerlink" title="保证不过时"></a>保证不过时</h5><blockquote>
<p>人能够阅读的数据形式，以及自述的数据，将比所有其他数据形式和创建它们的应用都活得更长久。</p>
</blockquote>
<p>只要数据还存在，你就有可能使用它。哪怕是创建它的程序不在的时候：有可能是这个程序过时已久；也有可能这个程序刚好在这台电脑，或者你的手机上没有。</p>
<p>记事本打开 .doc （<em>原本是直接贴了两行乱码在这里，但是因为会引起博客的feed解析错误，改为截图</em>）</p>
<p><img src="/images/mass-code-of-doc.png" alt=""></p>
<p>记事本打开 Markdown</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="section">##### 保证不过时</span></div><div class="line"></div><div class="line"><span class="quote">&gt; 人能够阅读的数据形式，以及自述的数据，将比所有其他的数据形式和创建它们的应用都活得更长久。</span></div></pre></td></tr></table></figure>
<ul>
<li>例子1 是我用记事本打开word之后任意选了两行。一个二进制文件，没有找到对应格式的编辑器，勉强打开都是这样的乱码。</li>
<li>例子2 就是前面引用那段话。完全纯文本（基于 Markdown）。电脑或者手机有安装解析软件，你可以看到前面渲染后的效果（分别是 二号标题，段落引用）。即使不巧没有对应工具，同时完全不懂 Markdown 标签，<strong>也丝毫不影响理解</strong> 。</li>
</ul>
<h5 id="杠杆作用"><a href="#杠杆作用" class="headerlink" title="杠杆作用"></a>杠杆作用</h5><blockquote>
<p>提供锋利的『小工具』，各自专注做好一件事。</p>
</blockquote>
<p>这是 Unix 设计哲学。它基于一个公共底层格式：面向行的纯文本文件 实现。每个工具专注做好一件事，然后通过 管道(pipe) 和 纯文本文件 互相打通，变成无所不能的shell脚本。</p>
<p>非技术背景的朋友可能还没反应过来，我换种方式复述一遍：</p>
<p>Unix-like 系统（包括 Unix/Linux/Mac）上的工具，就像一根根看不到内部的管道，每个专注提供一种功能：例如入口放面粉，出口就出来面包（面包机）。</p>
<p>如果你要进小麦出面包，没有；种子变面包，更没有。只有种子到小麦（姑且叫种植机），和小麦到面粉（磨面机）… 等等，都只专注一步。如果你需要 <strong>种子 =&gt; 三明治</strong> ，当然也没有；但你不需要从头发明这个机器，只需要 <strong>将现有的机器，一个接一个连接在一起</strong> 。 之所以这样可行，是因为这些工具都默认接受 『一行行的纯文本』作为输入，同时输出一行行的纯文本；大家按照这个惯例行事，不必额外考虑跟其他工具的兼容——哪怕这些工具的作者互不认识，甚至写出来的时间相差几十年。</p>
<h5 id="还有"><a href="#还有" class="headerlink" title="还有"></a>还有</h5><ol>
<li><p>假如系统崩溃，部分功能受限，如图形界面。（其实不用等系统崩溃，通过shell远程连接就没有GUI）这个时候，纯文本的优点就出来了。</p>
<blockquote>
<p>当系统崩溃时，你可能需要最小环境恢复。</p>
</blockquote>
</li>
<li><p>在不同的系统、不同的环境之间，基于网络的异构通信、自行协商的数据交换，如果需要确保各方能用一个公共标准通信，纯文本就是这个标准（所以我们看到XML，json的流行）。</p>
</li>
<li><p>基于纯文本的版本控制，你可以追踪（diff）每个版本的修改，这才是真正的版本管理。</p>
</li>
</ol>
<p>当一个标准可以串联起一系列工具，那么它就成为了一个支点，允许你用比较小的力气，借用现有的成果，完成复杂的工作。</p>
<p><strong>纯文本就是不同时代、不同技术的最大公约数；就是标准。</strong></p>
<h3 id="2-2-内容-与-样式-的分离"><a href="#2-2-内容-与-样式-的分离" class="headerlink" title="2.2 内容 与 样式 的分离"></a>2.2 内容 与 样式 的分离</h3><h4 id="两顶帽子"><a href="#两顶帽子" class="headerlink" title="两顶帽子"></a>两顶帽子</h4><blockquote>
<p>有两顶帽子，每次只戴其中一顶：</p>
<p>在修改内容时，不要理会显示的样式；</p>
<p>当修改样式时，不要改动内容。</p>
</blockquote>
<p>两顶帽子的原则来自面向对象编程。有接口的两顶帽子、重构的两顶帽子，等等。</p>
<p>强调的是每次关注改变的其中一个方面，隔离互相影响的变化。同时改变多个方面容易犯错，或者打乱思路。</p>
<p>受Word等软件的影响，大家似乎已经把 内容编排 和 样式 混在一起了<br>我举个例子：<br>这一段的标题是一个二级标题，上面这段话，是一段引用；这是内容编排。</p>
<p>具体二级标题、引用文字 应该怎么显示，这是样式。</p>
<p>这是不同的东西：内容在编辑完之后，就相对固定下来了；而样式会因应不同的场景，不同的用途，不同的读者，有不同的需求。</p>
<p>像我现在做演示文稿是一种需要，同样的内容发布到博客是一种需要。演示需要的字号肯定大很多。</p>
<p>甚至我换一个演示环境，投影仪的对比度比显示器低，我又要改动对比度。</p>
<p>他们变化的频率是不一样的，应该隔离开来。样式往往到最后根据场景来定。</p>
<h4 id="Write-Once-Export-Everywhere"><a href="#Write-Once-Export-Everywhere" class="headerlink" title="Write Once, Export Everywhere"></a>Write Once, Export Everywhere</h4><p>Java 当年宣传，号称Write Once, Run everywhere。今天借用一下。</p>
<p>Markdown不仅作为纯文本，在最坏的情况下都能被记事本打开。而且由于它有大量的工具支持，可以转换为各种场景下的文档。</p>
<ul>
<li><a href="http://pandoc.org/" target="_blank" rel="external">pandoc</a> (<a href="https://typora.io/" target="_blank" rel="external">Typora</a> , <a href="">Smark</a>)： HTML, Word, PDF, LaTeX, Epub…</li>
<li><a href="https://yhatt.github.io/marp/" target="_blank" rel="external">Marp</a> ： PDF 演示文稿 </li>
<li><a href="https://github.com/ksky521/nodePPT" target="_blank" rel="external">nodeppt</a> ： HTML5 演示文稿 （特效比Marp炫）</li>
<li><a href="https://hexo.io/" target="_blank" rel="external">hexo</a> ： 静态博客</li>
<li><a href="https://github.com/GitbookIO/gitbook" target="_blank" rel="external">gitbook</a> ：生成电子书和文档的命令行工具，同时官方提供一个<a href="https://www.gitbook.com/editor" target="_blank" rel="external">编辑器</a></li>
</ul>
<p>pandoc是一个命令行工具，你当然可以敲命令使用；不过方便起见，我会推荐使用一个前端工具，首推Typora。</p>
<h4 id="代码高亮-和-数学环境"><a href="#代码高亮-和-数学环境" class="headerlink" title="代码高亮 和 数学环境"></a>代码高亮 和 数学环境</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello world!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<p>$$x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}$$</p>
<p>这两点，一般人可能没什么需求，但是数学工作者和程序员是很需要的。</p>
<p>以前每次用PPT，往上面贴代码的体验非常差。首先默认的字体一般不是编程用的等宽字体，要手动改。还有tab和空格的对齐，就足够折腾了。还要高亮就只能手动选中改颜色了。</p>
<p>但这里，只要把代码贴上去，高亮是自动完成的。</p>
<p>因为以前讲算法，偶尔有数学推导。Office倒是有公式编辑器，但是很难用，而且修改也不容易。</p>
<p>而这里，只要用Mathjax写公式就可以了。</p>
<p>Mathjax语法相当地直观，这里不详细展开，有需要的话，可以看我之前写的一篇文章：</p>
<p><a href="http://jaycechant.info/2016/intro-to-mathjax/">Introduction to MathJax &amp; some samples</a></p>
<h3 id="2-3-为什么是Markdown？"><a href="#2-3-为什么是Markdown？" class="headerlink" title="2.3 为什么是Markdown？"></a>2.3 为什么是Markdown？</h3><p>再问一次这个问题。</p>
<blockquote>
<p>纯文本是好的，内容与样式分离是好的。但那么多纯文本的标记语言可以做到，为什么是 Markdown？</p>
</blockquote>
<p>是的，不一定是Markdown。</p>
<p>除了 Plaintext 太弱、HTML 太繁琐 不值得选择，reStructuredText 和 asciiDoc 都是 Markdown 强有力的对手。只能说目前 Markdown 工具支持更广泛，而且（对我而言）现阶段够用又最简单。未来几年，情况可能会发生变化。</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>Markdown</th>
<th>rst</th>
<th>HTML</th>
</tr>
</thead>
<tbody>
<tr>
<td>标签</td>
<td>约十几种</td>
<td>约十几种</td>
<td>HTML4.1 共89个标签</td>
</tr>
<tr>
<td>标签读写</td>
<td>不解析也能理解读写</td>
<td>大部分不解析也能理解</td>
<td>需要层次嵌套和严谨闭合，复杂冗余</td>
</tr>
<tr>
<td>表达能力</td>
<td>仅覆盖常用格式，较弱；但可以直接写HTML补充，并有较多第三方增强（Mathjx，代码高亮）</td>
<td>支持格式比标准Markdown稍多</td>
<td>最强，整个互联网基本都是构建在HTML之上，前两者多数情况也是转换成HTML</td>
</tr>
<tr>
<td>工具支持</td>
<td>Github等代码托管，各大云笔记</td>
<td>不明</td>
<td>多数工具以HTML实现，但不提供直接编辑</td>
</tr>
<tr>
<td>格式支持</td>
<td>通过pandoc，能直接或间接导出几乎所有文档格式，且有较多编辑器前端可选</td>
<td>通过pandoc，能直接或间接导出几乎所有文档格式</td>
<td>能转成word、PDF等格式，但不能替换样式</td>
</tr>
<tr>
<td>总结</td>
<td>简单，但可拓展性强，支持广泛，工具多且开发活跃。</td>
<td>比Markdown稍复杂和强大，但热度不如Markdown，工具少很多。</td>
<td>严谨精确，适合浏览器解析，不方便一般人读写。</td>
</tr>
</tbody>
</table>
<h3 id="一些栗子"><a href="#一些栗子" class="headerlink" title="一些栗子"></a>一些栗子</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">### 一些栗子 &lt;!-- 二级标题 --&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>糖炒栗子</li>
<li>水煮栗子</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>糖炒栗子</div><div class="line"><span class="bullet">* </span>水煮栗子</div></pre></td></tr></table></figure>
<p><a href="http://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external">维基词条</a></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">维基词条</span>](<span class="link">http://zh.wikipedia.org/wiki/Markdown</span>)</div></pre></td></tr></table></figure>
<h3 id="更多参考"><a href="#更多参考" class="headerlink" title="更多参考"></a>更多参考</h3><p>这次主要是介绍概念，教程不是重点，更多用法技巧：</p>
<ul>
<li><a href="http://jaycechant.info/2012/blog-with-markdown/">用Markdown写日志</a> </li>
<li><a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">Markdown语法官方版</a></li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><s>这个演示文稿（Presentation）完全由 Markdown 写成，使用<a href="https://yhatt.github.io/marp/" target="_blank" rel="external">Marp</a>输出。</s></p>
<p>同时稍作调整后，还会发表博客、以及其他格式的文档。</p>
<p>如果你细心对比 博客文章 和 演示文稿，你会发现 演示文稿 上少了很多内容，这些内容是讲稿。讲稿以注释形式直接写在演示文稿里，讲的时候是对着注释讲的。</p>
<p>作为文章发表时，不过把 注释符 和 分页符 删掉而已，就是一个查找替换。希望未来有工具自动识别输出场景，把这一步也省略；如果迟迟不出现，我尽量抽空自己实现。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不记得第几次安利 Markdown 了。&lt;/p&gt;
&lt;p&gt;曾发过一篇&lt;a href=&quot;../../2012/blog-with-markdown/&quot;&gt;《用Markdown写日志》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;还是决定重写一篇：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;那篇重点在 HowTo ，理由一塌糊涂；这次不讨论语法，只谈为什么。&lt;/li&gt;
&lt;li&gt;那篇重点讨论写日志（博客）；这次想讨论 Markdown 串起各种文档的可能性。&lt;/li&gt;
&lt;li&gt;四年过去，环境和工具有了变化，像 Typora 、nodePPT 和 Marp 的出现，让 Markdown 有了更多可能，更加易用。 &lt;strong&gt;Typora 让写字有了仪式感和幸福感。&lt;/strong&gt; &lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="http://jaycechant.info/tags/Markdown/"/>
    
      <category term="document" scheme="http://jaycechant.info/tags/document/"/>
    
      <category term="presentation" scheme="http://jaycechant.info/tags/presentation/"/>
    
      <category term="why" scheme="http://jaycechant.info/tags/why/"/>
    
  </entry>
  
  <entry>
    <title>镜像集合</title>
    <link href="http://jaycechant.info/2016/mirrors-collection/"/>
    <id>http://jaycechant.info/2016/mirrors-collection/</id>
    <published>2016-12-31T02:29:12.000Z</published>
    <updated>2017-01-25T04:21:21.999Z</updated>
    
    <content type="html"><![CDATA[<p>在中国做开发者，殊为不易。技术创新多发源欧美，尤其开源的工具；国内巨头现在渐渐有些贡献，不过很多东西还是要取自国外。</p>
<p>好不容易跨过语言关，结果发现还有一道高墙。要么是各种原因被GFW连坐（例如各种Google的服务），要么纯粹因为太远不稳定。以前还能说先用工具慢慢下载到本地安装；现在网络越来越快，所以都流行在线安装，光连得上还不行，太慢也会timeout。国外开发者秒下无感的事情，我们这里可以折腾几天。</p>
<p>解决办法就是镜像了。所以现在配置开发环境，第一步是安装工具，第二步马上就是配置镜像，然后才能好好地下载依赖。所以自己整理一个常用的镜像集合，方便每次配置环境时翻查。</p>
<a id="more"></a>
<p><em>只列我在用或者用过的，没有也不必要把全部列上，旧的不行换新的再更新</em></p>
<h1 id="Ubuntu-软件源"><a href="#Ubuntu-软件源" class="headerlink" title="Ubuntu 软件源"></a>Ubuntu 软件源</h1><p>目前使用163的源：<a href="http://mirrors.163.com/.help/ubuntu.html" target="_blank" rel="external">http://mirrors.163.com/.help/ubuntu.html</a></p>
<p>里面已经有比较详细的说明，挑选对应的发行版本下载就好。以14.04 (trusty) 为例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">~$ <span class="built_in">cd</span> /etc/apt/</div><div class="line">/etc/apt$ wget http://mirrors.163.com/.help/sources.list.trusty</div><div class="line">/etc/apt$ mv sources.list sources.list.bak</div><div class="line">/etc/apt$ mv sources.list.trusty sources.list</div><div class="line">/ect/apt$ apt-get update</div></pre></td></tr></table></figure>
<p>使用阿里云服务器的，可以考虑用阿里云的镜像：<a href="http://mirrors.aliyun.com/help/ubuntu" target="_blank" rel="external">http://mirrors.aliyun.com/help/ubuntu</a></p>
<p>将镜像的地址从 <a href="http://mirrors.aliyun.com" target="_blank" rel="external">http://mirrors.aliyun.com</a> 改为 <a href="http://mirrors.aliyuncs.com" target="_blank" rel="external">http://mirrors.aliyuncs.com</a> 可以走内网流量。</p>
<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><p>推荐淘宝NPM镜像：<a href="https://npm.taobao.org/" target="_blank" rel="external">https://npm.taobao.org/</a></p>
<p>因为除了镜像，他们还提供了定制的cnpm代替npm：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<p>除了敲命令时前面多个c，用法上跟npm没有任何差别。详情可以看官方的说明。</p>
<h1 id="Maven-repository"><a href="#Maven-repository" class="headerlink" title="Maven repository"></a>Maven repository</h1><p>Maven仓库推荐阿里云的中央库：<a href="http://maven.aliyun.com/nexus/" target="_blank" rel="external">http://maven.aliyun.com/nexus/</a></p>
<p>一般的做法是修改Maven的settings.xml：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </div><div class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></div></pre></td></tr></table></figure>
<p>settings.xml 有两个，分别在：</p>
<ul>
<li>$M2_HOME/conf/settings.xml ：全局设置，在maven的安装目录。Windows为 %M2_HOME%，一般要手动设置。</li>
<li>~/.m2/settings.xml ：用户设置，需要自己添加。Linux就是用户目录，Windows一般在 <code>C:\Users\YourName</code>。</li>
</ul>
<p>两个文件如果同时存在，会融合成一个文件；同时存在的设置项，以用户设置为准。</p>
<hr>
<h2 id="在pom设置repository"><a href="#在pom设置repository" class="headerlink" title="在pom设置repository"></a>在pom设置repository</h2><p>但我基本不单独执行<code>mvn</code>，都是在Eclipse里引用，不知道为什么明明在Eclipse设置了settings.xml的位置，但还是不起作用（依然访问官方库）；另外，多人协作的项目，每个人都设置一次镜像也是一个麻烦。</p>
<p>这时最好的办法，就是在项目的pom.xml 设置一下repository：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun-repos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Aliyun Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun-repos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Aliyun Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></div></pre></td></tr></table></figure>
<p>优先级上，项目的设置会覆盖用户的设置。pom是项目文件的一部分，会一起被提交和拉取，项目导入的时候直接就是到镜像去取依赖了。</p>
<h1 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h1><p>网上都在推荐豆瓣的源：<a href="http://www.jianshu.com/p/785bb1f4700d" target="_blank" rel="external">http://www.jianshu.com/p/785bb1f4700d</a></p>
<p>临时使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install ModuleName -i https://pypi.douban.com/simple</div></pre></td></tr></table></figure>
<ul>
<li>使用https安全是没有问题的。但如果碰上https连不上，就要加<code>--trusted-host</code>。</li>
<li>虽然修改了软件源，但<code>pip search</code>命令还是不能用，因为搜索软件使用的协议与安装软件不同。<code>pip search</code>基于xmlrpclib实现，<code>pip install</code>基于urllib2实现。同样地，对<code>pip search</code>设置代理，也是不起作用的。</li>
</ul>
<p>想长久生效，就要修改配置文件：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="section">[global]</span></div><div class="line"><span class="attr">index-url</span> = https://pypi.douban.com/simple</div></pre></td></tr></table></figure>
<p>配置文件的位置，Linux应该是在用户目录下的 <code>~/.pip/pip.conf</code>，如果不存在可以自己创建，pip会默认从这个文件读取配置。Windows的配置可以参考 <a href="http://blog.csdn.net/styshoo/article/details/52865373" target="_blank" rel="external">http://blog.csdn.net/styshoo/article/details/52865373</a> ，跟Linux类似，不过有好几个地方，可以echo系统参数，看哪个存在。</p>
<h1 id="Android-SDK"><a href="#Android-SDK" class="headerlink" title="Android SDK"></a>Android SDK</h1><p><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">AndroidDevTools</a> 上提供的镜像，我都试过，除了Bugly其他都不稳定或者根本连不上（所在地是广州）。因为Bugly要登录，本不想那么麻烦也没有办法了。不过只要用QQ号登录就好，这个估计谁都有。</p>
<p>详细的用法在上面有介绍：<a href="https://dsx.bugly.qq.com/repository/1" target="_blank" rel="external">https://dsx.bugly.qq.com/repository/1</a></p>
<p>简单说就是把</p>
<pre><code>域名 : id.repository.bugly.qq.com
端口 : 80
</code></pre><p>填到SDK Manager 的proxy设置里。登录之后每个人有自己的id。</p>
<h1 id="Jenkins-plugins"><a href="#Jenkins-plugins" class="headerlink" title="Jenkins plugins"></a>Jenkins plugins</h1><p><a href="http://mirrors.jenkins-ci.org/status.html" target="_blank" rel="external">镜像列表</a></p>
<p>我人肉ping测试了一下速度，感觉 <a href="http://mirror.esuni.jp" target="_blank" rel="external">http://mirror.esuni.jp</a> 速度还可以，所以就用了这个。</p>
<p>把</p>
<p><a href="http://mirror.esuni.jp/jenkins/updates/update-center.json" target="_blank" rel="external">http://mirror.esuni.jp/jenkins/updates/update-center.json</a></p>
<p>填到 Jenkins &gt; 插件管理 &gt; 高级 &gt; 升级站点 即可。</p>
<p>偶尔还是有安装失败，这时只好手动下载插件之后上传了。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在中国做开发者，殊为不易。技术创新多发源欧美，尤其开源的工具；国内巨头现在渐渐有些贡献，不过很多东西还是要取自国外。&lt;/p&gt;
&lt;p&gt;好不容易跨过语言关，结果发现还有一道高墙。要么是各种原因被GFW连坐（例如各种Google的服务），要么纯粹因为太远不稳定。以前还能说先用工具慢慢下载到本地安装；现在网络越来越快，所以都流行在线安装，光连得上还不行，太慢也会timeout。国外开发者秒下无感的事情，我们这里可以折腾几天。&lt;/p&gt;
&lt;p&gt;解决办法就是镜像了。所以现在配置开发环境，第一步是安装工具，第二步马上就是配置镜像，然后才能好好地下载依赖。所以自己整理一个常用的镜像集合，方便每次配置环境时翻查。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://jaycechant.info/tags/Jenkins/"/>
    
      <category term="Android" scheme="http://jaycechant.info/tags/Android/"/>
    
      <category term="pip" scheme="http://jaycechant.info/tags/pip/"/>
    
      <category term="Ubuntu" scheme="http://jaycechant.info/tags/Ubuntu/"/>
    
      <category term="mirror" scheme="http://jaycechant.info/tags/mirror/"/>
    
      <category term="aliyun" scheme="http://jaycechant.info/tags/aliyun/"/>
    
      <category term="npm" scheme="http://jaycechant.info/tags/npm/"/>
    
      <category term="maven" scheme="http://jaycechant.info/tags/maven/"/>
    
      <category term="a list" scheme="http://jaycechant.info/tags/a-list/"/>
    
  </entry>
  
  <entry>
    <title>vsftp 503 和 500 错误</title>
    <link href="http://jaycechant.info/2016/vsftp-error-503-and-500/"/>
    <id>http://jaycechant.info/2016/vsftp-error-503-and-500/</id>
    <published>2016-12-29T02:53:19.000Z</published>
    <updated>2017-01-25T04:21:21.983Z</updated>
    
    <content type="html"><![CDATA[<p>想在远程服务器上装一些东西，在yum或者apt源里的自然很容易，但那以外的，shell + wget 总是有许多不便（有些下载需要登录，有些需要梯子……服务器上又希望尽量少不必要的东西），何况偶尔需要和本地交换一些东西，FTP是必要的。之前在 CentOS 7 上相当顺利，这次在Ubuntu 14.04上却不太顺利。</p>
<a id="more"></a>
<h1 id="503"><a href="#503" class="headerlink" title="503"></a>503</h1><p>安装，然后创建了一个用户叫vsftp，设置一个相对简单的密码，禁止匿名登录。</p>
<p>然后在本地用ftp客户端登录：</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">命令:	USER vsftp</div><div class="line">响应:	<span class="number">331</span> Please specify the password.</div><div class="line">命令:	PASS *****</div><div class="line">响应:	<span class="number">530</span> Login incorrect.</div></pre></td></tr></table></figure>
<p>照例放Google，结果搜到一堆解决方法，众说纷纭，不禁让我疑惑中间一部分是碰运气，根本不知道原因，因为我是在Ubuntu上有问题，结果找到这么一个讨论：<a href="http://askubuntu.com/questions/413677/vsftpd-530-login-incorrect" target="_blank" rel="external">http://askubuntu.com/questions/413677/vsftpd-530-login-incorrect</a></p>
<p>提问者的情况跟我完全一致，而最高票的答案（将pam_service_name 从 vsftp 改为 ftp）也多次出现在各个搜索结果里，看来是可以解决问题的。不过我留了个心眼，继续看底下的评论：</p>
<blockquote>
<p>You are disabling default access control via PAM, because default “ftp” has no rules. The default <code>pam_service_name=vsftp</code> uses the file <code>/etc/pam.d/vsftpd</code>. This file by default requires FTP users to have a shell listed in <code>/etc/shells</code> and requires them <strong>not</strong> to be listed in <code>/etc/ftpusers</code>.</p>
</blockquote>
<p>一看，果然如此，pam.d/ 下只有vsftp的配置，你改名当然绕过了，但是就失去保护了。</p>
<p>查看 <code>/et/ftpusers</code>，vsftp 并没有在里面。再查看 <code>/etc/passwd</code>，vsftp 没有指定shell。于是我就将它的shell指定为<code>/usr/sbin/nologin</code> （不允许真正登录shell操作），并且添加到 <code>/etc/shells</code>。再试，却又报了另一个错误。</p>
<h1 id="500"><a href="#500" class="headerlink" title="500"></a>500</h1><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">命令:	USER vsftp</div><div class="line">响应:	<span class="number">331</span> Please specify the password.</div><div class="line">命令:	PASS *****</div><div class="line">响应:	<span class="number">500</span> OOPS: cannot change directory:/home/vsftp</div></pre></td></tr></table></figure>
<p>又是先放Google，又是一堆众说纷纭。然后这个回答提醒了我：<a href="http://blog.arithm.com/2009/06/15/defeating-vsftp-error-500-oops-cannot-change-directorysomedirectory/" target="_blank" rel="external">http://blog.arithm.com/2009/06/15/defeating-vsftp-error-500-oops-cannot-change-directorysomedirectory/</a></p>
<p>简单说就是：你搞那么多幺蛾子之前，有先最基本的检查一下目录的权限吗？</p>
<p>一看，目录根本还没创建 T_T 。因为vsftp 不能执行shell，所以用sudo 给它创建了目录，在chown 给 vsftp。</p>
<p>这回FTP客户端真的可以登录了。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想在远程服务器上装一些东西，在yum或者apt源里的自然很容易，但那以外的，shell + wget 总是有许多不便（有些下载需要登录，有些需要梯子……服务器上又希望尽量少不必要的东西），何况偶尔需要和本地交换一些东西，FTP是必要的。之前在 CentOS 7 上相当顺利，这次在Ubuntu 14.04上却不太顺利。&lt;/p&gt;
    
    </summary>
    
    
      <category term="trouble" scheme="http://jaycechant.info/tags/trouble/"/>
    
      <category term="Ubuntu" scheme="http://jaycechant.info/tags/Ubuntu/"/>
    
      <category term="vsftp" scheme="http://jaycechant.info/tags/vsftp/"/>
    
  </entry>
  
  <entry>
    <title>升级 pip 时的一个坑</title>
    <link href="http://jaycechant.info/2016/trap-while-upgrading-pip/"/>
    <id>http://jaycechant.info/2016/trap-while-upgrading-pip/</id>
    <published>2016-12-29T02:50:03.000Z</published>
    <updated>2017-01-09T15:37:05.188Z</updated>
    
    <content type="html"><![CDATA[<p>升级 pip 过程中踩了个坑。其实之前也升级过不过很巧合绕过去了。这次踩到做个记录。</p>
<a id="more"></a>
<p>事情是这样的，我需要写一个爬虫，所以就安装了bs4（喔，漂亮的肥皂）。然后安装后pip提示我新版本出来了。作为一个『不更新不舒服斯基』，我顺手就 <code>pip install --upgrade pip</code> 了。其实它提示的命令是 <code>python -m pip install --upgrade pip</code> 的，但在Scripts加入了系统路径的情况下（比较新的版本，安装的时候自动就帮你添加了）， 直接pip 不是一样吗。然后就出现了下面这样的情况。</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">JayceChant</span>&gt;<span class="title">pip</span> <span class="title">install</span> <span class="title">beautifulsoup4</span></span></div><div class="line"><span class="title">Collecting</span> <span class="title">beautifulsoup4</span></div><div class="line">  <span class="title">Downloading</span> <span class="title">beautifulsoup4</span>-4.5.1-<span class="title">py3</span>-<span class="title">none</span>-<span class="title">any.whl</span> (83<span class="title">kB</span>)</div><div class="line">    100% |████████████████████████████████| 92<span class="title">kB</span> 93<span class="title">kB</span>/<span class="title">s</span></div><div class="line"><span class="title">Installing</span> <span class="title">collected</span> <span class="title">packages</span>: <span class="title">beautifulsoup4</span></div><div class="line"><span class="title">Successfully</span> <span class="title">installed</span> <span class="title">beautifulsoup4</span>-4.5.1</div><div class="line"><span class="title">You</span> <span class="title">are</span> <span class="title">using</span> <span class="title">pip</span> <span class="title">version</span> 8.1.1, <span class="title">however</span> <span class="title">version</span> 9.0.1 <span class="title">is</span> <span class="title">available</span>.</div><div class="line"><span class="title">You</span> <span class="title">should</span> <span class="title">consider</span> <span class="title">upgrading</span> <span class="title">via</span> <span class="title">the</span> '<span class="title">python</span> -<span class="title">m</span> <span class="title">pip</span> <span class="title">install</span> --<span class="title">upgrade</span> <span class="title">pip</span>' <span class="title">command</span>.</div><div class="line"></div><div class="line"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">JayceChant</span>&gt;<span class="title">pip</span> <span class="title">install</span> --<span class="title">upgrade</span> <span class="title">pip</span></div><div class="line"><span class="title">Collecting</span> <span class="title">pip</span></div><div class="line">  <span class="title">Downloading</span> <span class="title">pip</span>-9.0.1-<span class="title">py2.py3</span>-<span class="title">none</span>-<span class="title">any.whl</span> (1.3<span class="title">MB</span>)</div><div class="line">    100% |████████████████████████████████| 1.3<span class="title">MB</span> 6.4<span class="title">kB</span>/<span class="title">s</span></div><div class="line"><span class="title">Installing</span> <span class="title">collected</span> <span class="title">packages</span>: <span class="title">pip</span></div><div class="line">  <span class="title">Found</span> <span class="title">existing</span> <span class="title">installation</span>: <span class="title">pip</span> 8.1.1</div><div class="line">    <span class="title">Uninstalling</span> <span class="title">pip</span>-8.1.1:</div><div class="line"><span class="title">Exception</span>:</div><div class="line"><span class="title">Traceback</span> (<span class="title">most</span> <span class="title">recent</span> <span class="title">call</span> <span class="title">last</span>):</div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">shutil.py</span>", <span class="title">line</span> 538, <span class="title">in</span> <span class="title">move</span></div><div class="line">    <span class="title">os.rename</span>(<span class="title">src</span>, <span class="title">real_dst</span>)</div><div class="line"><span class="title">OSError</span>: [<span class="title">WinError</span> 17] 系统无法将文件移到不同的磁盘驱动器。: '<span class="title">d</span>:\\<span class="title">dev</span>\\<span class="title">python35</span>\\<span class="title">scripts</span>\\<span class="title">pip.exe</span>' -&gt; '<span class="title">C</span>:\\<span class="title">Users</span>\\<span class="title">JAYCEC</span>~1\\<span class="title">AppData</span>\\<span class="title">Local</span>\\<span class="title">Temp</span>\\<span class="title">pip</span>-<span class="title">wgmxmz1x</span>-<span class="title">u</span></div><div class="line"><span class="title">ninstall</span>\\<span class="title">dev</span>\\<span class="title">python35</span>\\<span class="title">scripts</span>\\<span class="title">pip.exe</span>'</div><div class="line"></div><div class="line"><span class="title">During</span> <span class="title">handling</span> <span class="title">of</span> <span class="title">the</span> <span class="title">above</span> <span class="title">exception</span>, <span class="title">another</span> <span class="title">exception</span> <span class="title">occurred</span>:</div><div class="line"></div><div class="line"><span class="title">Traceback</span> (<span class="title">most</span> <span class="title">recent</span> <span class="title">call</span> <span class="title">last</span>):</div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">pip</span>\<span class="title">basecommand.py</span>", <span class="title">line</span> 209, <span class="title">in</span> <span class="title">main</span></div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">pip</span>\<span class="title">commands</span>\<span class="title">install.py</span>", <span class="title">line</span> 317, <span class="title">in</span> <span class="title">run</span></div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">pip</span>\<span class="title">req</span>\<span class="title">req_set.py</span>", <span class="title">line</span> 726, <span class="title">in</span> <span class="title">install</span></div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">pip</span>\<span class="title">req</span>\<span class="title">req_install.py</span>", <span class="title">line</span> 746, <span class="title">in</span> <span class="title">uninstall</span></div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">pip</span>\<span class="title">req</span>\<span class="title">req_uninstall.py</span>", <span class="title">line</span> 115, <span class="title">in</span> <span class="title">remove</span></div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">pip</span>\<span class="title">utils</span>\<span class="title">__init__.py</span>", <span class="title">line</span> 267, <span class="title">in</span> <span class="title">renames</span></div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">shutil.py</span>", <span class="title">line</span> 553, <span class="title">in</span> <span class="title">move</span></div><div class="line">    <span class="title">os.unlink</span>(<span class="title">src</span>)</div><div class="line"><span class="title">PermissionError</span>: [<span class="title">WinError</span> 5] 拒绝访问。: '<span class="title">d</span>:\\<span class="title">dev</span>\\<span class="title">python35</span>\\<span class="title">scripts</span>\\<span class="title">pip.exe</span>'</div><div class="line"></div><div class="line"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">JayceChant</span>&gt;<span class="title">pip</span> <span class="title">install</span> --<span class="title">upgrade</span> <span class="title">pip</span></div><div class="line"><span class="title">Traceback</span> (<span class="title">most</span> <span class="title">recent</span> <span class="title">call</span> <span class="title">last</span>):</div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">runpy.py</span>", <span class="title">line</span> 184, <span class="title">in</span> <span class="title">_run_module_as_main</span></div><div class="line">    "<span class="title">__main__</span>", <span class="title">mod_spec</span>)</div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">runpy.py</span>", <span class="title">line</span> 85, <span class="title">in</span> <span class="title">_run_code</span></div><div class="line">    <span class="title">exec</span>(<span class="title">code</span>, <span class="title">run_globals</span>)</div><div class="line">  <span class="title">File</span> "<span class="title">D</span>:\<span class="title">Dev</span>\<span class="title">Python35</span>\<span class="title">Scripts</span>\<span class="title">pip.exe</span>\<span class="title">__main__.py</span>", <span class="title">line</span> 5, <span class="title">in</span> &lt;<span class="title">module</span>&gt;</div><div class="line"><span class="title">ImportError</span>: <span class="title">No</span> <span class="title">module</span> <span class="title">named</span> '<span class="title">pip</span>'</div></pre></td></tr></table></figure>
<p>翻译一下：</p>
<ol>
<li>因为 pip.exe 正在运行，所以无法将新的pip.exe覆盖上去</li>
<li>因为没权限，另外一个错误产生了</li>
<li>升级失败想再来一次？不好意思，旧版本已经卸载了，根本找不到</li>
</ol>
<p>我去，直接蒙圈了，就随手更新一下，直接就把pip弄没了。我还得手动安装一次pip？虽然不难，但折腾啊。</p>
<p>Google一下，发现有人提供issue了：<a href="https://github.com/pypa/pip/issues/3804" target="_blank" rel="external">https://github.com/pypa/pip/issues/3804</a></p>
<p>我把关键的信息搬运一下（大意汇总 + 翻译，不一一对应）：</p>
<blockquote>
<p>pip.exe 正在运行，所以无法替换对应的文件，与其说是错误，不如说是系统限制。</p>
<p>以系统管理员运行，用 python -m pip install –upgrade pip 更新就可以了。</p>
</blockquote>
<p>（pip.exe 实际上指向pip-script.py，然后里面再加载pip模块并运行，实际效果就跟 <code>python -m pip install --upgrade pip</code> 一样。但不一样的是，前者运行锁定了pip.exe，而后者实际上只运行了 python.exe。）</p>
<p>然后什么都没做，这个issue就作为<a href="https://github.com/pypa/pip/issues/1299" target="_blank" rel="external">https://github.com/pypa/pip/issues/1299</a> 的 duplicated issue 被 closed了。</p>
<p>有兴趣可以看1299下面的讨论，太长我就不翻了。</p>
<p>还好还有 easy_install，<code>easy_install pip</code>，恢复正常。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;升级 pip 过程中踩了个坑。其实之前也升级过不过很巧合绕过去了。这次踩到做个记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://jaycechant.info/tags/Python/"/>
    
      <category term="trouble" scheme="http://jaycechant.info/tags/trouble/"/>
    
      <category term="pip" scheme="http://jaycechant.info/tags/pip/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 一些好用的特性</title>
    <link href="http://jaycechant.info/2016/some-good-features-on-CentOS/"/>
    <id>http://jaycechant.info/2016/some-good-features-on-CentOS/</id>
    <published>2016-12-23T06:12:46.000Z</published>
    <updated>2017-01-09T15:36:40.774Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文纯属凑数，一为保持发博文习惯，二为重新配置了hexo之后发文测试</em></p>
<a id="more"></a>
<p>从 7.10 开始，Ubuntu 一直是我 Linux 系统的首选。大学里面出于学习需要，也一度接触过Redhat，但实在喜欢不起来。</p>
<p>这是自然的，因为我一直的需求都是一台Desktop PC，偶尔做一些Linux环境下的开发练习，并非一个面向生产的Linux环境。好看、易用、乃至新奇有趣放在了第一位，作为从Windows的使用习惯过渡的用户，Ubuntu 很长一段时间里是最合适的。</p>
<p>到了大学高年级，因为学习Web开发的需要，也搭建过一个CentOS的服务器，但仍然是非常不习惯，最后还是不了了之。</p>
<hr>
<p>可是到了工作之后，再折腾Linux，都是有比较明确的开发目的了。这时重新配置Ubuntu，开始感觉到一些不便。譬如说Ubuntu使用的工具不太稳定，在不同版本之间替换组件比较频繁；镜像需要手动选择，最多在选择的时候测试一次。在中国这样的网络环境下，镜像速度测试时效性非常短，我测得最快的镜像，波兰、德国慢地球飞，就是不在中国大陆；但真等到要下载，刚刚最快的那个镜像可能连不上了。</p>
<p>最近为了搭一个试验环境，用来在正式的阿里云环境部署之前，在本地先练手。阿里云安装的是自带的Aliyun Linux，网上没找到下载。得知它基于RHEL，所以重新拿起了CentOS，结果发现非常顺手。</p>
<p>第一个是 yum。yum 是 Redhat 系的包管理器，基于rpm，对应ubuntu 系的apt-get。幸福感的来源，是CentOS 7 上的yum 自带 <a href="https://wiki.centos.org/PackageManagement/Yum/FastestMirror" target="_blank" rel="external">fastestmirror</a> 插件，每次下载，先自动跑一下判断最快的镜像，然后再下载，最大地保证了镜像测试的有效，下载速度非常快速。</p>
<p>第二个是systemctl 取代了 init.d 让服务配置简化了许多。</p>
<p>对于用ssh登录，不需要GUI的web server，果然Redhat 系更合适啊。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文纯属凑数，一为保持发博文习惯，二为重新配置了hexo之后发文测试&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="http://jaycechant.info/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>刷OJ的技巧</title>
    <link href="http://jaycechant.info/2016/skills-on-OJ/"/>
    <id>http://jaycechant.info/2016/skills-on-OJ/</id>
    <published>2016-12-09T01:35:03.000Z</published>
    <updated>2016-12-18T13:16:25.953Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在三星广研待了四年，兼任了两年半内训讲师，其实整理过很多培训资料，却因为安保绝大多数无法带走。里面无关保密部分，一直想重新整理出来，留一个记录。</p>
<p>可仅凭手头遗留的一些纸质资料和记忆，时隔越久越难恢复了。只能怪我在三星期间没有坚持回家写技术博客。</p>
<p>先从容易的开始吧。<br>我写过一篇汇总，主要是在OJ系统上刷题提交 以及 应对三星内部软件考试的技巧，部分是针对考试的小聪明，但也有很多其实是通用的coding技巧。因为是针对当时的学员常见错误写的，内容很乱没什么章法。以下是整理恢复的正文：</p>
</blockquote>
<a id="more"></a>
<h1 id="1-测试数据的输入输出重定向"><a href="#1-测试数据的输入输出重定向" class="headerlink" title="1 测试数据的输入输出重定向"></a>1 测试数据的输入输出重定向</h1><p>很多人在调试的过程中，都是一个字符一个字符地手动输入测试数据，然后对着小黑窗一个一个地核对答案的正确性。</p>
<p>这样做缺点很明显：</p>
<ul>
<li>效率低，容易出错（包括输入输错，和输出核对出错）</li>
<li>没有办法测一些压力比较大的数据，譬如问题范围达到千级别，手输基本没法测</li>
<li>一些数据修改之后又重新测，反复手敲浪费时间</li>
<li>代码修改前后的输出结果很难比较</li>
</ul>
<p>解决方法就是，将输入输出重定向到文件上。</p>
<p>这样做，输入数据生成一次可以反复测，需要大的测试数据，可以写一个for循环加随机数生成放文件里。</p>
<p>输出的结果，可以每次换一个文件名存着，方便前后对比代码修改的效果。</p>
<p>上代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span> <span class="comment">// freopen() 就包含在这个库里</span></span></div><div class="line"></div><div class="line">freopen(<span class="string">"in1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">freopen(<span class="string">"out1-1.txt"</span>,<span class="string">"w"</span>, <span class="built_in">stdout</span>);</div></pre></td></tr></table></figure>
<h1 id="2-输出缓冲区置空"><a href="#2-输出缓冲区置空" class="headerlink" title="2 输出缓冲区置空"></a>2 输出缓冲区置空</h1><p>这个官方的代码模板里一般都自带，但是很多人不知道它放在那里干什么：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</div></pre></td></tr></table></figure>
<p>其实这段代码的作用就是把输出缓冲区置为空，这样任何输出都会马上输出到终端或者文件。</p>
<p>如果程序能保证执行完，那么这个缓冲区的大小是不会影响最终结果的，只是缓冲区大的话会减少输出的频率，提高一点点IO的效率。</p>
<p>但反过来，如果程序可能有潜在的bug，不一定能执行完，那么把缓冲区置空就能尽可能地输出已经完成的结果，<s>尽可能地多拿一部分的分</s>（由于新的考试形式只有一题，而且要求全对，这个技巧可能没有用武之地了）。</p>
<h1 id="3-调试宏"><a href="#3-调试宏" class="headerlink" title="3 调试宏"></a>3 调试宏</h1><p>有些题目比较复杂，需要额外增加一些log来调试。但往往调试完大家会忘了把log给 <strong>注释掉/删掉</strong>，以至于有多余输出引起答案错误。而即使你记得，从复杂的代码中一点一点地把log找出来也是吃力不讨好，还容易漏。</p>
<p>这时候，把调试代码加上条件编译，并用宏控制开关，就是比较省力的做法了：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG (1) <span class="comment">// before you submit, change it to 0</span></span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></div><div class="line"></div><div class="line"><span class="comment">// do something for debuging</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// DEBUG</span></span></div></pre></td></tr></table></figure>
<p>一般的题目，我个人喜欢用 <code>DEBUG_IO</code> 和 <code>DEBUG_LOG</code> 两个宏，分别控制IO重定向（见技巧1），和log的输出。</p>
<p>这种技巧在生产代码中也是随处可见的，所以大家应该不难理解，只是有时候想不起来把它用起来。</p>
<h1 id="4-“函数”-宏"><a href="#4-“函数”-宏" class="headerlink" title="4 “函数” 宏"></a>4 “函数” 宏</h1><p>对于一些反复出现的算式，手敲累且容易错，写函数又显得没必要，可以写成宏的形式。  </p>
<p>如两者取较大值：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a, b)   ((a) &gt; (b) ? (a) : (b))</span></div></pre></td></tr></table></figure>
<p>不过，请注意：</p>
<ol>
<li>这终究不是函数，只是宏展开（相当于预编译器做了一次查找替换），实际行为跟函数差异很大，如果复杂的式子，请还是写成函数；如果使用C++，可以写成 <strong>inline</strong> 的形式。</li>
<li>为了避免展开后优先级的问题，请务必在变量外加一层括号。这不仅在这里推荐，所有宏都推荐这样做，来保证在最终展开的地方能够有正确的优先级。</li>
</ol>
<p>试考虑这样的宏：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MULTIPY(a, b)   (a * b)</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> res = MULTIPY(<span class="number">1</span> + <span class="number">2</span>, <span class="number">3</span> + <span class="number">4</span>)</div></pre></td></tr></table></figure>
<p>res 的结果是多少？ <code>3 * 7 = 21</code> 吗？<br>实际上展开之后的表达式是<code>int res = (1 + 2 * 3 + 4)</code> ,  因为乘法优先，结果是11。</p>
<p>如果写成以下的样子就不会有问题了：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MULTIPY(a, b)   ((a) * (b))</span></div></pre></td></tr></table></figure>
<h1 id="5-规避比较语句中误用等号"><a href="#5-规避比较语句中误用等号" class="headerlink" title="5 规避比较语句中误用等号"></a>5 规避比较语句中误用等号</h1><p><em>*该技巧出自《C专家编程》</em></p>
<p>试看这样一段代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// count the number of 7 in array</span></div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">array</span>[i] = <span class="number">7</span>)</div><div class="line">    &#123;</div><div class="line">        count++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很普通的一段统计次数的代码。</p>
<p>一切看起来都很正常。</p>
<p>大家先不要急着往下看。</p>
<p>看完这段代码，大家能第一时间发现问题吗？</p>
<p>……</p>
<p><code>if(array[i] = 7)</code></p>
<p>这个判断永远是真的（这个语句取左值，也就是array[i]的值。而array[i]被赋值成7，在C里面，非零的量都当做真），<br>所以结果是，数组的所有元素都成了7，也统计了数组大小这么多个7……</p>
<p>如果养成习惯，在比较时将 <strong>常量 / 字面量</strong>  放在前面，像这样：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// count the number of 7 in array</span></div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="number">7</span> = <span class="built_in">array</span>[i]) <span class="comment">// !!compile error here</span></div><div class="line">    &#123;</div><div class="line">        count++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为常量 / 字面量 不能被赋值，所以是会直接编译失败的，而且编译器还直接指出了错误的行数。</p>
<h1 id="6-预先计算-查表-大幅减少程序运行时间"><a href="#6-预先计算-查表-大幅减少程序运行时间" class="headerlink" title="6 预先计算 + 查表 大幅减少程序运行时间"></a>6 预先计算 + 查表 大幅减少程序运行时间</h1><p><em>*该技巧出自《Code complete》</em></p>
<blockquote>
<p>在算法里，预先计算（Precomputation）是指在实际运行程序之前，使用初始化运算，生成一个查询表（lookup table）供算法引用，以避免每次运行程序时重复计算这些数据。<br>——翻译自英文维基Precomputation词条</p>
</blockquote>
<p>假设内存用之不尽，又有足够的时间提前准备，那么速度最快的算法应该就是 <strong>“预先计算 + 查表”</strong> 无疑。</p>
<p>试想我们已经有了所有情况的答案，你一问，我马上就能回答。</p>
<p><strong>“无限内存 + 无限准备时间”</strong> 这个前提当然是不可能成立的，所以我们也没办法拿这种做法当万金油。</p>
<p>但是对于某些特定问题，可能的情况如此之少，以至于我们可以把 中间结果 甚至 最终结果 先存起来，运行时直接查表。</p>
<h2 id="筛选素数-是-比较经典的例子。"><a href="#筛选素数-是-比较经典的例子。" class="headerlink" title="筛选素数 是 比较经典的例子。"></a>筛选素数 是 比较经典的例子。</h2><p>假设我们的任务要 判断 1’000 个 1’000’000（不用数0了，一百万） 以内 的自然数是否素数：</p>
<ol>
<li>如果逐个判断（对<strong>每个数</strong>，判断 <strong>每一个</strong> 比它小的数能否整除），显然太慢了。<br>（时间复杂度为O(n*k)，空间复杂度为O(1)，其中k = 1’000, n = 1’000’000，下同）</li>
<li>如果预先计算并保存每一个数 <strong>是否</strong> 素数，时间上变成了可以随机访问马上得到结果，但显然太浪费空间了。<br>（一百万大小的数组，只有其中1’000个元素有用。时间复杂度成了O(k)，空间复杂度又成了 O(n)）</li>
<li>其实素数的分布相当稀疏，在 <strong>一百万以内，一共只有78’498个</strong> 素数 （7.85%）。如果我们按顺序存储这些素数，然后拿到一个数之后再数组里折半查找，就可以知道这个数是否素数了。<br>(时间复杂度为 O(k * log m)，空间复杂度为O(m)，其中m = 78’498, log m 约为 16)</li>
<li>可是如果给的内存限制，连78’498个数都存不下呢？其实存168个就够了。<br><strong>1’000以内的素数一共168个</strong>。对于任意一个数x, 2 到 根号x 之间的所有素数，构成了对 x 的素数筛。换言之1’000以内的素数，就构成了1’000’000这个范围的素数筛。<br>所以这168个素数，足以筛选一百万以内的任意一个整数。<br>（时间复杂度为 O(k * l)， 空间复杂度为 O(l)，其中 l = 168）</li>
</ol>
<p>如果你追求 <strong>极致的时间要求，内存随便</strong>，当然可以选择方案2。<br>还是 <strong>追求时间尽可能短，但内存不够</strong> 方案2的要求，可以选择方案3。<br>但多数情况下，方案4是 在 <strong>时间 和 空间 都比较平衡</strong> 的一个方案。</p>
<p>这个例子同时也说明了，<strong>很多时候不存在完美方案</strong>，即使算法，也是<strong>各种资源的折衷</strong>。需要根据面临的主要矛盾，来选择<strong>合适的解决方案</strong>。</p>
<p>顺便附上一个输出素数的小脚本。（预先计算因为没有语言限制，建议使用Python, js 等易于编写功能强大的 动态脚本语言。考虑到大家可能没有Python坏境，这里给了一个js的版本。）<br>原理很简单，初始化一个 素数筛，里面一开始只有2（换言之，只能判断不大于4的数是否素数）。<br>然后从3开始，对每个奇数（除2以外的偶数都不是素数）用素数筛筛一遍，如果是素数，就加入素数筛。<br>代码足够短小简单（很容易背下来），效率也还过得去，正好可以在需要 素数表 的题目里，用来做预先计算。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// js script</span></div><div class="line"><span class="comment">// for given range, return all prime numbers that not greater than range</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPrimeNumList</span>(<span class="params">range</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> list = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    list.push(<span class="number">2</span>);</div><div class="line">    <span class="keyword">var</span> n = <span class="number">3</span>; <span class="comment">// the num start to be tested</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> (n &lt;= range) &#123;</div><div class="line">        <span class="keyword">var</span> i = <span class="number">0</span>; <span class="comment">// list index</span></div><div class="line">        <span class="keyword">var</span> r = <span class="built_in">Math</span>.sqrt(n); <span class="comment">// square root of n</span></div><div class="line">    </div><div class="line">        <span class="keyword">while</span> (list[i] &lt; r) &#123;</div><div class="line">            <span class="keyword">if</span> (n % list[i] == <span class="number">0</span>) <span class="comment">// if n can be divided, break</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                i++;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        <span class="keyword">if</span> (list[i] &gt; r) <span class="comment">// if list[i] &gt; r, it means that never break</span></div><div class="line">            list.push(n); <span class="comment">// n is a PRIME number</span></div><div class="line"></div><div class="line">        n = n + <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> list;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="7-表驱动法-实现状态转移"><a href="#7-表驱动法-实现状态转移" class="headerlink" title="7 表驱动法 实现状态转移"></a>7 表驱动法 实现状态转移</h1><p><em>*该技巧出自《Code complete》</em></p>
<p>查表法 除了可以用来引用 预先计算 的数据，还能用来实现状态的判断转移。</p>
<p>大多数场合，连续的 if-else 或 switch-case，都是不断复制黏贴的类似代码片段。<br>这样的代码，一旦需要修改，要在多个地方做类似修改，可维护性非常差。<br>实际上这是没有好好 运用 合适的 数据结构 的结果。  </p>
<p>而将状态之间的映射关系 预先 存放在 表里面，并实现维护一段查表的算法，<strong>正是对“数据结构 + 算法 = 程序” 的一种实践</strong>。</p>
<p>以 <a href="http://poj.org/problem?id=1002" target="_blank" rel="external">POJ1002</a> 作为例子：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> mapping[] =</div><div class="line">&#123;</div><div class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="comment">// digit 0~9, ASCII 48~57</span></div><div class="line">    NA, NA, NA, NA, NA, NA, NA, <span class="comment">// ASCII 58~64</span></div><div class="line">    <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="comment">// A~Y, Q = NA</span></div><div class="line">    <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>,</div><div class="line">    <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>,</div><div class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</div><div class="line">    <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>,</div><div class="line">    <span class="number">7</span>, NA, <span class="number">7</span>, <span class="number">7</span>,</div><div class="line">    <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>,</div><div class="line">    <span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">main()&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, buf);</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">0</span>, num = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(k &lt; <span class="number">7</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> c = buf[j++] - <span class="string">'0'</span>;</div><div class="line">        <span class="keyword">int</span> x;</div><div class="line">        <span class="keyword">if</span>(<span class="number">0</span> &lt;= c &amp;&amp; MAPSIZE &gt; c &amp;&amp; NA != (x = mapping[c]))</div><div class="line">        &#123;</div><div class="line">            num = num * <span class="number">10</span> + x;</div><div class="line">            k++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    cnt[num]++;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，在构建好 数据表 之后，核心的查询代码 只有一行（这个例子里，x 是我们需要的值）：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="number">0</span> &lt;= c &amp;&amp; MAPSIZE &gt; c &amp;&amp; NA != (x = mapping[c]))</div><div class="line">&#123;</div><div class="line">    <span class="comment">// use x to do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="8-备忘录方法"><a href="#8-备忘录方法" class="headerlink" title="8 备忘录方法"></a>8 备忘录方法</h1><p>提到了 预先计算 和 查表，就不得不顺便介绍一下 <strong>备忘录方法</strong></p>
<p>大多数时候 <strong>备忘录方法</strong> 都是用来跟 动态规划 作对比。<br>这两种方法都是应用于这样的情况：</p>
<ol>
<li>问题可以分解成多个子问题</li>
<li>有重复子问题</li>
</ol>
<p>所以为了避免重复计算的浪费，两种方法都会开辟一个数组用来存放子问题的解。<br>区别在于</p>
<ul>
<li>动态规划 是自底向上的计算，先计算最小的子问题的解，然后逐渐组合出更复杂的子问题的的解，最后得出原问题的解。因为是从最小的字问题开始计算，可能部分子问题的解是没有派上用场的，因为在计算的时候还不知道哪些会被引用。</li>
<li><strong>备忘录方法</strong> 是自顶向下的，多数情况下是一个递归结构：先计算原问题，里面引用到子问题时，递归计算子问题……直到全部子问题都有解，再在返回里面组合成原问题的解。这里面， <strong>备忘录方法</strong>的优化在于，一旦一个子问题被解决过，就把解缓存起来，以后再引用就直接读取不再计算。</li>
</ul>
<p>拿 <a href="http://poj.org/problem?id=1243" target="_blank" rel="external">POJ1243</a> 举例</p>
<p>动态规划：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//...</span></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= G; i++) &#123;</div><div class="line">    DP[i][<span class="number">0</span>] = i;</div><div class="line">    DP[<span class="number">0</span>][i] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i&lt;= G; i++) &#123;</div><div class="line">    <span class="keyword">for</span>(j = <span class="number">1</span>; j&lt;= L; j++) &#123;</div><div class="line">        DP[i][j] = DP[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span> + DP[i<span class="number">-1</span>][j];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在计算过一次(G, L)之后，所有比G, L 小的(g, l) 对的解都可以在DP数组中找到。不过多个case里面G, L的值的大小并不确定。所以遇到新的G, L又要再算一遍是一种浪费。</p>
<p>备忘录方法：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getRange</span><span class="params">(<span class="keyword">int</span> g, <span class="keyword">int</span> l)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="number">0</span> == Memo[g][l]) &#123;</div><div class="line">        <span class="comment">// compute it only when it has no result</span></div><div class="line">        Memo[g][l] = getRange(guess - <span class="number">1</span>, life)</div><div class="line">            + <span class="number">1</span></div><div class="line">            + getRange(guess - <span class="number">1</span>, life - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> Memo[g][l];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= MAX; i++) &#123;</div><div class="line">    Memo[i][<span class="number">0</span>] = i;</div><div class="line">    Memo[<span class="number">1</span>][i] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">getRange(g, l);</div></pre></td></tr></table></figure>
<p>你会发现这道题在case很多而且g, l大小没有顺序时，备忘录方法的效果会更好。（其实这道题也可以预先计算，才30*30的规模）</p>
<p>当然，这道题属于比较特殊的情况，两种方法都能用。<br>一部分问题 由于引用哪个子问题的解，取决于子问题的解之间的比较，只能先算最小的子问题，只能自底向上，只能动态规划。</p>
<p>而有些题目，实际引用的子问题数占全部子问题数的很少一部分，这时，动态规划把全部子问题算一遍是一种很大的浪费，备忘录是一种更好的选择。</p>
<p>说了这么多好像很复杂，其实 <strong>备忘录方法</strong> 的核心思想只有一句话： <strong>子问题太多，只在第一次引用时算一次，也只算这一次。</strong></p>
<p>预先计算是：情况这么少，编译前就全算好了。（提前计算）<br>动态规划是：从最小的子问题开始向上组合，用小的子问题组合出大的子问题，直到原问题。全部子问题都算且只算一次。（从小到大，全部都算）<br>而备忘录方法：从原问题开始，向下分解，不用不算，只算一次。（推迟计算）</p>
<h1 id="9-邻接矩阵-VS-邻接表-VS-其他图存储法"><a href="#9-邻接矩阵-VS-邻接表-VS-其他图存储法" class="headerlink" title="9 邻接矩阵 VS 邻接表 VS 其他图存储法"></a>9 邻接矩阵 VS 邻接表 VS 其他图存储法</h1><p>不同的 图 问题怎么解先按下不表，但是图的存储总是绕不开的问题。</p>
<p>那么最常用的两种表示方法，究竟用 <strong>邻接矩阵</strong> 还是 <strong>邻接表</strong> 呢？ 还有什么表示方法呢？ 分别有什么优缺点，要注意什么呢？</p>
<p>（<em> 为了方便讨论，下面统一用 V 代表顶点数， v 代表一个顶点， E 代表边数， e 代表一条边。<em>*图默认都是无向图，所以是双向操作；如果有向图，请省略反向操作。</em></em> 另外，为了简便，代码是精简过的伪代码。）</p>
<h2 id="边集数组"><a href="#边集数组" class="headerlink" title="边集数组"></a>边集数组</h2><p>在讲那两种主要的存储方式之前，先提一下边集数组。</p>
<p>所谓边集数组，就是用数组记录每条边的两个顶点。部分题目由于input的方式就是给出每条边的两个顶点，所以sample代码里的存储方式默认就是给了边集数组。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// edge array</span></div><div class="line"><span class="keyword">int</span> A[MAX_E];</div><div class="line"><span class="keyword">int</span> B[MAX_E];</div><div class="line"><span class="keyword">int</span> Weight[MAX_E]; <span class="comment">// skip if unweighted graph</span></div><div class="line"><span class="comment">// int Edge[MAX_E][3]; // you can make into 1 array too, [0]-from, [1]-to, [2]-weight</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>(e: <span class="number">1</span> ~ E)&#123;</div><div class="line">    <span class="comment">// input va， vb, weight</span></div><div class="line">    A[e] = va;</div><div class="line">    B[e] = vb;</div><div class="line">    Weight[e] = weight;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优点：</p>
<ul>
<li>固定使用MAX_E的空间，对于 E &lt;&lt; V ^ 2 的图（边数远小于顶点的平方，即，稀疏图），空间上很节省。</li>
<li>方便对边遍历。</li>
</ul>
<p>缺点：</p>
<ul>
<li>不能随机访问，对顶点遍历效率很低。</li>
</ul>
<h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h2><p>因为直观、实现方便，加上正式考试对内存的限制比较宽松，这应该是大家最常用的表示方式。</p>
<p>示例代码给出了两种输入处理： 1是处理以邻接矩阵给出的数据，2是处理以边表的方式给出数据。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// adjacent matrix</span></div><div class="line"><span class="keyword">int</span> AdjMat[MAX_V][MAX_V]; <span class="comment">// you can use bool for connected or not, and int for weight.</span></div><div class="line"></div><div class="line"><span class="comment">// input method 1 (input from matrix)</span></div><div class="line"><span class="keyword">for</span>(va: <span class="number">1</span> ~ V)&#123;</div><div class="line">    <span class="keyword">for</span>(vb: <span class="number">1</span> ~ V)&#123;</div><div class="line">        <span class="comment">// input weight</span></div><div class="line">        AdjMat[va][vb] = weight;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// input method 2 (input from edge array)</span></div><div class="line"><span class="comment">// init</span></div><div class="line"><span class="keyword">for</span>(va: <span class="number">1</span> ~ V)&#123;</div><div class="line">    <span class="keyword">for</span>(vb: <span class="number">1</span> ~ V)&#123;</div><div class="line">        AdjMat[va][vb] = DEFAULT; <span class="comment">// Define your default value, maybe 0 or -1.</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(e: <span class="number">1</span> ~ E)&#123;</div><div class="line">    <span class="comment">// intput va, vb, weight</span></div><div class="line">    AdjMat[va][vb] = weight;</div><div class="line">    AdjMat[vb][va] = weight; <span class="comment">// set this only when it's undirected graph</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优点：</p>
<ul>
<li>实现简单（二维数组），容易理解</li>
<li>可以随机访问。亦即，知道任意from, to的值，都可以马上判断是否连通。</li>
</ul>
<p>缺点：</p>
<ul>
<li>固定使用MAX_V ^ 2的空间，对于稀疏图，空间上是很大的浪费。（不过由于考试多数够空间，很多时候这个缺点可以忽略）</li>
<li>遍历效率低。跟随机访问相反，如果要遍历from能到的所有to点，就不得不将from所在行遍历一次，在稀疏图中，会导致遍历的效率很低。而恰恰很多算法都需要做遍历。</li>
</ul>
<h2 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h2><p>邻接表比邻接矩阵稍复杂一些，一般要用到变长数组vector。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// adjacent list - based on vector</span></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; AdjList[MAX_V];</div><div class="line"></div><div class="line"><span class="comment">// input</span></div><div class="line"><span class="keyword">for</span>(e: <span class="number">1</span> ~ E)&#123;</div><div class="line">    <span class="comment">// input va, vb</span></div><div class="line">    AdjList[va].push_back(vb);</div><div class="line">    AdjList[vb].push_back(va);</div><div class="line">    <span class="comment">// AdjList[va].push_back(weight); // If it's weighted graph, you can push weight right after vb.</span></div><div class="line">    <span class="comment">// AdjList[vb].push_back(weight);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你可能会问，库不是不给用了吗？其实基于边集数组可以改写成邻接表， 本质上就是用Next数组将边集数组串联起来。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// adjacent list - based on edge array</span></div><div class="line"><span class="keyword">int</span> Head[MAX_V];</div><div class="line"><span class="keyword">int</span> Tail[MAX_V];</div><div class="line"><span class="keyword">int</span> Next[MAX_E];</div><div class="line"><span class="keyword">int</span> To[MAX_E * <span class="number">2</span>]; <span class="comment">// size * 2 for reverse edge</span></div><div class="line"><span class="keyword">int</span> Weight[MAX_E]; <span class="comment">// skip if unweighted graph</span></div><div class="line"></div><div class="line">E_counter = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(e: <span class="number">1</span> ~ E)&#123;</div><div class="line">    <span class="comment">// input va， vb, weight</span></div><div class="line">    <span class="comment">// process va -&gt; vb</span></div><div class="line">    To[E_counter] = vb;</div><div class="line">    Weight[E_counter] = weight;</div><div class="line">    <span class="keyword">if</span>(Head[va] == DEFAULT)&#123;</div><div class="line">        Head[va] = E_counter;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Next[Tail[va]] = E_counter;</div><div class="line">    &#125;</div><div class="line">    Tail[va] = E_counter;</div><div class="line">    E_counter++;</div><div class="line"></div><div class="line">    <span class="comment">// process vb -&gt; va</span></div><div class="line">    To[E_counter] = va;</div><div class="line">    Weight[E_counter] = weight;</div><div class="line">    <span class="keyword">if</span>(Head[vb] == DEFAULT)&#123;</div><div class="line">        Head[vb] = E_counter;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Next[Tail[vb]] = E_counter;</div><div class="line">    &#125;</div><div class="line">    Tail[vb] = E_counter;</div><div class="line">    E_counter++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而如果不为了省内存，只是为了加快遍历速度，直接上二维数组也可以实现邻接表。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// adjacent list - based on 2-dimens array</span></div><div class="line"><span class="keyword">int</span> AdjList[MAX_V][MAX_V];</div><div class="line"></div><div class="line"><span class="keyword">for</span>(e: <span class="number">1</span> ~ E)&#123;</div><div class="line">    <span class="comment">// intput va, vb, weight</span></div><div class="line">    AdjList[va][++AdjList[va][<span class="number">0</span>]] = weight; <span class="comment">// store edge from AdjList[v][1], use AdjList[v][0] to store the edge number that adjacent to v.</span></div><div class="line">    AdjList[vb][++AdjList[vb][<span class="number">0</span>]] = weight; <span class="comment">// set this only when it's undirected graph</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优点：</p>
<ul>
<li>方便对顶点遍历邻接顶点（或者说对顶点，遍历它连接的边），对稀疏图的遍历比邻接矩阵节省时间。 一般空间足够的情况下，推荐最后一种实现方式。</li>
</ul>
<p>缺点：</p>
<ul>
<li>不能对边遍历</li>
<li>不能随机访问</li>
</ul>
<p>表面上来看，邻接表缺点比较多。但实际使用中，几乎所有图算法都需要对顶点遍历边（Dijkstra，Floyd，Prim…），所以反而是最常用的表示存储方式。</p>
<h2 id="其他存储方式"><a href="#其他存储方式" class="headerlink" title="其他存储方式"></a>其他存储方式</h2><p>牵涉到复杂的指针操作，仅供参考了解。</p>
<ul>
<li>十字链表</li>
<li>多重邻接表</li>
</ul>
<hr>
<p>原本这里写着 <strong>…… To be continued……</strong>，表示我会不定期更新。但因为我的离职，起码三星内网的那篇文章，我再也不会更新了。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在三星广研待了四年，兼任了两年半内训讲师，其实整理过很多培训资料，却因为安保绝大多数无法带走。里面无关保密部分，一直想重新整理出来，留一个记录。&lt;/p&gt;
&lt;p&gt;可仅凭手头遗留的一些纸质资料和记忆，时隔越久越难恢复了。只能怪我在三星期间没有坚持回家写技术博客。&lt;/p&gt;
&lt;p&gt;先从容易的开始吧。&lt;br&gt;我写过一篇汇总，主要是在OJ系统上刷题提交 以及 应对三星内部软件考试的技巧，部分是针对考试的小聪明，但也有很多其实是通用的coding技巧。因为是针对当时的学员常见错误写的，内容很乱没什么章法。以下是整理恢复的正文：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="skill" scheme="http://jaycechant.info/tags/skill/"/>
    
      <category term="OJ" scheme="http://jaycechant.info/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>解题报告 —— 从水题开一个头</title>
    <link href="http://jaycechant.info/2016/solution-report-start-from-an-easy-problem/"/>
    <id>http://jaycechant.info/2016/solution-report-start-from-an-easy-problem/</id>
    <published>2016-11-08T09:40:20.000Z</published>
    <updated>2017-01-25T04:21:21.983Z</updated>
    
    <content type="html"><![CDATA[<p>昨天有人跟我讨论一道水题，勾起了解题的念头。题目不难，但也有值得讨论之处。姑且以它的解题报告，开个写解题报告的头。</p>
<a id="more"></a>
<h1 id="源起"><a href="#源起" class="headerlink" title="源起"></a>源起</h1><p>在前公司四年，有两年半担任兼职讲师。一开始给非软件专业（一般是通信专业）的同事介绍Java，后来变成了主要讲解算法和数据结构题，以应对本社的软件能力等级考试。我和其他几个被选拔出来的讲师，工作时间里有一部分变成了光明正大地刷算法题。很多同事把做题视作洪水猛兽，我们却AC之后继续研究优化，相当享受。当然还得做课件和上课又是一回事。</p>
<p>因为安保，所有资料都在公司内网。现在离开老东家，想把无关保密部分整理出来作为自己的积累，突然发现凭回忆非常零碎。老实说，多数题在ACM玩家来看，就算不是水题，也就中等难度；但钻研其中，算法的取舍，各种因素的权衡，也是一种修炼。自己资质一般，如果不这些所得用文字留下来，一不小心就会原地踏步。水题也好，重新开个头吧。</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>题目来自口头转述，只有大意和约束：</p>
<ul>
<li><p>有一个 N * N 的矩阵图，上面有 M 个顺序编号的点（1 ~ M）和 一些无法通过的区域（9），余下区域为0。</p>
</li>
<li><p>求从 1 到 M 顺序经过全部点的 <strong>最短路径有多少条</strong> 。</p>
</li>
<li><p>从描述的例子看，还没轮到的点允许通过，只是后面轮到时还是得走一次。  </p>
<p>譬如说从 1 走到 5，先走 1 -&gt; 2 这段，到达 2 之前， 3、4、5 都相当于普通的点，也就是0，可以经过。而就算你经过了这三个点，譬如说 4 在 1-&gt; 2 的最短路径上，走到 3 时还是得往 4 走。</p>
</li>
<li><p>因为是水题，数据量极小， 3 ≤ N ≤ 7，3 ≤ M ≤ 5。也就是穷举型的思路都可以做。如果进一步想验证效率，可以人为调大数据量看看。（我以前跟毅跞经常这么干）</p>
</li>
</ul>
<h3 id="输入输出示例"><a href="#输入输出示例" class="headerlink" title="输入输出示例"></a>输入输出示例</h3><ul>
<li>输入</li>
</ul>
<pre><code>5 4
1 0 0 0 0
0 0 0 0 0
0 2 0 4 0
0 0 0 9 0
0 0 0 3 0
</code></pre><ul>
<li>输出</li>
</ul>
<pre><code>18
</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="数学推导"><a href="#数学推导" class="headerlink" title="数学推导"></a>数学推导</h2><p>有些问题经数学推导之后，是可以有直接的公式解，而不需要一步步模拟的（典型的如 <strong>约瑟夫环</strong>）。退一步，如果问题本身无法直接推导，但是某种简化情况可以推导，也能为找思路提供方向。</p>
<h3 id="乘法原理"><a href="#乘法原理" class="headerlink" title="乘法原理"></a>乘法原理</h3><p>首先，题目里的点必须按顺序通过，那么根据 <strong>乘法原理</strong> ，最终答案等于 次序上相邻的点的最短路径数的乘积。假定 \( C_{a, b} \) 是 a 点 到 b 点之间的最短路径数，那么写成数学式就是：</p>
<p>$$ \prod \ <em>{i=1} ^{M - 1} {C \</em>{i, i + 1}} $$</p>
<p>这就把问题简化成了两点之间的最短路径数了。不过似乎原题为了减低难度，在题目里就有提醒这点。</p>
<h3 id="排列组合"><a href="#排列组合" class="headerlink" title="排列组合"></a>排列组合</h3><p>假定我们不考虑禁行区（9）的存在，那么两点之间的最短路径，距离显然为他们之间的 <strong>曼哈顿距离</strong> 。</p>
<p>假设 <strong>横向的步数为W，纵向的步数为H</strong> ，同时横向移动一步标记为0，纵向标记为1，那么长度为 曼哈顿距离 的路径数，就相当于W个0和H个1的全排列：\( A(W+H) = (W+H)! \) 。但因为0 和 1都有大量重复，这并不是一个真正的全排列，所以还要把 0 和 1内部的组合数排除掉，最终得到： \( \frac{(W+H)!}{W! H!} \) 。</p>
<p>在 W+H不是特别大（换言之 (W+H)! 没有超出表示范围，以这题为例，W+H不超过7，那么最大的数不过5040）的情况下，这样就可以提前缓存好 N!，那么在W 和 H 确定之后只要做两次除法就得到答案了。</p>
<p>当然，这只是顺便延伸一下，实际上这道题因为 9 的存在，不能这么算。</p>
<h1 id="代码参考"><a href="#代码参考" class="headerlink" title="代码参考"></a>代码参考</h1><h2 id="Brute-force-dfs"><a href="#Brute-force-dfs" class="headerlink" title="Brute-force (dfs)"></a>Brute-force (dfs)</h2><blockquote>
<p>注1：这里开始会贴代码。一般我用 C/C++ 完成算法题，可以比较好地选择底层的数据结构实现。不过这里为了节省空间，用了Python来展示代码，而且只贴关键函数，输入输出部分就略过了。Python的代码非常接近 伪代码，相信没有写过Python的朋友也能很好理解。</p>
<p>注2：为了简便，这里的队列我直接用了list。但实际上list 的 pop(0) 会修改后面全部元素的位置，复杂度是O(n)。Python里更好的选择是deque，C/C++可以使用STL或者自己实现一个循环队列。</p>
</blockquote>
<p>如果没能直接找到数学关系直接计算，也没能一眼看出合适的算法，那么暴力不失为一个好的开始。具体到这里，暴力的做法一般就是用DFS穷举所有可能的路径，找出中间最短那几条。</p>
<p>当然，直接暴力，内存和时间复杂度都会很夸张（这里如果不限制长度，先穷举所有路径，再计算其中最短的数量，操作是很庞大的），所以哪怕是第一份代码，我也加入了一些直接能想到的剪枝：一旦发现了dis大小的路径，那么所有大于dis的路径都不必再尝试了。</p>
<p>示例代码一：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(sp, ep, dis)</span>:</span></div><div class="line">    <span class="keyword">global</span> MinDis, CntWay, Vis</div><div class="line">    dis += <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> dis &gt; MinDis:</div><div class="line">        <span class="comment"># prunning</span></div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> sp[<span class="number">0</span>] == ep[<span class="number">0</span>] <span class="keyword">and</span> sp[<span class="number">1</span>] == ep[<span class="number">1</span>]:</div><div class="line">        <span class="keyword">if</span> dis == MinDis:</div><div class="line">            CntWay += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># dis &lt; MinDis</span></div><div class="line">            MinDis = dis</div><div class="line">            CntWay = <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span></div><div class="line">        </div><div class="line">    <span class="comment"># up</span></div><div class="line">    row, col = sp</div><div class="line">    row -= <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> row &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> Vis[row][col] <span class="keyword">and</span> Map[row][col] != <span class="number">9</span>:</div><div class="line">        Vis[row][col] = <span class="keyword">True</span></div><div class="line">        dfs((row, col), ep, dis)</div><div class="line">        Vis[row][col] = <span class="keyword">False</span></div><div class="line">        </div><div class="line">    <span class="comment"># down</span></div><div class="line">    row += <span class="number">2</span></div><div class="line">    <span class="keyword">if</span> row &lt; N <span class="keyword">and</span> <span class="keyword">not</span> Vis[row][col] <span class="keyword">and</span> Map[row][col] != <span class="number">9</span>:</div><div class="line">        Vis[row][col] = <span class="keyword">True</span></div><div class="line">        dfs((row, col), ep, dis)</div><div class="line">        Vis[row][col] = <span class="keyword">False</span></div><div class="line">        </div><div class="line">    <span class="comment"># left</span></div><div class="line">    row -= <span class="number">1</span></div><div class="line">    col -= <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> col &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> Vis[row][col] <span class="keyword">and</span> Map[row][col] != <span class="number">9</span>:</div><div class="line">        Vis[row][col] = <span class="keyword">True</span></div><div class="line">        dfs((row, col), ep, dis)</div><div class="line">        Vis[row][col] = <span class="keyword">False</span></div><div class="line">        </div><div class="line">    <span class="comment"># right</span></div><div class="line">    col += <span class="number">2</span></div><div class="line">    <span class="keyword">if</span> col &lt; N <span class="keyword">and</span> <span class="keyword">not</span> Vis[row][col] <span class="keyword">and</span> Map[row][col] != <span class="number">9</span>:</div><div class="line">        Vis[row][col] = <span class="keyword">True</span></div><div class="line">        dfs((row, col), ep, dis)</div><div class="line">        Vis[row][col] = <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">findWay</span><span class="params">(sp, ep)</span>:</span></div><div class="line">    <span class="keyword">global</span> MinDis, Vis</div><div class="line">    MinDis = MAX</div><div class="line">    Vis[sp[<span class="number">0</span>]][sp[<span class="number">1</span>]] = <span class="keyword">True</span></div><div class="line">    dfs(sp, ep, <span class="number">0</span>)</div><div class="line">    Vis[sp[<span class="number">0</span>]][sp[<span class="number">1</span>]] = <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> CntWay</div></pre></td></tr></table></figure>
<p>以上的代码是基于来问我的人的代码，把里面的错误改掉之后得到的。主函数调用findWay() 即可。关键部分在于到达目标时的判断：如果当前这条路的距离跟最短距离相等，那么计数器加一；否则就是发现了更短的路（不存在更长的情况，因为剪枝处理掉了），更新最短距离，并把计数器置一（注意不是置零）。</p>
<p>如果调整一下代码，还能把公共部分的检查提取出来。示例代码二：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(sp, ep, dis)</span>:</span></div><div class="line">    <span class="keyword">global</span> MinDis, CntWay, Vis</div><div class="line">    row, col = sp</div><div class="line">    <span class="comment"># log(sp, dis, MinDis, Vis[row][col])</span></div><div class="line">    dis += <span class="number">1</span></div><div class="line">    <span class="comment"># legal check and prunning</span></div><div class="line">    <span class="keyword">if</span> dis &gt; MinDis <span class="keyword">or</span> Vis[row][col] <span class="keyword">or</span> Map[row][col] == <span class="number">9</span>:</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> row == ep[<span class="number">0</span>] <span class="keyword">and</span> col == ep[<span class="number">1</span>]:</div><div class="line">        <span class="keyword">if</span> dis == MinDis:</div><div class="line">            CntWay += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># dis &lt; MinDis</span></div><div class="line">            MinDis = dis</div><div class="line">            CntWay = <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span></div><div class="line">        </div><div class="line">    Vis[row][col] = <span class="keyword">True</span></div><div class="line">    <span class="comment"># up</span></div><div class="line">    row -= <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> row &gt;= <span class="number">0</span>:</div><div class="line">        dfs((row, col), ep, dis)</div><div class="line">        </div><div class="line">    <span class="comment"># down</span></div><div class="line">    row += <span class="number">2</span></div><div class="line">    <span class="keyword">if</span> row &lt; N:</div><div class="line">        dfs((row, col), ep, dis)</div><div class="line">        </div><div class="line">    <span class="comment"># left</span></div><div class="line">    row -= <span class="number">1</span></div><div class="line">    col -= <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> col &gt;= <span class="number">0</span>:</div><div class="line">        dfs((row, col), ep, dis)</div><div class="line">        </div><div class="line">    <span class="comment"># right</span></div><div class="line">    col += <span class="number">2</span></div><div class="line">    <span class="keyword">if</span> col &lt; N:</div><div class="line">        dfs((row, col), ep, dis)</div><div class="line">        </div><div class="line">    Vis[sp[<span class="number">0</span>]][sp[<span class="number">1</span>]] = <span class="keyword">False</span></div></pre></td></tr></table></figure>
<h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><p>DFS冗余运算比较多，就会很自然地想，BFS能不能有所改善呢？</p>
<p>能不能改善先不管，我们先用BFS做出来。示例代码三：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(sp, ep)</span>:</span></div><div class="line">    cnt_way = <span class="number">0</span></div><div class="line">    <span class="comment"># None as step flag</span></div><div class="line">    queue = [sp, <span class="keyword">None</span>]</div><div class="line">    arrive = <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> len(queue) &gt; <span class="number">1</span>:</div><div class="line">        point = queue.pop(<span class="number">0</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> point:</div><div class="line">            <span class="keyword">if</span> arrive:</div><div class="line">                <span class="keyword">return</span> cnt_way</div><div class="line">            queue.append(<span class="keyword">None</span>)</div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line">        row, col = point</div><div class="line">        <span class="comment"># legal check</span></div><div class="line">        <span class="keyword">if</span> Map[row][col] == <span class="number">9</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> row == ep[<span class="number">0</span>] <span class="keyword">and</span> col == ep[<span class="number">1</span>]:</div><div class="line">            cnt_way += <span class="number">1</span></div><div class="line">            arrive = <span class="keyword">True</span></div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line">        <span class="comment"># up</span></div><div class="line">        row -= <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> row &gt;= <span class="number">0</span>:</div><div class="line">            queue.append((row, col))</div><div class="line"></div><div class="line">        <span class="comment"># down</span></div><div class="line">        row += <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> row &lt; N:</div><div class="line">            queue.append((row, col))</div><div class="line"></div><div class="line">        <span class="comment"># left</span></div><div class="line">        row -= <span class="number">1</span></div><div class="line">        col -= <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> col &gt;= <span class="number">0</span>:</div><div class="line">            queue.append((row, col))</div><div class="line"></div><div class="line">        <span class="comment"># right</span></div><div class="line">        col += <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> col &lt; N:</div><div class="line">            queue.append((row, col))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>基本原理跟之前的暴力法差不多，都是穷举所有可能的路径并且计数。</p>
<p>改善的地方在于，DFS是一条路走到底再去试别的路，你没办法预知先试的路是长还是短；<strong>BFS可以看作多条路同时往外挪步，后面的路肯定是比当前路要长（或者相当，起码不可能更短）</strong> ，一旦到达目标，后面更长的路可以不用直接尝试了。这里我用了一个None作为层次标记，一旦到达，只把同距离的计数完就退出。</p>
<p>但这也有代价：因为同时挪步，为了不互相影响，BFS不能像DFS标记走过的点，所以队列里其实有大量 <strong>来回步</strong> ！如果地图比较大（这样DFS有些路就要走很远才到头），而实际点与点之间比较近（BFS很快就能结束），那么这份代码是比DFS效率高一些的； 但如果反过来（譬如有些相邻点分布在对角线上两头），大量来回步造成的浪费更多，那么这种做法实际得不偿失。</p>
<h3 id="BFS-DP"><a href="#BFS-DP" class="headerlink" title="BFS + DP"></a>BFS + DP</h3><p>能不能像DFS那样也记录已走过的点，然后不重复走？</p>
<p><strong><em>TODO: 此处最好有图，mark一个，有空补</em></strong></p>
<p>不行。因为可能有多条最短路径会通过同一个点，如果一个点只能走一次，会漏算大量的路径。DFS之所以可以这么做，是因为回溯时会恢复状态，记录只是为了不走回头路，别的路径还是能通过这个点。</p>
<p>那如果我们做更详细的标记呢？譬如引入：OPEN（没走过），CLOSE（已离开） 以及 ONGOING（进行中） 三个状态。对应队列的状态，分别就是 <strong>从未进队</strong> ， <strong>已入队并出队</strong> 和 <strong>正在队列中</strong> 三种状态。</p>
<p>我们知道，BFS的特性会让 <strong>从起点起同样距离的点</strong> 一起访问完，然后才会继续尝试 + 1 距离的点，一层层往外走。那么假定从X点往外一步访问到一个Y点，并且Y的状态为：（下面的dis(X)指起点到X点的最短距离）</p>
<ol>
<li>OPEN，Y点从未被访问，直接进队并且改为ONGOING</li>
<li>CLOSE，Y点被其它点访问过，并且 <strong>Y已经在X之前</strong> 出队了，dis(Y) ≤ dis(X)， 经X再到Y这种走法，至少比之前到Y的走法要额外多一步（假定dis(Y) = dis(X)的话，至少还要加上一步；如果是 &lt; ，那就不止了），<strong>这种走法无论如何不能再产生最短路径了</strong> （划重点，请仔细体会这句话），所以Y不用再进队了</li>
<li>ONGOING，Y点被其它点访问过，并且还没出队，而X现在作为起点，说明刚刚出队，dis(Y) ≥ dis(X)，那么经X到Y这种走法，起码还是有可能存在一条最短路径的，Y点再次入队</li>
</ol>
<p>这种做法把CLOSE状态下的冗余给去掉了。因为一个点的前置节点一个是已经CLOSE掉的，所以回头路也不会存在了。</p>
<p>不过这种改进仍然是有限的，从目前的推导看，ONGOING里还是可能存在 dis(Y) = dis(X) 的情况的浪费，而且其实同一个点多次进队也是没有必要的。这种改进改动的代码不多，我就不再贴示例了。</p>
<h4 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h4><p><strong><em>如果不是为了引导问我的人一步一步考虑到这里，这种水题真想一开始直接写DP</em></strong></p>
<p>讨论DP之前，还要引入这道题具有的一个性质：以任意点为起点，相邻的点的dis值都不会相等。</p>
<p>首先我们来看一下没有障碍物的情况，下图以0处为起点，标出起点到各点的最短距离：</p>
<pre><code>3 2 1 2 3
2 1 0 1 2
3 2 1 2 3
4 3 2 3 4
5 4 3 4 5
</code></pre><p>很容易得出，无论以哪里为起点，相邻的点的dis值一定是相差1。</p>
<p>而如果我们往上放一个障碍物呢，这时 障碍物在不在从起点到终点 <strong>唯一的最短路径上</strong> 有两种情况（注意，是唯一）：</p>
<ul>
<li>不在（可能根本不在任何一条最短路径上毫无影响，也可能影响其中一条，剩下的还能走），那么依然存在这个dis值的最短路径，不改变该终点的dis值。</li>
<li>在，那么又有两种情况：<ul>
<li>绕路：由于绕路而造成的dis值增大，必然是偶数的。由于只能上下左右移动，不能对角移动，绕路产生的额外移动，都是关于障碍物对称的。</li>
<li>从旁边没有被障碍物影响的点走一步过来。由于唯一的最短路径已经被障碍物影响，剩下没被影响的点，都是dis+1，再往回走一步，就变成了dis+2。</li>
</ul>
</li>
</ul>
<p>无论是哪种情况，变动的值都是偶数。而且这个性质在连续增加障碍物的过程中依然有效。所以相邻的点dis值不可能相等，依然保持相差1。（只是说变动都是偶数而已，相差不应该是2k+1吗，为什么一定是1？这里可以思考一下why）</p>
<p>接下来说DP：</p>
<p>动态规划的做法是，定义子问题，并且找到子问题之间的状态转移方程。如果中间有子问题的解是能被多次引用，那么对子问题解的缓存就能改善运算效率。这里不打算详细说DP，直接给转移方程：（提醒一下，题目是要求最短路径的数量）</p>
<p>假设 cw(x, y) （Count Way 缩写）是 起点 到 (x, y) 这个点的最短路径的数量，那么</p>
<p>$$ cw(x, y) = \sum{ cw(x-1, y), cw(x+1, y), cw(x, y-1), cw(x, y+1)} $$</p>
<p>计算过程中，我们需要一个表，用来记录cw值（dis值由BFS特性保证）。需要额外开辟一个表吗？其实不需要，我们把上面的状态再扩展一下，变成cw值就好：cw &gt; 0 时，对应ONGOING；那么为了避免冲突，我把OPEN定义为0，CLOSE定义为-1。</p>
<p>OPEN 和 CLOSE 状态的处理都不用变，而ONGOING的处理变成对cw值大小的判断：</p>
<!-- TODO: 是否可以处理dis相等的点相邻的情况 ！？-->
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(sp, ep)</span>:</span></div><div class="line">    cnt_way = [([OPEN] * N) <span class="keyword">for</span> i <span class="keyword">in</span> range(N)]</div><div class="line">    cnt_way[sp[<span class="number">0</span>]][sp[<span class="number">1</span>]] = <span class="number">1</span></div><div class="line">    queue = [sp]</div><div class="line"></div><div class="line">    <span class="keyword">while</span> len(queue) &gt; <span class="number">0</span>:</div><div class="line">        row, col = queue.pop(<span class="number">0</span>)</div><div class="line"></div><div class="line">        <span class="comment"># legal check</span></div><div class="line">        <span class="keyword">if</span> Map[row][col] == <span class="number">9</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> row == ep[<span class="number">0</span>] <span class="keyword">and</span> col == ep[<span class="number">1</span>]:</div><div class="line">            <span class="keyword">return</span> cnt_way[ep[<span class="number">0</span>]][ep[<span class="number">1</span>]]</div><div class="line"></div><div class="line">        <span class="comment"># up</span></div><div class="line">        r = row - <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> r &gt;= <span class="number">0</span> <span class="keyword">and</span> cnt_way[r][col] != CLOSED:</div><div class="line">            <span class="keyword">if</span> cnt_way[r][col] == OPEN:</div><div class="line">                queue.append((r, col))</div><div class="line">            cnt_way[r][col] += cnt_way[row][col]</div><div class="line"></div><div class="line">        <span class="comment"># down</span></div><div class="line">        r = row + <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> r &lt; N <span class="keyword">and</span> cnt_way[r][col] != CLOSED:</div><div class="line">            <span class="keyword">if</span> cnt_way[r][col] == OPEN:</div><div class="line">                queue.append((r, col))</div><div class="line">            cnt_way[r][col] += cnt_way[row][col]</div><div class="line"></div><div class="line">        <span class="comment"># left</span></div><div class="line">        c = col - <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> c &gt;= <span class="number">0</span> <span class="keyword">and</span> cnt_way[row][c] != CLOSED:</div><div class="line">            <span class="keyword">if</span> cnt_way[row][c] == OPEN:</div><div class="line">                queue.append((row, c))</div><div class="line">            cnt_way[row][c] += cnt_way[row][col]</div><div class="line"></div><div class="line">        <span class="comment"># right</span></div><div class="line">        c = col + <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> c &lt; N <span class="keyword">and</span> cnt_way[row][c] != CLOSED:</div><div class="line">            <span class="keyword">if</span> cnt_way[row][c] == OPEN:</div><div class="line">                queue.append((row, c))</div><div class="line">            cnt_way[row][c] += cnt_way[row][col]</div><div class="line"></div><div class="line">        cnt_way[row][col] = CLOSED</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天有人跟我讨论一道水题，勾起了解题的念头。题目不难，但也有值得讨论之处。姑且以它的解题报告，开个写解题报告的头。&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="http://jaycechant.info/tags/algorithm/"/>
    
      <category term="practice" scheme="http://jaycechant.info/tags/practice/"/>
    
      <category term="solution-report" scheme="http://jaycechant.info/tags/solution-report/"/>
    
  </entry>
  
  <entry>
    <title>Python 函数和类的别名</title>
    <link href="http://jaycechant.info/2016/python-function-and-class-alias/"/>
    <id>http://jaycechant.info/2016/python-function-and-class-alias/</id>
    <published>2016-10-07T12:44:58.000Z</published>
    <updated>2016-10-28T12:56:51.873Z</updated>
    
    <content type="html"><![CDATA[<p>简单的一个小测试的记录，但因为我习惯记录前因后果，写得有点啰嗦。</p>
<a id="more"></a>
<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>我尝试把一些 C/C++ 的库用 Python 重新实现一遍（纯练习 Python 和 熟悉库的原理，实际应用当然是Python直接调用C/C++），先逐句翻译成Python代码，再根据实际情况优化。</p>
<p>struct 当然先是转成 class。然后我发现，一些结构体里反复出现的公共成员，别人会先定义一个宏来减少重复工作，类似这样：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CommonVars type1 var1; type2 var2; type3 var3</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> std_struct&#123;</div><div class="line">  CommonVars;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> struct1&#123;</div><div class="line">  CommonVars;</div><div class="line">  type4 var4;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// struct2...</span></div></pre></td></tr></table></figure>
<p>对应在Python里的一对一翻译，就是分别定义 CommonVars, StdStruct, Struct1, Struct2…  这么几个类，其中后面的都 继承 CommonVars。当然，很明显CommonVars 和 StdStruct 其实是一回事，但是为了保持跟C++代码的一一对应，我还是保留了两个类。</p>
<p>后来一想，何必继承呢，要不干脆定义完 CommonVars 之后 StdStruct = CommonVars？</p>
<h1 id="实测"><a href="#实测" class="headerlink" title="实测"></a>实测</h1><p>Python 一切皆对象，包括 函数 和 类 都是可以作为右值给变量赋值的，这样做相当与给 函数 / 类 起了别名，是可以运行的。<br>但是别名背后的运作是怎么样的呢，最好的办法就是实际试一下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/python3</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">funA</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'This is funA.'</span></div><div class="line"></div><div class="line">funB = funA</div><div class="line"></div><div class="line">print(<span class="string">'run funA:'</span>, funA())</div><div class="line">print(<span class="string">'run funB:'</span>, funB())</div><div class="line">print(<span class="string">'name of funA:'</span>, funA.__name__)</div><div class="line">print(<span class="string">'name of funB:'</span>, funB.__name__)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClsA</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">ClsB = ClsA</div><div class="line"></div><div class="line">print(<span class="string">'new ClsA:'</span>, ClsA())</div><div class="line">print(<span class="string">'new ClsB:'</span>, ClsB())</div><div class="line">print(<span class="string">'name of ClsA:'</span>, ClsA.__name__)</div><div class="line">print(<span class="string">'name of ClsB:'</span>, ClsB.__name__)</div></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ ./fun_class_alias.py</div><div class="line">run funA: This is funA.</div><div class="line">run funB: This is funA.</div><div class="line">name of funA: funA</div><div class="line">name of funB: funA</div><div class="line">new ClsA: &lt;__main__.ClsA object at 0x7f268e744278&gt;</div><div class="line">new ClsB: &lt;__main__.ClsA object at 0x7f268e744278&gt;</div><div class="line">name of ClsA: ClsA</div><div class="line">name of ClsB: ClsA</div></pre></td></tr></table></figure>
<p>结果很清晰地说明了：</p>
<ol>
<li>这样是可以正常运行的</li>
<li>别名纯粹只是个别名，是对原 函数 / 类 的一个引用，不影响实际的名字。（通过 <code>.__name__</code> 获取实际的名字，仍然是定义时那一个。），也不会改变行为</li>
</ol>
<p>但有一个问题，为什么两次获得的实例居然是一个地址？！</p>
<p>我把第二个也改为 <code>ClsA()</code> ，结果还是一样，说明跟别名无关。那按理说第二次实例化得到的地址必须不一样才对啊！想了一会，难道是因为内存回收？于是把代码改成这样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/python3</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClsA</span>:</span></div><div class="line">    _cnt = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.__class__._cnt += <span class="number">1</span></div><div class="line">        self.idx = self._cnt</div><div class="line"></div><div class="line">ClsB = ClsA</div><div class="line"></div><div class="line">insA = ClsA()</div><div class="line">print(<span class="string">'new ClsA:'</span>, insA)</div><div class="line">print(<span class="string">'idx of insA:'</span>, insA.idx)</div><div class="line"></div><div class="line">insB = ClsB()</div><div class="line">print(<span class="string">'new ClsB:'</span>, insB)</div><div class="line">print(<span class="string">'idx of insB:'</span>, insB.idx)</div></pre></td></tr></table></figure>
<p>这次地址就不一样了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">./fun_class_alias.py</div><div class="line">new ClsA: &lt;__main__.ClsA object at 0x7f8f729ccf98&gt;</div><div class="line">idx of insA: 1</div><div class="line">new ClsB: &lt;__main__.ClsA object at 0x7f8f729d2ef0&gt;</div><div class="line">idx of insB: 2</div></pre></td></tr></table></figure>
<p>这样看来，之前只是因为匿名引用之后内存被马上回收，然后下次申请的又是同一块内存，产生看起来好像是同一个实例的错觉。但只要给他们都加一个引用，就清楚了。</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>然后我又查了一下，并没有发现其他人讨论这个内容（当然也可能是关键字选得不对，欢迎留言打脸），到时在官方文档发现类似这样的一句话：在Windows上，WindowsError 是 OSError的别名。</p>
<p>于是我翻了一下Python的源码，然后又在 Windows 上测试了一下这两个Error，作为这个记录的结尾：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Python3.4.4\Objects\exceptions.c</span></div><div class="line"><span class="comment">// ...</span></div><div class="line">    INIT_ALIAS(EnvironmentError, OSError)</div><div class="line">    INIT_ALIAS(IOError, OSError)</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MS_WINDOWS</span></div><div class="line">    INIT_ALIAS(WindowsError, OSError)</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="comment">//...</span></div></pre></td></tr></table></figure>
<p>INIT_ALIAS 是一个比较复杂的宏，就不展开了，顾名思义，就是定义前者作为后者的别名。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/python3</span></div><div class="line"></div><div class="line">print(<span class="string">'OSError is:'</span>, OSError.__name__)</div><div class="line">print(<span class="string">'EnvironmentError is:'</span>, EnvironmentError.__name__)</div><div class="line">print(<span class="string">'IOError is:'</span>, IOError.__name__)</div><div class="line">print(<span class="string">'WindowsError is:'</span>, WindowsError.__name__)</div></pre></td></tr></table></figure>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; py test_WindowsError.py</div><div class="line">OSError is: OSError</div><div class="line">EnvironmentError is: OSError</div><div class="line">IOError is: OSError</div><div class="line">WindowsError is: OSError</div></pre></td></tr></table></figure>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的一个小测试的记录，但因为我习惯记录前因后果，写得有点啰嗦。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://jaycechant.info/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>用Syncthing备份的一些技巧</title>
    <link href="http://jaycechant.info/2016/backup-tips-about-syncthing/"/>
    <id>http://jaycechant.info/2016/backup-tips-about-syncthing/</id>
    <published>2016-08-28T07:57:03.000Z</published>
    <updated>2017-01-09T15:34:26.286Z</updated>
    
    <content type="html"><![CDATA[<p>出于对国内网盘服务的 防黑技术、职业操守 以及 对于 看不见的手的 不信任，我以前一直用dropbox。</p>
<p>后来dropbox被墙了，我就科学地继续用。再后来墙升级了，我也忙起来没空研究新科学了，也就慢慢不怎么登陆dropbox。然后就转用一些国内的服务，当然只放无关痛痒的东西，重要信息只好手机里加密随身带。（这时还发现了一个国内网盘的新坑点：风一来谁都凑热闹做，风一走一个一个都嚷嚷着停止服务……）</p>
<p>前几个月忽然想起dropbox，登陆时发现……太久不用帐号被停了，而且连恢复期也过了。还好文件在本地都有。</p>
<p>继续对国内服务不信任，开始关注BTSync。结果发现虽然基础服务免费，但毕竟是个商业服务。我现在连商业服务也慢慢不信任了（过几年你撂挑子了怎么办），最后选择了开源（而且跨平台，连Android都有client）的 <strong>Syncthing</strong>。</p>
<a id="more"></a>
<p>我不打算从头讲怎么用，毕竟一搜一大把，而且用起来真的很傻瓜。</p>
<p>譬如小众这篇就已经讲得听清楚的了： <a href="http://www.appinn.com/syncthing/" target="_blank" rel="external">Syncthing – 数据同步新选择，手把手教你做自己的网盘</a></p>
<p>我这里只记录我自己遇到困难，在网上没有找到解决方案（起码我没搜到），最后自己琢磨解决的情况。还有一些不起眼的网上没有提到的坑。说白了给自己留记录。</p>
<h2 id="单向备份的设置"><a href="#单向备份的设置" class="headerlink" title="单向备份的设置"></a>单向备份的设置</h2><p>dropbox 也好，别的网盘也好，包括这个连名字都叫做 Sync-thing，最基本的需求是同步。也就是几个设备上对应的目录，内容要保持一致，任意一个目录的 “增-删-改”，都要同步到别的设备去。</p>
<p>但并不总是这样。以我自己为例，平时拿着手机乱拍一通，很快手机就塞满了照片。（帮前东家做个广告，三星Galaxy S7的拍照效果真好，欲罢不能）我需要把照片存放起来，然后手机上删掉，释放有限的空间。多数网盘都有自动备份功能，可惜我信不过它们。我又不想整天连电脑，自然照片的文件夹就加入了Syncthing的监控中。</p>
<p>实际使用中，发现了“同步”存在的问题：</p>
<ol>
<li><p>照片一旦从手机同步到了电脑（或者私有云），大多数就要删掉省空间了。<br> 但是，等等，任何操作都会同步，包括“删”这个动作……但是手机上不能删的话，就没有意义了呀……</p>
</li>
<li><p>电脑那边，出于归档的需要，会对照片重新分目录，编辑，一些不需要的照片删掉（不需要存档，但手机上可能刚好有用，譬如拍下明天的购物单），这些操作也不想同步回手机…</p>
</li>
</ol>
<h3 id="主目录-Master"><a href="#主目录-Master" class="headerlink" title="主目录 Master"></a>主目录 Master</h3><p>然后我在设置里发现了 “主目录” 这个选项，特意翻了文档：意思是主目录的文件可以同步到别的关联目录（主 -&gt; 普通  自动sync），但是关联目录的修改只会对比，默认不会覆盖 （普通 -&gt; 主  覆盖需要手动确认）。</p>
<p>基于上面两点需求，我把手机和电脑的目录分别都设为了 “主目录”，这样他们不会自动同步，都需要我确认。</p>
<h3 id="IgnoreDelete"><a href="#IgnoreDelete" class="headerlink" title="IgnoreDelete"></a>IgnoreDelete</h3><p>问题解决了吗？ - 并没有。</p>
<p>因为 “普通 -&gt; 主” 虽然是手动确认，但选择粒度只有 不同步 / 完全覆盖 两个选项。（题外话，Overwrite changes 被错误翻译成了 “撤销修改”）。其实稍微看一下高级设置或者配置文件就会发现，所谓的主目录，本质上就是一个 “readonly” 目录，区别于普通目录的权限是 “readwrite”…</p>
<p>对于2，基本是解决了，因为实际上这不是同步，而是手机到电脑的 “单向备份”，对我来说，几乎没有电脑同步回手机的时候。偶尔需要传图或者文件，我会用另外的文件夹，没必要用图片目录。</p>
<p>但是 1 就不行了。不同步就没办法备份新照片，同步就意味着手机删掉的图片电脑上也会没掉。</p>
<p>这时我在高级设置发现了一个选项 “ignoreDelete”。名字猜到了一二，再看文档，确定了功能：</p>
<p>设置为 “ignoreDelete” 的目录，只同步删除以外的操作。换言之，别的设备上删掉的文件，不会影响当前设备。</p>
<p>手机图片目录： 主目录<br>电脑备份目录：ignoreDelete</p>
<p>这样，手机上任何 新增/修改 的图片都会备份到电脑上，但是手机上为了省空间删除却完全不影响电脑。</p>
<h2 id="移动文件夹"><a href="#移动文件夹" class="headerlink" title="移动文件夹"></a>移动文件夹</h2><p>一般来说，要同步的文件夹都比较重要，所以放的位置应该也相对固定。</p>
<p>但是，偶尔在整理的时候，还是会觉得自己之前放得不合理，想动一下。<br>譬如我之前在主目录下放了一堆各种格式文档的同步目录，后来一想太乱了，这些目录应该都作为文档目录的子目录。</p>
<p>已经同步了，怎么办？在文件夹选项里，发现路径是不能改的。</p>
<p>一开始我的办法只好是，<strong>在Syncthing里移除 &gt; 文件夹挪位置 &gt; 把新位置重新添加</strong>。</p>
<p>这样有一些问题。我就不说如果文件大的话，重新添加会浪费扫描的时间，毕竟那是电脑干的活；就说重新添加时要重新填文件夹的设置，也够烦的了。不就是挪个位置吗？！</p>
<p>其实，高级设置里可以改。</p>
<p>改之前建议把<strong>扫描间隔调大，手动点一下扫描</strong>，以确保操作期间不会扫描和同步；然后 <strong>改路径</strong> 和  <strong>挪文件</strong> 的先后貌似倒没关系，两边都改好之后，重新点一下扫描，正常情况下应该是什么操作都不会触发。</p>
<p>如果这两个修改只完成了一个的情况下，触发了扫描，我估计会被以为删除，触发同步。至于是把删除操作同步出去，还是重新下载，<strong>我没实际试</strong>，大家可以实际试一下我的猜想是否正确。</p>
<p>To be continued…</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;出于对国内网盘服务的 防黑技术、职业操守 以及 对于 看不见的手的 不信任，我以前一直用dropbox。&lt;/p&gt;
&lt;p&gt;后来dropbox被墙了，我就科学地继续用。再后来墙升级了，我也忙起来没空研究新科学了，也就慢慢不怎么登陆dropbox。然后就转用一些国内的服务，当然只放无关痛痒的东西，重要信息只好手机里加密随身带。（这时还发现了一个国内网盘的新坑点：风一来谁都凑热闹做，风一走一个一个都嚷嚷着停止服务……）&lt;/p&gt;
&lt;p&gt;前几个月忽然想起dropbox，登陆时发现……太久不用帐号被停了，而且连恢复期也过了。还好文件在本地都有。&lt;/p&gt;
&lt;p&gt;继续对国内服务不信任，开始关注BTSync。结果发现虽然基础服务免费，但毕竟是个商业服务。我现在连商业服务也慢慢不信任了（过几年你撂挑子了怎么办），最后选择了开源（而且跨平台，连Android都有client）的 &lt;strong&gt;Syncthing&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Syncthing" scheme="http://jaycechant.info/tags/Syncthing/"/>
    
      <category term="skill" scheme="http://jaycechant.info/tags/skill/"/>
    
      <category term="dropbox" scheme="http://jaycechant.info/tags/dropbox/"/>
    
      <category term="netdisk" scheme="http://jaycechant.info/tags/netdisk/"/>
    
  </entry>
  
</feed>
