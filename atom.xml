<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jayce&#39;s Tech Blog</title>
  <subtitle>一个软件开发新丁的折腾笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jaycechant.info/"/>
  <updated>2016-12-24T02:39:48.248Z</updated>
  <id>http://jaycechant.info/</id>
  
  <author>
    <name>Jayce S. Chant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CentOS 一些好用的特性</title>
    <link href="http://jaycechant.info/2016/some-good-features-on-CentOS/"/>
    <id>http://jaycechant.info/2016/some-good-features-on-CentOS/</id>
    <published>2016-12-23T06:12:46.000Z</published>
    <updated>2016-12-24T02:39:48.248Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文纯属凑数水文，一为保持发博文习惯，二为重新配置了hexo之后发文测试，暂无干货，敬请回避</em></p>
<a id="more"></a>
<p>从 7.10 开始，Ubuntu 一直是我 Linux 系统的首选。大学里面出于学习需要，也一度接触过Redhat，但实在喜欢不起来。</p>
<p>这是自然的，因为我一直的需求都是一台Desktop PC，偶尔做一些Linux环境下的开发练习，并非一个面向生产的Linux环境。好看、易用、乃至新奇有趣放在了第一位，作为从Windows的使用习惯过渡的用户，Ubuntu 很长一段时间里是最合适的。</p>
<p>到了大学高年级，因为学习Web开发的需要，也搭建过一个CentOS的服务器，但仍然是非常不习惯，最后还是不了了之。</p>
<hr>
<p>可是到了工作之后，再折腾Linux，都是有比较明确的开发目的了。这时重新配置Ubuntu，开始感觉到一些不便。譬如说Ubuntu使用的工具不太稳定，在不同版本之间替换组件比较频繁；镜像需要手动选择，最多在选择的时候测试一次。在中国这样的网络环境下，镜像速度测试时效性非常短，我测得最快的镜像，波兰、德国慢地球飞，就是不在中国大陆；但真等到要下载，刚刚最快的那个镜像可能连不上了。</p>
<p>最近为了搭一个试验环境，用来在正式的阿里云环境部署之前，在本地先练手。阿里云安装的是自带的Aliyun Linux，网上没找到下载。得知它基于RHEL，所以重新拿起了CentOS，结果发现非常顺手。</p>
<p>第一个是 yum。yum 是 Redhat 系的包管理器，基于rpm，对应ubuntu 系的apt-get。幸福感的来源，是CentOS 7 上的yum 自带 fastestmirror 插件，每次下载，先自动跑一下判断最快的镜像，然后再下载，最大地保证了镜像测试的有效，下载速度非常快速。</p>
<p>第二个是systemctl 取代了 init.d 让服务配置简化了许多。</p>
<p>对于用ssh登录，不需要GUI的web server，果然Redhat 系更合适啊。</p>
<p><a href="https://wiki.centos.org/PackageManagement/Yum/FastestMirror" target="_blank" rel="external">https://wiki.centos.org/PackageManagement/Yum/FastestMirror</a></p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文纯属凑数水文，一为保持发博文习惯，二为重新配置了hexo之后发文测试，暂无干货，敬请回避&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>刷OJ的技巧</title>
    <link href="http://jaycechant.info/2016/skills-on-OJ/"/>
    <id>http://jaycechant.info/2016/skills-on-OJ/</id>
    <published>2016-12-09T01:35:03.000Z</published>
    <updated>2016-12-18T13:16:25.953Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在三星广研待了四年，兼任了两年半内训讲师，其实整理过很多培训资料，却因为安保绝大多数无法带走。里面无关保密部分，一直想重新整理出来，留一个记录。</p>
<p>可仅凭手头遗留的一些纸质资料和记忆，时隔越久越难恢复了。只能怪我在三星期间没有坚持回家写技术博客。</p>
<p>先从容易的开始吧。<br>我写过一篇汇总，主要是在OJ系统上刷题提交 以及 应对三星内部软件考试的技巧，部分是针对考试的小聪明，但也有很多其实是通用的coding技巧。因为是针对当时的学员常见错误写的，内容很乱没什么章法。以下是整理恢复的正文：</p>
</blockquote>
<a id="more"></a>
<h1 id="1-测试数据的输入输出重定向"><a href="#1-测试数据的输入输出重定向" class="headerlink" title="1 测试数据的输入输出重定向"></a>1 测试数据的输入输出重定向</h1><p>很多人在调试的过程中，都是一个字符一个字符地手动输入测试数据，然后对着小黑窗一个一个地核对答案的正确性。</p>
<p>这样做缺点很明显：</p>
<ul>
<li>效率低，容易出错（包括输入输错，和输出核对出错）</li>
<li>没有办法测一些压力比较大的数据，譬如问题范围达到千级别，手输基本没法测</li>
<li>一些数据修改之后又重新测，反复手敲浪费时间</li>
<li>代码修改前后的输出结果很难比较</li>
</ul>
<p>解决方法就是，将输入输出重定向到文件上。</p>
<p>这样做，输入数据生成一次可以反复测，需要大的测试数据，可以写一个for循环加随机数生成放文件里。</p>
<p>输出的结果，可以每次换一个文件名存着，方便前后对比代码修改的效果。</p>
<p>上代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span> <span class="comment">// freopen() 就包含在这个库里</span></span></div><div class="line"></div><div class="line">freopen(<span class="string">"in1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">freopen(<span class="string">"out1-1.txt"</span>,<span class="string">"w"</span>, <span class="built_in">stdout</span>);</div></pre></td></tr></table></figure>
<h1 id="2-输出缓冲区置空"><a href="#2-输出缓冲区置空" class="headerlink" title="2 输出缓冲区置空"></a>2 输出缓冲区置空</h1><p>这个官方的代码模板里一般都自带，但是很多人不知道它放在那里干什么：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</div></pre></td></tr></table></figure>
<p>其实这段代码的作用就是把输出缓冲区置为空，这样任何输出都会马上输出到终端或者文件。</p>
<p>如果程序能保证执行完，那么这个缓冲区的大小是不会影响最终结果的，只是缓冲区大的话会减少输出的频率，提高一点点IO的效率。</p>
<p>但反过来，如果程序可能有潜在的bug，不一定能执行完，那么把缓冲区置空就能尽可能地输出已经完成的结果，<s>尽可能地多拿一部分的分</s>（由于新的考试形式只有一题，而且要求全对，这个技巧可能没有用武之地了）。</p>
<h1 id="3-调试宏"><a href="#3-调试宏" class="headerlink" title="3 调试宏"></a>3 调试宏</h1><p>有些题目比较复杂，需要额外增加一些log来调试。但往往调试完大家会忘了把log给 <strong>注释掉/删掉</strong>，以至于有多余输出引起答案错误。而即使你记得，从复杂的代码中一点一点地把log找出来也是吃力不讨好，还容易漏。</p>
<p>这时候，把调试代码加上条件编译，并用宏控制开关，就是比较省力的做法了：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG (1) <span class="comment">// before you submit, change it to 0</span></span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></div><div class="line"></div><div class="line"><span class="comment">// do something for debuging</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// DEBUG</span></span></div></pre></td></tr></table></figure>
<p>一般的题目，我个人喜欢用 <code>DEBUG_IO</code> 和 <code>DEBUG_LOG</code> 两个宏，分别控制IO重定向（见技巧1），和log的输出。</p>
<p>这种技巧在生产代码中也是随处可见的，所以大家应该不难理解，只是有时候想不起来把它用起来。</p>
<h1 id="4-“函数”-宏"><a href="#4-“函数”-宏" class="headerlink" title="4 “函数” 宏"></a>4 “函数” 宏</h1><p>对于一些反复出现的算式，手敲累且容易错，写函数又显得没必要，可以写成宏的形式。  </p>
<p>如两者取较大值：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a, b)   ((a) &gt; (b) ? (a) : (b))</span></div></pre></td></tr></table></figure>
<p>不过，请注意：</p>
<ol>
<li>这终究不是函数，只是宏展开（相当于预编译器做了一次查找替换），实际行为跟函数差异很大，如果复杂的式子，请还是写成函数；如果使用C++，可以写成 <strong>inline</strong> 的形式。</li>
<li>为了避免展开后优先级的问题，请务必在变量外加一层括号。这不仅在这里推荐，所有宏都推荐这样做，来保证在最终展开的地方能够有正确的优先级。</li>
</ol>
<p>试考虑这样的宏：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MULTIPY(a, b)   (a * b)</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> res = MULTIPY(<span class="number">1</span> + <span class="number">2</span>, <span class="number">3</span> + <span class="number">4</span>)</div></pre></td></tr></table></figure>
<p>res 的结果是多少？ <code>3 * 7 = 21</code> 吗？<br>实际上展开之后的表达式是<code>int res = (1 + 2 * 3 + 4)</code> ,  因为乘法优先，结果是11。</p>
<p>如果写成以下的样子就不会有问题了：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MULTIPY(a, b)   ((a) * (b))</span></div></pre></td></tr></table></figure>
<h1 id="5-规避比较语句中误用等号"><a href="#5-规避比较语句中误用等号" class="headerlink" title="5 规避比较语句中误用等号"></a>5 规避比较语句中误用等号</h1><p><em>*该技巧出自《C专家编程》</em></p>
<p>试看这样一段代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// count the number of 7 in array</span></div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">array</span>[i] = <span class="number">7</span>)</div><div class="line">    &#123;</div><div class="line">        count++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很普通的一段统计次数的代码。</p>
<p>一切看起来都很正常。</p>
<p>大家先不要急着往下看。</p>
<p>看完这段代码，大家能第一时间发现问题吗？</p>
<p>……</p>
<p><code>if(array[i] = 7)</code></p>
<p>这个判断永远是真的（这个语句取左值，也就是array[i]的值。而array[i]被赋值成7，在C里面，非零的量都当做真），<br>所以结果是，数组的所有元素都成了7，也统计了数组大小这么多个7……</p>
<p>如果养成习惯，在比较时将 <strong>常量 / 字面量</strong>  放在前面，像这样：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// count the number of 7 in array</span></div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="number">7</span> = <span class="built_in">array</span>[i]) <span class="comment">// !!compile error here</span></div><div class="line">    &#123;</div><div class="line">        count++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为常量 / 字面量 不能被赋值，所以是会直接编译失败的，而且编译器还直接指出了错误的行数。</p>
<h1 id="6-预先计算-查表-大幅减少程序运行时间"><a href="#6-预先计算-查表-大幅减少程序运行时间" class="headerlink" title="6 预先计算 + 查表 大幅减少程序运行时间"></a>6 预先计算 + 查表 大幅减少程序运行时间</h1><p><em>*该技巧出自《Code complete》</em></p>
<blockquote>
<p>在算法里，预先计算（Precomputation）是指在实际运行程序之前，使用初始化运算，生成一个查询表（lookup table）供算法引用，以避免每次运行程序时重复计算这些数据。<br>——翻译自英文维基Precomputation词条</p>
</blockquote>
<p>假设内存用之不尽，又有足够的时间提前准备，那么速度最快的算法应该就是 <strong>“预先计算 + 查表”</strong> 无疑。</p>
<p>试想我们已经有了所有情况的答案，你一问，我马上就能回答。</p>
<p><strong>“无限内存 + 无限准备时间”</strong> 这个前提当然是不可能成立的，所以我们也没办法拿这种做法当万金油。</p>
<p>但是对于某些特定问题，可能的情况如此之少，以至于我们可以把 中间结果 甚至 最终结果 先存起来，运行时直接查表。</p>
<h2 id="筛选素数-是-比较经典的例子。"><a href="#筛选素数-是-比较经典的例子。" class="headerlink" title="筛选素数 是 比较经典的例子。"></a>筛选素数 是 比较经典的例子。</h2><p>假设我们的任务要 判断 1’000 个 1’000’000（不用数0了，一百万） 以内 的自然数是否素数：</p>
<ol>
<li>如果逐个判断（对<strong>每个数</strong>，判断 <strong>每一个</strong> 比它小的数能否整除），显然太慢了。<br>（时间复杂度为O(n*k)，空间复杂度为O(1)，其中k = 1’000, n = 1’000’000，下同）</li>
<li>如果预先计算并保存每一个数 <strong>是否</strong> 素数，时间上变成了可以随机访问马上得到结果，但显然太浪费空间了。<br>（一百万大小的数组，只有其中1’000个元素有用。时间复杂度成了O(k)，空间复杂度又成了 O(n)）</li>
<li>其实素数的分布相当稀疏，在 <strong>一百万以内，一共只有78’498个</strong> 素数 （7.85%）。如果我们按顺序存储这些素数，然后拿到一个数之后再数组里折半查找，就可以知道这个数是否素数了。<br>(时间复杂度为 O(k * log m)，空间复杂度为O(m)，其中m = 78’498, log m 约为 16)</li>
<li>可是如果给的内存限制，连78’498个数都存不下呢？其实存168个就够了。<br><strong>1’000以内的素数一共168个</strong>。对于任意一个数x, 2 到 根号x 之间的所有素数，构成了对 x 的素数筛。换言之1’000以内的素数，就构成了1’000’000这个范围的素数筛。<br>所以这168个素数，足以筛选一百万以内的任意一个整数。<br>（时间复杂度为 O(k * l)， 空间复杂度为 O(l)，其中 l = 168）</li>
</ol>
<p>如果你追求 <strong>极致的时间要求，内存随便</strong>，当然可以选择方案2。<br>还是 <strong>追求时间尽可能短，但内存不够</strong> 方案2的要求，可以选择方案3。<br>但多数情况下，方案4是 在 <strong>时间 和 空间 都比较平衡</strong> 的一个方案。</p>
<p>这个例子同时也说明了，<strong>很多时候不存在完美方案</strong>，即使算法，也是<strong>各种资源的折衷</strong>。需要根据面临的主要矛盾，来选择<strong>合适的解决方案</strong>。</p>
<p>顺便附上一个输出素数的小脚本。（预先计算因为没有语言限制，建议使用Python, js 等易于编写功能强大的 动态脚本语言。考虑到大家可能没有Python坏境，这里给了一个js的版本。）<br>原理很简单，初始化一个 素数筛，里面一开始只有2（换言之，只能判断不大于4的数是否素数）。<br>然后从3开始，对每个奇数（除2以外的偶数都不是素数）用素数筛筛一遍，如果是素数，就加入素数筛。<br>代码足够短小简单（很容易背下来），效率也还过得去，正好可以在需要 素数表 的题目里，用来做预先计算。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// js script</span></div><div class="line"><span class="comment">// for given range, return all prime numbers that not greater than range</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPrimeNumList</span>(<span class="params">range</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> list = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    list.push(<span class="number">2</span>);</div><div class="line">    <span class="keyword">var</span> n = <span class="number">3</span>; <span class="comment">// the num start to be tested</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> (n &lt;= range) &#123;</div><div class="line">        <span class="keyword">var</span> i = <span class="number">0</span>; <span class="comment">// list index</span></div><div class="line">        <span class="keyword">var</span> r = <span class="built_in">Math</span>.sqrt(n); <span class="comment">// square root of n</span></div><div class="line">    </div><div class="line">        <span class="keyword">while</span> (list[i] &lt; r) &#123;</div><div class="line">            <span class="keyword">if</span> (n % list[i] == <span class="number">0</span>) <span class="comment">// if n can be divided, break</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                i++;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        <span class="keyword">if</span> (list[i] &gt; r) <span class="comment">// if list[i] &gt; r, it means that never break</span></div><div class="line">            list.push(n); <span class="comment">// n is a PRIME number</span></div><div class="line"></div><div class="line">        n = n + <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> list;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="7-表驱动法-实现状态转移"><a href="#7-表驱动法-实现状态转移" class="headerlink" title="7 表驱动法 实现状态转移"></a>7 表驱动法 实现状态转移</h1><p><em>*该技巧出自《Code complete》</em></p>
<p>查表法 除了可以用来引用 预先计算 的数据，还能用来实现状态的判断转移。</p>
<p>大多数场合，连续的 if-else 或 switch-case，都是不断复制黏贴的类似代码片段。<br>这样的代码，一旦需要修改，要在多个地方做类似修改，可维护性非常差。<br>实际上这是没有好好 运用 合适的 数据结构 的结果。  </p>
<p>而将状态之间的映射关系 预先 存放在 表里面，并实现维护一段查表的算法，<strong>正是对“数据结构 + 算法 = 程序” 的一种实践</strong>。</p>
<p>以 <a href="http://poj.org/problem?id=1002" target="_blank" rel="external">POJ1002</a> 作为例子：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> mapping[] =</div><div class="line">&#123;</div><div class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="comment">// digit 0~9, ASCII 48~57</span></div><div class="line">    NA, NA, NA, NA, NA, NA, NA, <span class="comment">// ASCII 58~64</span></div><div class="line">    <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="comment">// A~Y, Q = NA</span></div><div class="line">    <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>,</div><div class="line">    <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>,</div><div class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</div><div class="line">    <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>,</div><div class="line">    <span class="number">7</span>, NA, <span class="number">7</span>, <span class="number">7</span>,</div><div class="line">    <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>,</div><div class="line">    <span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">main()&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, buf);</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">0</span>, num = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(k &lt; <span class="number">7</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> c = buf[j++] - <span class="string">'0'</span>;</div><div class="line">        <span class="keyword">int</span> x;</div><div class="line">        <span class="keyword">if</span>(<span class="number">0</span> &lt;= c &amp;&amp; MAPSIZE &gt; c &amp;&amp; NA != (x = mapping[c]))</div><div class="line">        &#123;</div><div class="line">            num = num * <span class="number">10</span> + x;</div><div class="line">            k++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    cnt[num]++;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，在构建好 数据表 之后，核心的查询代码 只有一行（这个例子里，x 是我们需要的值）：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="number">0</span> &lt;= c &amp;&amp; MAPSIZE &gt; c &amp;&amp; NA != (x = mapping[c]))</div><div class="line">&#123;</div><div class="line">    <span class="comment">// use x to do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="8-备忘录方法"><a href="#8-备忘录方法" class="headerlink" title="8 备忘录方法"></a>8 备忘录方法</h1><p>提到了 预先计算 和 查表，就不得不顺便介绍一下 <strong>备忘录方法</strong></p>
<p>大多数时候 <strong>备忘录方法</strong> 都是用来跟 动态规划 作对比。<br>这两种方法都是应用于这样的情况：</p>
<ol>
<li>问题可以分解成多个子问题</li>
<li>有重复子问题</li>
</ol>
<p>所以为了避免重复计算的浪费，两种方法都会开辟一个数组用来存放子问题的解。<br>区别在于</p>
<ul>
<li>动态规划 是自底向上的计算，先计算最小的子问题的解，然后逐渐组合出更复杂的子问题的的解，最后得出原问题的解。因为是从最小的字问题开始计算，可能部分子问题的解是没有派上用场的，因为在计算的时候还不知道哪些会被引用。</li>
<li><strong>备忘录方法</strong> 是自顶向下的，多数情况下是一个递归结构：先计算原问题，里面引用到子问题时，递归计算子问题……直到全部子问题都有解，再在返回里面组合成原问题的解。这里面， <strong>备忘录方法</strong>的优化在于，一旦一个子问题被解决过，就把解缓存起来，以后再引用就直接读取不再计算。</li>
</ul>
<p>拿 <a href="http://poj.org/problem?id=1243" target="_blank" rel="external">POJ1243</a> 举例</p>
<p>动态规划：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//...</span></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= G; i++) &#123;</div><div class="line">    DP[i][<span class="number">0</span>] = i;</div><div class="line">    DP[<span class="number">0</span>][i] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i&lt;= G; i++) &#123;</div><div class="line">    <span class="keyword">for</span>(j = <span class="number">1</span>; j&lt;= L; j++) &#123;</div><div class="line">        DP[i][j] = DP[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span> + DP[i<span class="number">-1</span>][j];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在计算过一次(G, L)之后，所有比G, L 小的(g, l) 对的解都可以在DP数组中找到。不过多个case里面G, L的值的大小并不确定。所以遇到新的G, L又要再算一遍是一种浪费。</p>
<p>备忘录方法：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getRange</span><span class="params">(<span class="keyword">int</span> g, <span class="keyword">int</span> l)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="number">0</span> == Memo[g][l]) &#123;</div><div class="line">        <span class="comment">// compute it only when it has no result</span></div><div class="line">        Memo[g][l] = getRange(guess - <span class="number">1</span>, life)</div><div class="line">            + <span class="number">1</span></div><div class="line">            + getRange(guess - <span class="number">1</span>, life - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> Memo[g][l];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= MAX; i++) &#123;</div><div class="line">    Memo[i][<span class="number">0</span>] = i;</div><div class="line">    Memo[<span class="number">1</span>][i] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">getRange(g, l);</div></pre></td></tr></table></figure>
<p>你会发现这道题在case很多而且g, l大小没有顺序时，备忘录方法的效果会更好。（其实这道题也可以预先计算，才30*30的规模）</p>
<p>当然，这道题属于比较特殊的情况，两种方法都能用。<br>一部分问题 由于引用哪个子问题的解，取决于子问题的解之间的比较，只能先算最小的子问题，只能自底向上，只能动态规划。</p>
<p>而有些题目，实际引用的子问题数占全部子问题数的很少一部分，这时，动态规划把全部子问题算一遍是一种很大的浪费，备忘录是一种更好的选择。</p>
<p>说了这么多好像很复杂，其实 <strong>备忘录方法</strong> 的核心思想只有一句话： <strong>子问题太多，只在第一次引用时算一次，也只算这一次。</strong></p>
<p>预先计算是：情况这么少，编译前就全算好了。（提前计算）<br>动态规划是：从最小的子问题开始向上组合，用小的子问题组合出大的子问题，直到原问题。全部子问题都算且只算一次。（从小到大，全部都算）<br>而备忘录方法：从原问题开始，向下分解，不用不算，只算一次。（推迟计算）</p>
<h1 id="9-邻接矩阵-VS-邻接表-VS-其他图存储法"><a href="#9-邻接矩阵-VS-邻接表-VS-其他图存储法" class="headerlink" title="9 邻接矩阵 VS 邻接表 VS 其他图存储法"></a>9 邻接矩阵 VS 邻接表 VS 其他图存储法</h1><p>不同的 图 问题怎么解先按下不表，但是图的存储总是绕不开的问题。</p>
<p>那么最常用的两种表示方法，究竟用 <strong>邻接矩阵</strong> 还是 <strong>邻接表</strong> 呢？ 还有什么表示方法呢？ 分别有什么优缺点，要注意什么呢？</p>
<p>（<em> 为了方便讨论，下面统一用 V 代表顶点数， v 代表一个顶点， E 代表边数， e 代表一条边。<em>*图默认都是无向图，所以是双向操作；如果有向图，请省略反向操作。</em></em> 另外，为了简便，代码是精简过的伪代码。）</p>
<h2 id="边集数组"><a href="#边集数组" class="headerlink" title="边集数组"></a>边集数组</h2><p>在讲那两种主要的存储方式之前，先提一下边集数组。</p>
<p>所谓边集数组，就是用数组记录每条边的两个顶点。部分题目由于input的方式就是给出每条边的两个顶点，所以sample代码里的存储方式默认就是给了边集数组。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// edge array</span></div><div class="line"><span class="keyword">int</span> A[MAX_E];</div><div class="line"><span class="keyword">int</span> B[MAX_E];</div><div class="line"><span class="keyword">int</span> Weight[MAX_E]; <span class="comment">// skip if unweighted graph</span></div><div class="line"><span class="comment">// int Edge[MAX_E][3]; // you can make into 1 array too, [0]-from, [1]-to, [2]-weight</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>(e: <span class="number">1</span> ~ E)&#123;</div><div class="line">    <span class="comment">// input va， vb, weight</span></div><div class="line">    A[e] = va;</div><div class="line">    B[e] = vb;</div><div class="line">    Weight[e] = weight;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优点：</p>
<ul>
<li>固定使用MAX_E的空间，对于 E &lt;&lt; V ^ 2 的图（边数远小于顶点的平方，即，稀疏图），空间上很节省。</li>
<li>方便对边遍历。</li>
</ul>
<p>缺点：</p>
<ul>
<li>不能随机访问，对顶点遍历效率很低。</li>
</ul>
<h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h2><p>因为直观、实现方便，加上正式考试对内存的限制比较宽松，这应该是大家最常用的表示方式。</p>
<p>示例代码给出了两种输入处理： 1是处理以邻接矩阵给出的数据，2是处理以边表的方式给出数据。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// adjacent matrix</span></div><div class="line"><span class="keyword">int</span> AdjMat[MAX_V][MAX_V]; <span class="comment">// you can use bool for connected or not, and int for weight.</span></div><div class="line"></div><div class="line"><span class="comment">// input method 1 (input from matrix)</span></div><div class="line"><span class="keyword">for</span>(va: <span class="number">1</span> ~ V)&#123;</div><div class="line">    <span class="keyword">for</span>(vb: <span class="number">1</span> ~ V)&#123;</div><div class="line">        <span class="comment">// input weight</span></div><div class="line">        AdjMat[va][vb] = weight;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// input method 2 (input from edge array)</span></div><div class="line"><span class="comment">// init</span></div><div class="line"><span class="keyword">for</span>(va: <span class="number">1</span> ~ V)&#123;</div><div class="line">    <span class="keyword">for</span>(vb: <span class="number">1</span> ~ V)&#123;</div><div class="line">        AdjMat[va][vb] = DEFAULT; <span class="comment">// Define your default value, maybe 0 or -1.</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(e: <span class="number">1</span> ~ E)&#123;</div><div class="line">    <span class="comment">// intput va, vb, weight</span></div><div class="line">    AdjMat[va][vb] = weight;</div><div class="line">    AdjMat[vb][va] = weight; <span class="comment">// set this only when it's undirected graph</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优点：</p>
<ul>
<li>实现简单（二维数组），容易理解</li>
<li>可以随机访问。亦即，知道任意from, to的值，都可以马上判断是否连通。</li>
</ul>
<p>缺点：</p>
<ul>
<li>固定使用MAX_V ^ 2的空间，对于稀疏图，空间上是很大的浪费。（不过由于考试多数够空间，很多时候这个缺点可以忽略）</li>
<li>遍历效率低。跟随机访问相反，如果要遍历from能到的所有to点，就不得不将from所在行遍历一次，在稀疏图中，会导致遍历的效率很低。而恰恰很多算法都需要做遍历。</li>
</ul>
<h2 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h2><p>邻接表比邻接矩阵稍复杂一些，一般要用到变长数组vector。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// adjacent list - based on vector</span></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; AdjList[MAX_V];</div><div class="line"></div><div class="line"><span class="comment">// input</span></div><div class="line"><span class="keyword">for</span>(e: <span class="number">1</span> ~ E)&#123;</div><div class="line">    <span class="comment">// input va, vb</span></div><div class="line">    AdjList[va].push_back(vb);</div><div class="line">    AdjList[vb].push_back(va);</div><div class="line">    <span class="comment">// AdjList[va].push_back(weight); // If it's weighted graph, you can push weight right after vb.</span></div><div class="line">    <span class="comment">// AdjList[vb].push_back(weight);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你可能会问，库不是不给用了吗？其实基于边集数组可以改写成邻接表， 本质上就是用Next数组将边集数组串联起来。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// adjacent list - based on edge array</span></div><div class="line"><span class="keyword">int</span> Head[MAX_V];</div><div class="line"><span class="keyword">int</span> Tail[MAX_V];</div><div class="line"><span class="keyword">int</span> Next[MAX_E];</div><div class="line"><span class="keyword">int</span> To[MAX_E * <span class="number">2</span>]; <span class="comment">// size * 2 for reverse edge</span></div><div class="line"><span class="keyword">int</span> Weight[MAX_E]; <span class="comment">// skip if unweighted graph</span></div><div class="line"></div><div class="line">E_counter = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(e: <span class="number">1</span> ~ E)&#123;</div><div class="line">    <span class="comment">// input va， vb, weight</span></div><div class="line">    <span class="comment">// process va -&gt; vb</span></div><div class="line">    To[E_counter] = vb;</div><div class="line">    Weight[E_counter] = weight;</div><div class="line">    <span class="keyword">if</span>(Head[va] == DEFAULT)&#123;</div><div class="line">        Head[va] = E_counter;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Next[Tail[va]] = E_counter;</div><div class="line">    &#125;</div><div class="line">    Tail[va] = E_counter;</div><div class="line">    E_counter++;</div><div class="line"></div><div class="line">    <span class="comment">// process vb -&gt; va</span></div><div class="line">    To[E_counter] = va;</div><div class="line">    Weight[E_counter] = weight;</div><div class="line">    <span class="keyword">if</span>(Head[vb] == DEFAULT)&#123;</div><div class="line">        Head[vb] = E_counter;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Next[Tail[vb]] = E_counter;</div><div class="line">    &#125;</div><div class="line">    Tail[vb] = E_counter;</div><div class="line">    E_counter++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而如果不为了省内存，只是为了加快遍历速度，直接上二维数组也可以实现邻接表。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// adjacent list - based on 2-dimens array</span></div><div class="line"><span class="keyword">int</span> AdjList[MAX_V][MAX_V];</div><div class="line"></div><div class="line"><span class="keyword">for</span>(e: <span class="number">1</span> ~ E)&#123;</div><div class="line">    <span class="comment">// intput va, vb, weight</span></div><div class="line">    AdjList[va][++AdjList[va][<span class="number">0</span>]] = weight; <span class="comment">// store edge from AdjList[v][1], use AdjList[v][0] to store the edge number that adjacent to v.</span></div><div class="line">    AdjList[vb][++AdjList[vb][<span class="number">0</span>]] = weight; <span class="comment">// set this only when it's undirected graph</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优点：</p>
<ul>
<li>方便对顶点遍历邻接顶点（或者说对顶点，遍历它连接的边），对稀疏图的遍历比邻接矩阵节省时间。 一般空间足够的情况下，推荐最后一种实现方式。</li>
</ul>
<p>缺点：</p>
<ul>
<li>不能对边遍历</li>
<li>不能随机访问</li>
</ul>
<p>表面上来看，邻接表缺点比较多。但实际使用中，几乎所有图算法都需要对顶点遍历边（Dijkstra，Floyd，Prim…），所以反而是最常用的表示存储方式。</p>
<h2 id="其他存储方式"><a href="#其他存储方式" class="headerlink" title="其他存储方式"></a>其他存储方式</h2><p>牵涉到复杂的指针操作，仅供参考了解。</p>
<ul>
<li>十字链表</li>
<li>多重邻接表</li>
</ul>
<hr>
<p>原本这里写着 <strong>…… To be continued……</strong>，表示我会不定期更新。但因为我的离职，起码三星内网的那篇文章，我再也不会更新了。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在三星广研待了四年，兼任了两年半内训讲师，其实整理过很多培训资料，却因为安保绝大多数无法带走。里面无关保密部分，一直想重新整理出来，留一个记录。&lt;/p&gt;
&lt;p&gt;可仅凭手头遗留的一些纸质资料和记忆，时隔越久越难恢复了。只能怪我在三星期间没有坚持回家写技术博客。&lt;/p&gt;
&lt;p&gt;先从容易的开始吧。&lt;br&gt;我写过一篇汇总，主要是在OJ系统上刷题提交 以及 应对三星内部软件考试的技巧，部分是针对考试的小聪明，但也有很多其实是通用的coding技巧。因为是针对当时的学员常见错误写的，内容很乱没什么章法。以下是整理恢复的正文：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="skill" scheme="http://jaycechant.info/tags/skill/"/>
    
      <category term="OJ" scheme="http://jaycechant.info/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>解题报告 —— 从水题开一个头</title>
    <link href="http://jaycechant.info/2016/solution-report-start-from-an-easy-problem/"/>
    <id>http://jaycechant.info/2016/solution-report-start-from-an-easy-problem/</id>
    <published>2016-11-08T09:40:20.000Z</published>
    <updated>2016-12-08T02:53:19.125Z</updated>
    
    <content type="html"><![CDATA[<p>昨天碰到有人跟我讨论一道水题，勾起了解题的念头。题目固然不难，但也有值得讨论之处。姑且以它的解题报告，开个写解题报告的头。</p>
<a id="more"></a>
<h1 id="源起"><a href="#源起" class="headerlink" title="源起"></a>源起</h1><p>在前公司工作四年，有两年半担任兼职讲师。一开始给非软件专业（一般是通信专业）的同事介绍Java，后来变成了主要讲解算法和数据结构题，以应对本社的软件能力等级考试。我和其他几个被选拔出来的讲师，工作时间里有一部分变成了光明正大地刷算法题。考试不过的同事把做题视作洪水猛兽，我们却AC之后继续研究优化，相当享受。当然还得做课件和上课又是一回事。</p>
<p>因为安保，所有资料都在公司内网。现在离开老东家，想把无关保密部分整理出来作为自己的积累，突然发现凭回忆非常零碎。老实说，多数题在ACM玩家来看，就算不是水题，也就中等难度；但钻研其中，算法的取舍，各种因素的权衡，也是一种修炼。自己资质一般，如果不这些所得用文字留下来，一不小心就会原地踏步。水题也好，重新开个头吧。</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>题目来自口头转述，只有大意和约束：</p>
<ul>
<li><p>有一个 N * N 的矩阵图，上面有 M 个顺序编号的点（1 ~ M）和 一些无法通过的区域（9），余下区域为0。</p>
</li>
<li><p>求从 1 到 M 顺序经过全部点的 <strong>最短路径有多少条</strong> 。</p>
</li>
<li><p>从描述的例子看，还没轮到的点允许通过，只是后面轮到时还是得走一次。  </p>
<p>譬如说从 1 走到 5，先走 1 -&gt; 2 这段，到达 2 之前， 3、4、5 都相当于普通的点，也就是0，可以经过。而就算你经过了这三个点，譬如说 4 在 1-&gt; 2 的最短路径上，走到 3 时还是得往 4 走。</p>
</li>
<li><p>因为是水题，数据量极小， 3 ≤ N ≤ 7，3 ≤ M ≤ 5。也就是穷举型的思路都可以做。如果进一步想验证效率，可以人为调大数据量看看。（我以前跟毅跞经常这么干）</p>
</li>
</ul>
<h3 id="输入输出示例"><a href="#输入输出示例" class="headerlink" title="输入输出示例"></a>输入输出示例</h3><ul>
<li>输入</li>
</ul>
<pre><code>5 4
1 0 0 0 0
0 0 0 0 0
0 2 0 4 0
0 0 0 9 0
0 0 0 3 0
</code></pre><ul>
<li>输出</li>
</ul>
<pre><code>18
</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="数学推导"><a href="#数学推导" class="headerlink" title="数学推导"></a>数学推导</h2><p>有些问题经数学推导之后，是可以有直接的公式解，而不需要一步步模拟的（典型的如 <strong>约瑟夫环</strong>）。退一步，如果问题本身无法直接推导，但是某种简化情况可以推导，也能为找思路提供方向。</p>
<h3 id="乘法原理"><a href="#乘法原理" class="headerlink" title="乘法原理"></a>乘法原理</h3><p>首先，题目里的点必须按顺序通过，那么根据 <strong>乘法原理</strong> ，最终答案等于 次序上相邻的点的最短路径数的乘积。假定 \( C_{a, b} \) 是 a 点 到 b 点之间的最短路径数，那么写成数学式就是：</p>
<p>$$ \prod <em>{i=1} ^{M - 1} {C </em>{i, i + 1}} $$</p>
<p>这就把问题简化成了两点之间的最短路径数了。不过似乎原题为了减低难度，在题目里就有提醒这点。</p>
<h3 id="排列组合"><a href="#排列组合" class="headerlink" title="排列组合"></a>排列组合</h3><p>假定我们不考虑禁行区（9）的存在，那么两点之间的最短路径，距离显然为他们之间的 <strong>曼哈顿距离</strong> 。</p>
<p>假设 <strong>横向的步数为W，纵向的步数为H</strong> ，同时横向移动一步标记为0，纵向标记为1，那么长度为 曼哈顿距离 的路径数，就相当于W个0和H个1的全排列：\( A(W+H) = (W+H)! \) 。但因为0 和 1都有大量重复，这并不是一个真正的全排列，所以还要把 0 和 1内部的组合数排除掉，最终得到： \( \frac{(W+H)!}{W! H!} \) 。</p>
<p>在 W+H不是特别大（换言之 (W+H)! 没有超出表示范围，以这题为例，W+H不超过7，那么最大的数不过5040）的情况下，这样就可以提前缓存好 N!，那么在W 和 H 确定之后只要做两次除法就得到答案了。</p>
<p>当然，这只是顺便延伸一下，实际上这道题因为 9 的存在，不能这么算。</p>
<h1 id="代码参考"><a href="#代码参考" class="headerlink" title="代码参考"></a>代码参考</h1><h2 id="Brute-force-dfs"><a href="#Brute-force-dfs" class="headerlink" title="Brute-force (dfs)"></a>Brute-force (dfs)</h2><blockquote>
<p>注1：这里开始会贴代码。一般我用 C/C++ 完成算法题，可以比较好地选择底层的数据结构实现。不过这里为了节省空间，用了Python来展示代码，而且只贴关键函数，输入输出部分就略过了。Python的代码非常接近 伪代码，相信没有写过Python的朋友也能很好理解。</p>
<p>注2：为了简便，这里的队列我直接用了list。但实际上list 的 pop(0) 会修改后面全部元素的位置，复杂度是O(n)。Python里更好的选择是deque，C/C++可以使用STL或者自己实现一个循环队列。</p>
</blockquote>
<p>如果没能直接找到数学关系直接计算，也没能一眼看出合适的算法，那么暴力不失为一个好的开始。具体到这里，暴力的做法一般就是用DFS穷举所有可能的路径，找出中间最短那几条。</p>
<p>当然，直接暴力，内存和时间复杂度都会很夸张（这里如果不限制长度，先穷举所有路径，再计算其中最短的数量，操作是很庞大的），所以哪怕是第一份代码，我也加入了一些直接能想到的剪枝：一旦发现了dis大小的路径，那么所有大于dis的路径都不必再尝试了。</p>
<p>示例代码一：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(sp, ep, dis)</span>:</span></div><div class="line">    <span class="keyword">global</span> MinDis, CntWay, Vis</div><div class="line">    dis += <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> dis &gt; MinDis:</div><div class="line">        <span class="comment"># prunning</span></div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> sp[<span class="number">0</span>] == ep[<span class="number">0</span>] <span class="keyword">and</span> sp[<span class="number">1</span>] == ep[<span class="number">1</span>]:</div><div class="line">        <span class="keyword">if</span> dis == MinDis:</div><div class="line">            CntWay += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># dis &lt; MinDis</span></div><div class="line">            MinDis = dis</div><div class="line">            CntWay = <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span></div><div class="line">        </div><div class="line">    <span class="comment"># up</span></div><div class="line">    row, col = sp</div><div class="line">    row -= <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> row &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> Vis[row][col] <span class="keyword">and</span> Map[row][col] != <span class="number">9</span>:</div><div class="line">        Vis[row][col] = <span class="keyword">True</span></div><div class="line">        dfs((row, col), ep, dis)</div><div class="line">        Vis[row][col] = <span class="keyword">False</span></div><div class="line">        </div><div class="line">    <span class="comment"># down</span></div><div class="line">    row += <span class="number">2</span></div><div class="line">    <span class="keyword">if</span> row &lt; N <span class="keyword">and</span> <span class="keyword">not</span> Vis[row][col] <span class="keyword">and</span> Map[row][col] != <span class="number">9</span>:</div><div class="line">        Vis[row][col] = <span class="keyword">True</span></div><div class="line">        dfs((row, col), ep, dis)</div><div class="line">        Vis[row][col] = <span class="keyword">False</span></div><div class="line">        </div><div class="line">    <span class="comment"># left</span></div><div class="line">    row -= <span class="number">1</span></div><div class="line">    col -= <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> col &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> Vis[row][col] <span class="keyword">and</span> Map[row][col] != <span class="number">9</span>:</div><div class="line">        Vis[row][col] = <span class="keyword">True</span></div><div class="line">        dfs((row, col), ep, dis)</div><div class="line">        Vis[row][col] = <span class="keyword">False</span></div><div class="line">        </div><div class="line">    <span class="comment"># right</span></div><div class="line">    col += <span class="number">2</span></div><div class="line">    <span class="keyword">if</span> col &lt; N <span class="keyword">and</span> <span class="keyword">not</span> Vis[row][col] <span class="keyword">and</span> Map[row][col] != <span class="number">9</span>:</div><div class="line">        Vis[row][col] = <span class="keyword">True</span></div><div class="line">        dfs((row, col), ep, dis)</div><div class="line">        Vis[row][col] = <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">findWay</span><span class="params">(sp, ep)</span>:</span></div><div class="line">    <span class="keyword">global</span> MinDis, Vis</div><div class="line">    MinDis = MAX</div><div class="line">    Vis[sp[<span class="number">0</span>]][sp[<span class="number">1</span>]] = <span class="keyword">True</span></div><div class="line">    dfs(sp, ep, <span class="number">0</span>)</div><div class="line">    Vis[sp[<span class="number">0</span>]][sp[<span class="number">1</span>]] = <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> CntWay</div></pre></td></tr></table></figure>
<p>以上的代码是基于来问我的人的代码，把里面的错误改掉之后得到的。主函数调用findWay() 即可。关键部分在于到达目标时的判断：如果当前这条路的距离跟最短距离相等，那么计数器加一；否则就是发现了更短的路（不存在更长的情况，因为剪枝处理掉了），更新最短距离，并把计数器置一（注意不是置零）。</p>
<p>如果调整一下代码，还能把公共部分的检查提取出来。示例代码二：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(sp, ep, dis)</span>:</span></div><div class="line">    <span class="keyword">global</span> MinDis, CntWay, Vis</div><div class="line">    row, col = sp</div><div class="line">    <span class="comment"># log(sp, dis, MinDis, Vis[row][col])</span></div><div class="line">    dis += <span class="number">1</span></div><div class="line">    <span class="comment"># legal check and prunning</span></div><div class="line">    <span class="keyword">if</span> dis &gt; MinDis <span class="keyword">or</span> Vis[row][col] <span class="keyword">or</span> Map[row][col] == <span class="number">9</span>:</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> row == ep[<span class="number">0</span>] <span class="keyword">and</span> col == ep[<span class="number">1</span>]:</div><div class="line">        <span class="keyword">if</span> dis == MinDis:</div><div class="line">            CntWay += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># dis &lt; MinDis</span></div><div class="line">            MinDis = dis</div><div class="line">            CntWay = <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span></div><div class="line">        </div><div class="line">    Vis[row][col] = <span class="keyword">True</span></div><div class="line">    <span class="comment"># up</span></div><div class="line">    row -= <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> row &gt;= <span class="number">0</span>:</div><div class="line">        dfs((row, col), ep, dis)</div><div class="line">        </div><div class="line">    <span class="comment"># down</span></div><div class="line">    row += <span class="number">2</span></div><div class="line">    <span class="keyword">if</span> row &lt; N:</div><div class="line">        dfs((row, col), ep, dis)</div><div class="line">        </div><div class="line">    <span class="comment"># left</span></div><div class="line">    row -= <span class="number">1</span></div><div class="line">    col -= <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> col &gt;= <span class="number">0</span>:</div><div class="line">        dfs((row, col), ep, dis)</div><div class="line">        </div><div class="line">    <span class="comment"># right</span></div><div class="line">    col += <span class="number">2</span></div><div class="line">    <span class="keyword">if</span> col &lt; N:</div><div class="line">        dfs((row, col), ep, dis)</div><div class="line">        </div><div class="line">    Vis[sp[<span class="number">0</span>]][sp[<span class="number">1</span>]] = <span class="keyword">False</span></div></pre></td></tr></table></figure>
<h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><p>DFS冗余运算比较多，就会很自然地想，BFS能不能有所改善呢？</p>
<p>能不能改善先不管，我们先用BFS做出来。示例代码三：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(sp, ep)</span>:</span></div><div class="line">    cnt_way = <span class="number">0</span></div><div class="line">    <span class="comment"># None as step flag</span></div><div class="line">    queue = [sp, <span class="keyword">None</span>]</div><div class="line">    arrive = <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> len(queue) &gt; <span class="number">1</span>:</div><div class="line">        point = queue.pop(<span class="number">0</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> point:</div><div class="line">            <span class="keyword">if</span> arrive:</div><div class="line">                <span class="keyword">return</span> cnt_way</div><div class="line">            queue.append(<span class="keyword">None</span>)</div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line">        row, col = point</div><div class="line">        <span class="comment"># legal check</span></div><div class="line">        <span class="keyword">if</span> Map[row][col] == <span class="number">9</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> row == ep[<span class="number">0</span>] <span class="keyword">and</span> col == ep[<span class="number">1</span>]:</div><div class="line">            cnt_way += <span class="number">1</span></div><div class="line">            arrive = <span class="keyword">True</span></div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line">        <span class="comment"># up</span></div><div class="line">        row -= <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> row &gt;= <span class="number">0</span>:</div><div class="line">            queue.append((row, col))</div><div class="line"></div><div class="line">        <span class="comment"># down</span></div><div class="line">        row += <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> row &lt; N:</div><div class="line">            queue.append((row, col))</div><div class="line"></div><div class="line">        <span class="comment"># left</span></div><div class="line">        row -= <span class="number">1</span></div><div class="line">        col -= <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> col &gt;= <span class="number">0</span>:</div><div class="line">            queue.append((row, col))</div><div class="line"></div><div class="line">        <span class="comment"># right</span></div><div class="line">        col += <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> col &lt; N:</div><div class="line">            queue.append((row, col))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>基本原理跟之前的暴力法差不多，都是穷举所有可能的路径并且计数。</p>
<p>改善的地方在于，DFS是一条路走到底再去试别的路，你没办法预知先试的路是长还是短；<strong>BFS可以看作多条路同时往外挪步，后面的路肯定是比当前路要长（或者相当，起码不可能更短）</strong> ，一旦到达目标，后面更长的路可以不用直接尝试了。这里我用了一个None作为层次标记，一旦到达，只把同距离的计数完就退出。</p>
<p>但这也有代价：因为同时挪步，为了不互相影响，BFS不能像DFS标记走过的点，所以队列里其实有大量 <strong>来回步</strong> ！如果地图比较大（这样DFS有些路就要走很远才到头），而实际点与点之间比较近（BFS很快就能结束），那么这份代码是比DFS效率高一些的； 但如果反过来（譬如有些相邻点分布在对角线上两头），大量来回步造成的浪费更多，那么这种做法实际得不偿失。</p>
<h3 id="BFS-DP"><a href="#BFS-DP" class="headerlink" title="BFS + DP"></a>BFS + DP</h3><p>能不能像DFS那样也记录已走过的点，然后不重复走？</p>
<p><strong><em>TODO: 此处最好有图，mark一个，有空补</em></strong></p>
<p>不行。因为可能有多条最短路径会通过同一个点，如果一个点只能走一次，会漏算大量的路径。DFS之所以可以这么做，是因为回溯时会恢复状态，记录只是为了不走回头路，别的路径还是能通过这个点。</p>
<p>那如果我们做更详细的标记呢？譬如引入：OPEN（没走过），CLOSE（已离开） 以及 ONGOING（进行中） 三个状态。对应队列的状态，分别就是 <strong>从未进队</strong> ， <strong>已入队并出队</strong> 和 <strong>正在队列中</strong> 三种状态。</p>
<p>我们知道，BFS的特性会让 <strong>从起点起同样距离的点</strong> 一起访问完，然后才会继续尝试 + 1 距离的点，一层层往外走。那么假定从X点往外一步访问到一个Y点，并且Y的状态为：（下面的dis(X)指起点到X点的最短距离）</p>
<ol>
<li>OPEN，Y点从未被访问，直接进队并且改为ONGOING</li>
<li>CLOSE，Y点被其它点访问过，并且 <strong>Y已经在X之前</strong> 出队了，dis(Y) ≤ dis(X)， 经X再到Y这种走法，至少比之前到Y的走法要额外多一步（假定dis(Y) = dis(X)的话，至少还要加上一步；如果是 &lt; ，那就不止了），<strong>这种走法无论如何不能再产生最短路径了</strong> （划重点，请仔细体会这句话），所以Y不用再进队了</li>
<li>ONGOING，Y点被其它点访问过，并且还没出队，而X现在作为起点，说明刚刚出队，dis(Y) ≥ dis(X)，那么经X到Y这种走法，起码还是有可能存在一条最短路径的，Y点再次入队</li>
</ol>
<p>这种做法把CLOSE状态下的冗余给去掉了。因为一个点的前置节点一个是已经CLOSE掉的，所以回头路也不会存在了。</p>
<p>不过这种改进仍然是有限的，从目前的推导看，ONGOING里还是可能存在 dis(Y) = dis(X) 的情况的浪费，而且其实同一个点多次进队也是没有必要的。这种改进改动的代码不多，我就不再贴示例了。</p>
<h4 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h4><p><strong><em>如果不是为了引导问我的人一步一步考虑到这里，这种水题真想一开始直接写DP</em></strong></p>
<p>讨论DP之前，还要引入这道题具有的一个性质：以任意点为起点，相邻的点的dis值都不会相等。</p>
<p>首先我们来看一下没有障碍物的情况，下图以0处为起点，标出起点到各点的最短距离：</p>
<pre><code>3 2 1 2 3
2 1 0 1 2
3 2 1 2 3
4 3 2 3 4
5 4 3 4 5
</code></pre><p>很容易得出，无论以哪里为起点，相邻的点的dis值一定是相差1。</p>
<p>而如果我们往上放一个障碍物呢，这时 障碍物在不在从起点到终点 <strong>唯一的最短路径上</strong> 有两种情况（注意，是唯一）：</p>
<ul>
<li>不在（可能根本不在任何一条最短路径上毫无影响，也可能影响其中一条，剩下的还能走），那么依然存在这个dis值的最短路径，不改变该终点的dis值。</li>
<li>在，那么又有两种情况：<ul>
<li>绕路：由于绕路而造成的dis值增大，必然是偶数的。由于只能上下左右移动，不能对角移动，绕路产生的额外移动，都是关于障碍物对称的。</li>
<li>从旁边没有被障碍物影响的点走一步过来。由于唯一的最短路径已经被障碍物影响，剩下没被影响的点，都是dis+1，再往回走一步，就变成了dis+2。</li>
</ul>
</li>
</ul>
<p>无论是哪种情况，变动的值都是偶数。而且这个性质在连续增加障碍物的过程中依然有效。所以相邻的点dis值不可能相等，依然保持相差1。（只是说变动都是偶数而已，相差不应该是2k+1吗，为什么一定是1？这里可以思考一下why）</p>
<p>接下来说DP：</p>
<p>动态规划的做法是，定义子问题，并且找到子问题之间的状态转移方程。如果中间有子问题的解是能被多次引用，那么对子问题解的缓存就能改善运算效率。这里不打算详细说DP，直接给转移方程：（提醒一下，题目是要求最短路径的数量）</p>
<p>假设 cw(x, y) （Count Way 缩写）是 起点 到 (x, y) 这个点的最短路径的数量，那么</p>
<p>$$ cw(x, y) = \sum{ cw(x-1, y), cw(x+1, y), cw(x, y-1), cw(x, y+1)} $$</p>
<p>计算过程中，我们需要一个表，用来记录cw值（dis值由BFS特性保证）。需要额外开辟一个表吗？其实不需要，我们把上面的状态再扩展一下，变成cw值就好：cw &gt; 0 时，对应ONGOING；那么为了避免冲突，我把OPEN定义为0，CLOSE定义为-1。</p>
<p>OPEN 和 CLOSE 状态的处理都不用变，而ONGOING的处理变成对cw值大小的判断：</p>
<!-- TODO: 是否可以处理dis相等的点相邻的情况 ！？-->
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(sp, ep)</span>:</span></div><div class="line">    cnt_way = [([OPEN] * N) <span class="keyword">for</span> i <span class="keyword">in</span> range(N)]</div><div class="line">    cnt_way[sp[<span class="number">0</span>]][sp[<span class="number">1</span>]] = <span class="number">1</span></div><div class="line">    queue = [sp]</div><div class="line"></div><div class="line">    <span class="keyword">while</span> len(queue) &gt; <span class="number">0</span>:</div><div class="line">        row, col = queue.pop(<span class="number">0</span>)</div><div class="line"></div><div class="line">        <span class="comment"># legal check</span></div><div class="line">        <span class="keyword">if</span> Map[row][col] == <span class="number">9</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> row == ep[<span class="number">0</span>] <span class="keyword">and</span> col == ep[<span class="number">1</span>]:</div><div class="line">            <span class="keyword">return</span> cnt_way[ep[<span class="number">0</span>]][ep[<span class="number">1</span>]]</div><div class="line"></div><div class="line">        <span class="comment"># up</span></div><div class="line">        r = row - <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> r &gt;= <span class="number">0</span> <span class="keyword">and</span> cnt_way[r][col] != CLOSED:</div><div class="line">            <span class="keyword">if</span> cnt_way[r][col] == OPEN:</div><div class="line">                queue.append((r, col))</div><div class="line">            cnt_way[r][col] += cnt_way[row][col]</div><div class="line"></div><div class="line">        <span class="comment"># down</span></div><div class="line">        r = row + <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> r &lt; N <span class="keyword">and</span> cnt_way[r][col] != CLOSED:</div><div class="line">            <span class="keyword">if</span> cnt_way[r][col] == OPEN:</div><div class="line">                queue.append((r, col))</div><div class="line">            cnt_way[r][col] += cnt_way[row][col]</div><div class="line"></div><div class="line">        <span class="comment"># left</span></div><div class="line">        c = col - <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> c &gt;= <span class="number">0</span> <span class="keyword">and</span> cnt_way[row][c] != CLOSED:</div><div class="line">            <span class="keyword">if</span> cnt_way[row][c] == OPEN:</div><div class="line">                queue.append((row, c))</div><div class="line">            cnt_way[row][c] += cnt_way[row][col]</div><div class="line"></div><div class="line">        <span class="comment"># right</span></div><div class="line">        c = col + <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> c &lt; N <span class="keyword">and</span> cnt_way[row][c] != CLOSED:</div><div class="line">            <span class="keyword">if</span> cnt_way[row][c] == OPEN:</div><div class="line">                queue.append((row, c))</div><div class="line">            cnt_way[row][c] += cnt_way[row][col]</div><div class="line"></div><div class="line">        cnt_way[row][col] = CLOSED</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天碰到有人跟我讨论一道水题，勾起了解题的念头。题目固然不难，但也有值得讨论之处。姑且以它的解题报告，开个写解题报告的头。&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="http://jaycechant.info/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Python 函数和类的别名</title>
    <link href="http://jaycechant.info/2016/python-function-and-class-alias/"/>
    <id>http://jaycechant.info/2016/python-function-and-class-alias/</id>
    <published>2016-10-07T12:44:58.000Z</published>
    <updated>2016-10-21T12:57:26.166Z</updated>
    
    <content type="html"><![CDATA[<p>简单的一个小测试的记录，但因为我习惯记录前因后果，写得有点啰嗦。</p>
<a id="more"></a>
<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>我尝试把一些 C/C++ 的库用 Python 重新实现一遍（纯练习 Python 和 熟悉库的原理，实际应用当然是Python直接调用C/C++），先逐句翻译成Python代码，再根据实际情况优化。</p>
<p>struct 当然先是转成 class。然后我发现，一些结构体里反复出现的公共成员，别人会先定义一个宏来减少重复工作，类似这样：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CommonVars type1 var1; type2 var2; type3 var3</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> std_struct&#123;</div><div class="line">  CommonVars;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> struct1&#123;</div><div class="line">  CommonVars;</div><div class="line">  type4 var4;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// struct2...</span></div></pre></td></tr></table></figure>
<p>对应在Python里的一对一翻译，就是分别定义 CommonVars, StdStruct, Struct1, Struct2…  这么几个类，其中后面的都 继承 CommonVars。当然，很明显CommonVars 和 StdStruct 其实是一回事，但是为了保持跟C++代码的一一对应，我还是保留了两个类。</p>
<p>后来一想，何必继承呢，要不干脆定义完 CommonVars 之后 StdStruct = CommonVars？</p>
<h1 id="实测"><a href="#实测" class="headerlink" title="实测"></a>实测</h1><p>Python 一切皆对象，包括 函数 和 类 都是可以作为右值给变量赋值的，这样做相当与给 函数 / 类 起了别名，是可以运行的。<br>但是别名背后的运作是怎么样的呢，最好的办法就是实际试一下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/python3</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">funA</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'This is funA.'</span></div><div class="line"></div><div class="line">funB = funA</div><div class="line"></div><div class="line">print(<span class="string">'run funA:'</span>, funA())</div><div class="line">print(<span class="string">'run funB:'</span>, funB())</div><div class="line">print(<span class="string">'name of funA:'</span>, funA.__name__)</div><div class="line">print(<span class="string">'name of funB:'</span>, funB.__name__)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClsA</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">ClsB = ClsA</div><div class="line"></div><div class="line">print(<span class="string">'new ClsA:'</span>, ClsA())</div><div class="line">print(<span class="string">'new ClsB:'</span>, ClsB())</div><div class="line">print(<span class="string">'name of ClsA:'</span>, ClsA.__name__)</div><div class="line">print(<span class="string">'name of ClsB:'</span>, ClsB.__name__)</div></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ ./fun_class_alias.py</div><div class="line">run funA: This is funA.</div><div class="line">run funB: This is funA.</div><div class="line">name of funA: funA</div><div class="line">name of funB: funA</div><div class="line">new ClsA: &lt;__main__.ClsA object at 0x7f268e744278&gt;</div><div class="line">new ClsB: &lt;__main__.ClsA object at 0x7f268e744278&gt;</div><div class="line">name of ClsA: ClsA</div><div class="line">name of ClsB: ClsA</div></pre></td></tr></table></figure>
<p>结果很清晰地说明了：</p>
<ol>
<li>这样是可以正常运行的</li>
<li>别名纯粹只是个别名，是对原 函数 / 类 的一个引用，不影响实际的名字。（通过 <code>.__name__</code> 获取实际的名字，仍然是定义时那一个。），也不会改变行为</li>
</ol>
<p>但有一个问题，为什么两次获得的实例居然是一个地址？！</p>
<p>我把第二个也改为 <code>ClsA()</code> ，结果还是一样，说明跟别名无关。那按理说第二次实例化得到的地址必须不一样才对啊！想了一会，难道是因为内存回收？于是把代码改成这样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/python3</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClsA</span>:</span></div><div class="line">    _cnt = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.__class__._cnt += <span class="number">1</span></div><div class="line">        self.idx = self._cnt</div><div class="line"></div><div class="line">ClsB = ClsA</div><div class="line"></div><div class="line">insA = ClsA()</div><div class="line">print(<span class="string">'new ClsA:'</span>, insA)</div><div class="line">print(<span class="string">'idx of insA:'</span>, insA.idx)</div><div class="line"></div><div class="line">insB = ClsB()</div><div class="line">print(<span class="string">'new ClsB:'</span>, insB)</div><div class="line">print(<span class="string">'idx of insB:'</span>, insB.idx)</div></pre></td></tr></table></figure>
<p>这次地址就不一样了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">./fun_class_alias.py</div><div class="line">new ClsA: &lt;__main__.ClsA object at 0x7f8f729ccf98&gt;</div><div class="line">idx of insA: 1</div><div class="line">new ClsB: &lt;__main__.ClsA object at 0x7f8f729d2ef0&gt;</div><div class="line">idx of insB: 2</div></pre></td></tr></table></figure>
<p>这样看来，之前只是因为匿名引用之后内存被马上回收，然后下次申请的又是同一块内存，产生看起来好像是同一个实例的错觉。但只要给他们都加一个引用，就清楚了。</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>然后我又查了一下，并没有发现其他人讨论这个内容（当然也可能是关键字选得不对，欢迎留言打脸），到时在官方文档发现类似这样的一句话：在Windows上，WindowsError 是 OSError的别名。</p>
<p>于是我翻了一下Python的源码，然后又在 Windows 上测试了一下这两个Error，作为这个记录的结尾：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Python3.4.4\Objects\exceptions.c</span></div><div class="line"><span class="comment">// ...</span></div><div class="line">    INIT_ALIAS(EnvironmentError, OSError)</div><div class="line">    INIT_ALIAS(IOError, OSError)</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MS_WINDOWS</span></div><div class="line">    INIT_ALIAS(WindowsError, OSError)</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="comment">//...</span></div></pre></td></tr></table></figure>
<p>INIT_ALIAS 是一个比较复杂的宏，就不展开了，顾名思义，就是定义前者作为后者的别名。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/python3</span></div><div class="line"></div><div class="line">print(<span class="string">'OSError is:'</span>, OSError.__name__)</div><div class="line">print(<span class="string">'EnvironmentError is:'</span>, EnvironmentError.__name__)</div><div class="line">print(<span class="string">'IOError is:'</span>, IOError.__name__)</div><div class="line">print(<span class="string">'WindowsError is:'</span>, WindowsError.__name__)</div></pre></td></tr></table></figure>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; py test_WindowsError.py</div><div class="line">OSError is: OSError</div><div class="line">EnvironmentError is: OSError</div><div class="line">IOError is: OSError</div><div class="line">WindowsError is: OSError</div></pre></td></tr></table></figure>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的一个小测试的记录，但因为我习惯记录前因后果，写得有点啰嗦。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://jaycechant.info/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>用Syncthing备份的一些技巧</title>
    <link href="http://jaycechant.info/2016/backup-tips-about-syncthing/"/>
    <id>http://jaycechant.info/2016/backup-tips-about-syncthing/</id>
    <published>2016-08-28T07:57:03.000Z</published>
    <updated>2016-09-08T07:45:42.101Z</updated>
    
    <content type="html"><![CDATA[<p>出于对国内网盘服务的 防黑技术、职业操守 以及 对于 看不见的手的 不信任，我以前一直用dropbox。</p>
<p>后来dropbox被墙了，我就科学地继续用。再后来墙升级了，我也忙起来没空研究新科学了，也就慢慢不怎么登陆dropbox。然后就转用一些国内的服务，当然只放无关痛痒的东西，重要信息只好手机里加密随身带。（这时还发现了一个国内网盘的新坑点：风一来谁都凑热闹做，风一走一个一个都嚷嚷着停止服务……）</p>
<p>前几个月忽然想起dropbox，登陆时发现……太久不用帐号被停了，而且连恢复期也过了。还好文件在本地都有。</p>
<p>继续对国内服务不信任，开始关注BTSync。结果发现虽然基础服务免费，但毕竟是个商业服务。我现在连商业服务也慢慢不信任了（过几年你撂挑子了怎么办），最后选择了开源（而且跨平台，连Android都有client）的 <strong>Syncthing</strong>。</p>
<a id="more"></a>
<p>我不打算从头讲怎么用，毕竟一搜一大把，而且用起来真的很傻瓜。</p>
<p>譬如小众这篇就已经讲得听清楚的了： <a href="http://www.appinn.com/syncthing/" target="_blank" rel="external">Syncthing – 数据同步新选择，手把手教你做自己的网盘</a></p>
<p>我这里只记录我自己遇到困难，在网上没有找到解决方案（起码我没搜到），最后自己琢磨解决的情况。还有一些不起眼的网上没有提到的坑。说白了给自己留记录。</p>
<h2 id="单向备份的设置"><a href="#单向备份的设置" class="headerlink" title="单向备份的设置"></a>单向备份的设置</h2><p>dropbox 也好，别的网盘也好，包括这个连名字都叫做 Sync-thing，最基本的需求是同步。也就是几个设备上对应的目录，内容要保持一致，任意一个目录的 “增-删-改”，都要同步到别的设备去。</p>
<p>但并不总是这样。以我自己为例，平时拿着手机乱拍一通，很快手机就塞满了照片。（帮前东家做个广告，三星Galaxy S7的拍照效果真好，欲罢不能）我需要把照片存放起来，然后手机上删掉，释放有限的空间。多数网盘都有自动备份功能，可惜我信不过它们。我又不想整天连电脑，自然照片的文件夹就加入了Syncthing的监控中。</p>
<p>实际使用中，发现了“同步”存在的问题：</p>
<ol>
<li><p>照片一旦从手机同步到了电脑（或者私有云），大多数就要删掉省空间了。<br> 但是，等等，任何操作都会同步，包括“删”这个动作……但是手机上不能删的话，就没有意义了呀……</p>
</li>
<li><p>电脑那边，出于归档的需要，会对照片重新分目录，编辑，一些不需要的照片删掉（不需要存档，但手机上可能刚好有用，譬如拍下明天的购物单），这些操作也不想同步回手机…</p>
</li>
</ol>
<h3 id="主目录-Master"><a href="#主目录-Master" class="headerlink" title="主目录 Master"></a>主目录 Master</h3><p>然后我在设置里发现了 “主目录” 这个选项，特意翻了文档：意思是主目录的文件可以同步到别的关联目录（主 -&gt; 普通  自动sync），但是关联目录的修改只会对比，默认不会覆盖 （普通 -&gt; 主  覆盖需要手动确认）。</p>
<p>基于上面两点需求，我把手机和电脑的目录分别都设为了 “主目录”，这样他们不会自动同步，都需要我确认。</p>
<h3 id="IgnoreDelete"><a href="#IgnoreDelete" class="headerlink" title="IgnoreDelete"></a>IgnoreDelete</h3><p>问题解决了吗？ - 并没有。</p>
<p>因为 “普通 -&gt; 主” 虽然是手动确认，但选择粒度只有 不同步 / 完全覆盖 两个选项。（题外话，Overwrite changes 被错误翻译成了 “撤销修改”）。其实稍微看一下高级设置或者配置文件就会发现，所谓的主目录，本质上就是一个 “readonly” 目录，区别于普通目录的权限是 “readwrite”…</p>
<p>对于2，基本是解决了，因为实际上这不是同步，而是手机到电脑的 “单向备份”，对我来说，几乎没有电脑同步回手机的时候。偶尔需要传图或者文件，我会用另外的文件夹，没必要用图片目录。</p>
<p>但是 1 就不行了。不同步就没办法备份新照片，同步就意味着手机删掉的图片电脑上也会没掉。</p>
<p>这时我在高级设置发现了一个选项 “ignoreDelete”。名字猜到了一二，再看文档，确定了功能：</p>
<p>设置为 “ignoreDelete” 的目录，只同步删除以外的操作。换言之，别的设备上删掉的文件，不会影响当前设备。</p>
<p>手机图片目录： 主目录<br>电脑备份目录：ignoreDelete</p>
<p>这样，手机上任何 新增/修改 的图片都会备份到电脑上，但是手机上为了省空间删除却完全不影响电脑。</p>
<h2 id="移动文件夹"><a href="#移动文件夹" class="headerlink" title="移动文件夹"></a>移动文件夹</h2><p>一般来说，要同步的文件夹都比较重要，所以放的位置应该也相对固定。</p>
<p>但是，偶尔在整理的时候，还是会觉得自己之前放得不合理，想动一下。<br>譬如我之前在主目录下放了一堆各种格式文档的同步目录，后来一想太乱了，这些目录应该都作为文档目录的子目录。</p>
<p>已经同步了，怎么办？在文件夹选项里，发现路径是不能改的。</p>
<p>一开始我的办法只好是，<strong>在Syncthing里移除 &gt; 文件夹挪位置 &gt; 把新位置重新添加</strong>。</p>
<p>这样有一些问题。我就不说如果文件大的话，重新添加会浪费扫描的时间，毕竟那是电脑干的活；就说重新添加时要重新填文件夹的设置，也够烦的了。不就是挪个位置吗？！</p>
<p>其实，高级设置里可以改。</p>
<p>改之前建议把<strong>扫描间隔调大，手动点一下扫描</strong>，以确保操作期间不会扫描和同步；然后 <strong>改路径</strong> 和  <strong>挪文件</strong> 的先后貌似倒没关系，两边都改好之后，重新点一下扫描，正常情况下应该是什么操作都不会触发。</p>
<p>如果这两个修改只完成了一个的情况下，触发了扫描，我估计会被以为删除，触发同步。至于是把删除操作同步出去，还是重新下载，<strong>我没实际试</strong>，大家可以实际试一下我的猜想是否正确。</p>
<p>To be continued…</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;出于对国内网盘服务的 防黑技术、职业操守 以及 对于 看不见的手的 不信任，我以前一直用dropbox。&lt;/p&gt;
&lt;p&gt;后来dropbox被墙了，我就科学地继续用。再后来墙升级了，我也忙起来没空研究新科学了，也就慢慢不怎么登陆dropbox。然后就转用一些国内的服务，当然只放无关痛痒的东西，重要信息只好手机里加密随身带。（这时还发现了一个国内网盘的新坑点：风一来谁都凑热闹做，风一走一个一个都嚷嚷着停止服务……）&lt;/p&gt;
&lt;p&gt;前几个月忽然想起dropbox，登陆时发现……太久不用帐号被停了，而且连恢复期也过了。还好文件在本地都有。&lt;/p&gt;
&lt;p&gt;继续对国内服务不信任，开始关注BTSync。结果发现虽然基础服务免费，但毕竟是个商业服务。我现在连商业服务也慢慢不信任了（过几年你撂挑子了怎么办），最后选择了开源（而且跨平台，连Android都有client）的 &lt;strong&gt;Syncthing&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="tips" scheme="http://jaycechant.info/tags/tips/"/>
    
      <category term="Syncthing" scheme="http://jaycechant.info/tags/Syncthing/"/>
    
      <category term="dropbox" scheme="http://jaycechant.info/tags/dropbox/"/>
    
      <category term="netdisk" scheme="http://jaycechant.info/tags/netdisk/"/>
    
  </entry>
  
  <entry>
    <title>在 Windows 搭建Python多版本环境</title>
    <link href="http://jaycechant.info/2016/python-multi-env-for-win/"/>
    <id>http://jaycechant.info/2016/python-multi-env-for-win/</id>
    <published>2016-07-12T07:21:27.000Z</published>
    <updated>2016-09-08T09:47:02.101Z</updated>
    
    <content type="html"><![CDATA[<p>高中第一次听说Python，第一次写大概在大三到大四之间。毕业后成为了一个Android码农，Python不是主力语言，但零零星星写过一些顺手的小东西，而且主要在公司。</p>
<p>家里的电脑本来就用得不多，还经历了多次重装。旧电脑全格了，从Win+Linux双系统变成了Linux专用；新电脑经历了升Win10之后几次系统崩溃C盘重置，后来又从32改64。</p>
<p>结果D盘的东西虽然还在，但是各种配置乱得不行。譬如说这会要写Python，各种配置都要重新弄。反正都好几年前装的，干脆重新安装配置一遍。</p>
<p>不看不知道，果然很多东西都变了。</p>
<a id="more"></a>
<p>四年前写过<a href="/2012/make-python-2x-coexist-with-3x-on-Win/">一篇文章</a>记录当时Win上配置Python2+3，现在看做法各种过时。譬如说2011年才发起的pip在当年我还不知道，现在已经成为了包管理器的事实标准。</p>
<h1 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h1><p>四年间不怎么关注Python的消息，居然也大概知道pip。然后查了一下目前主流的包管理器的对比，发现<a href="http://zengrong.net/post/2169.htm" target="_blank" rel="external">《Python 包管理工具解惑》</a> 写得比较好。</p>
<p>不看不知道，包管理相关的工具已经有这么多！</p>
<ul>
<li>distutils</li>
<li>setuptools</li>
<li>distribute</li>
<li>disutils2</li>
<li>distlib</li>
<li>pip</li>
</ul>
<p>结论是<strong>pip已经成为了事实标准</strong>，所以默认情况下用pip，遇到特殊情况再考虑别的。详情看那篇文章，不再展开。（考虑到作者换博客等因素，文章链接可能失效，到时只好用标题搜搜看。）</p>
<h1 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h1><p>同样的事情我在Ubuntu上也折腾过一遍。Python对Linux友好太多，很简单的就弄完了。简单过一遍，用来跟Windows对照。（当然，简单还有一部分原因是，我没在Ubuntu装2.5）</p>
<p>没记错的话，Ubuntu自带Python2.7，所以我只要装Python3，然后分别装pip就好</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install python3</div><div class="line">$ sudo apt-get install python-pip</div><div class="line">$ sudo apt-get install python3-pip</div></pre></td></tr></table></figure>
<p>这之后</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ python --version</div><div class="line">Python 2.7.6</div><div class="line">$ python3 --version</div><div class="line">Python 3.4.3</div><div class="line">$ pip --version</div><div class="line">pip 1.5.4 from /usr/lib/python2.7/dist-packages (python 2.7)</div><div class="line">$ pip2 --version</div><div class="line">pip 1.5.4 from /usr/lib/python2.7/dist-packages (python 2.7)</div><div class="line">$ pip3 --version</div><div class="line">pip 1.5.4 from /usr/lib/python3.4/dist-packages (python 3.4)</div></pre></td></tr></table></figure>
<p>Ubuntu 自带的pip版本太旧，要升级一下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ pip install --upgrade pip</div><div class="line">$ pip3 install --upgrade pip</div><div class="line">$ pip --version</div><div class="line">pip 1.5.4 from /usr/lib/python2.7/dist-packages (python 2.7)</div><div class="line">$ pip2 --version</div><div class="line">pip 8.1.2 from /usr/<span class="built_in">local</span>/lib/python2.7/dist-packages (python 2.7)</div><div class="line">$ pip3 --version</div><div class="line">pip 8.1.2 from /usr/<span class="built_in">local</span>/lib/python3.4/dist-packages (python 3.4)</div></pre></td></tr></table></figure>
<p>这里就让我疑惑了，为什么唯独<code>pip</code>没有生效呢？我把PATH输出来</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="variable">$PATH</span></div><div class="line">/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:...</div></pre></td></tr></table></figure>
<p>确实是local的在前面。而且我看了这三个名字的script，内容都是一样的。不过我还没搞清楚原因，第二天开机，就都变成8.1.2了。原因大概能猜到一二，但除非重头折腾，已经无法验证了。如果有大牛知道详细原因，欢迎留言告知。</p>
<p>看到这里，相信大家已经懂得，分别用 <code>python</code> V.S. <code>python3</code>，以及 <code>pip</code> 或 <code>pip2</code> V.S. <code>pip3</code>  就可以调用对应的版本了。</p>
<p>果安装了更多的版本，譬如不止一个Python2，有2.5 和 2.7，那么还可以更具体地区分pip，那就是直接 <code>pip-2.5</code> VS <code>pip2.7</code>。（pip某个版本以前，规则是pip-<ver>，之后变成了pip<ver>。支持2.5的都是老版本，所以带有横杠。详情可以查看 <code>/usr/local/bin</code> 里都有哪些文件。）</ver></ver></p>
<p>这是在bash执行 <code>python xx.py</code> 的情况，那如果是直接给执行权限当脚本跑呢？ 写shebang！在脚本开头写</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/python</span></div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/python3</span></div></pre></td></tr></table></figure>
<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><h2 id="双-Python-for-win"><a href="#双-Python-for-win" class="headerlink" title="双 Python for win"></a>双 Python for win</h2><p>Windows 这边，我选择的组合是 Python 2.5 + Python 3.4。</p>
<p>选择2.5的原因是，虽然2.5 和 2.6/2.7 都是 2.x , 但只有 ≤2.5 才是纯粹的2.x， 2.6/2.7 其实是已经引入了 3.x 语法的过渡版本。<br>2.6/2.7 的代码固然不能在2.5上跑，而2.5 on 2.6/2.7 虽然大多跑得过，也往往存在某些不可预料的结果。（网上很容易搜到例子）<br>我主要还是写3.x的，所以两个系统都装了3.4，但是难免有需要跑一些陈年代码的时候，考虑到Ubuntu自带2.7，Windows就装2.5了。</p>
<p><strong>都安装上是没有难度的，问题是运行。</strong></p>
<p>这涉及到3种运行情况：</p>
<ol>
<li>双击执行 <code>*.py</code> 文件（CLI，也就是纯CMD）</li>
<li>双击执行 <code>*.py</code> 文件（GUI，也就是通过PyQt一类库实现了界面的）</li>
<li>在CMD窗口里执行，同样分以上两种情况</li>
</ol>
<p>两个版本都刚安装完的时候，默认的情况应该是：</p>
<p>1、2 都是哪个在后面安装就调用哪个。因为在Windows，双击执行靠的是文件类型关联，如果安装的时候都有执行文件关联的话（我记得默认这个是有选上的），那么后面的会覆盖前面的。<br>换言之，<strong>假设我主要用 3.x ，那么先装 2.x 再装 3.x ，那么双击运行的都是 3.x ，2.x 就调用不了了。</strong></p>
<p>第3种情况，命令行里执行 <code>python xxx.py</code> ， 如果你没有去系统的Path环境变量添加这两个Python的话，实际上系统会找不到 python。然后如果你往Path里 把两个的 bin 目录都加进去，由于搜索是从前往后寻找，命中就结束，所以是<strong>哪个在Path里靠前执行哪个，靠后不起作用。</strong></p>
<h2 id="随时指定版本"><a href="#随时指定版本" class="headerlink" title="随时指定版本"></a>随时指定版本</h2><p>那么现在的问题就是，如何在不重新安装，以及不修改Path的值的情况下，随时指定Python的版本。（四年前我的方案是，新建一个环境变量放进Path，然后通过批处理修改该变量的指向来解决情况3，没有解决1、2。当然四年前也还没有PEP397）</p>
<p><a href="https://www.python.org/dev/peps/pep-0397/" target="_blank" rel="external">PEP397</a> 给出了官方解决方案。</p>
<p>详细内容大家可以点进去自己看。核心内容是，安装3.3 以上版本时（这样才包含PEP397），会在 <code>C:\Windows\</code>下放一个启动器 <code>py.exe</code>，通过启动器运行，可以用参数指定启动的版本。</p>
<h3 id="命令行参数指定"><a href="#命令行参数指定" class="headerlink" title="命令行参数指定"></a>命令行参数指定</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; py-<span class="number">2</span> xxx.py</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; py-<span class="number">3</span> xxx.py</div></pre></td></tr></table></figure>
<p>当然，如果你装的版本更多，你可以指定得更详细，譬如</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; py-<span class="number">3</span>.<span class="number">3</span> xxx.py</div></pre></td></tr></table></figure>
<p>但是如果指定的版本不存在，那么就会报错</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Requested Python version (<span class="number">3</span>.<span class="number">3</span>) <span class="keyword">not</span> installed</div></pre></td></tr></table></figure>
<p>本质上，<code>py.exe</code> 只是接收了第一个参数，然后查找参数对应的版本的 <code>python.exe</code>，然后把剩下的参数转给它。同样在 <code>C:\Windows\</code>下另外还有一个 <code>pyw.exe</code> 对应 <code>pythonw.exe</code>。</p>
<p>不过每次都要指定也太烦了，每次运行前都要先想想这是哪个版本的代码，这个其实不是在写的时候已经决定好了吗？跟Linux类似地，还是写shebang。</p>
<h3 id="Shebang-指定"><a href="#Shebang-指定" class="headerlink" title="Shebang 指定"></a>Shebang 指定</h3><p>个人认为Windows 下面的，严格来说应该不算shebang，只是模仿了这种形式。毕竟在Linux下，shebang所以是写给shell解析的，而这里其实是给 py.exe 解析的。  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! python2</span></div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! python3</span></div></pre></td></tr></table></figure>
<p>如果我们写的是跨平台的代码，Windows和Linux都要跑呢？这种伪shebang  在 Linux并不被接受。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash: ./test_shebang.py: python3: 解释器错误: 没有那个文件或目录</div></pre></td></tr></table></figure>
<p>很简单，两边都写Linux风的shebang就好了。即使Windows下并不存在 <code>/usr/bin/python3</code> 这么个东西，一样可以运行。（所以才说它是个伪shebang，其实只是给py 解析的参数而已）</p>
<h3 id="双击执行"><a href="#双击执行" class="headerlink" title="双击执行"></a>双击执行</h3><p>双击执行当然没办法给 <code>-2</code> 这样的参数，所以要在代码里面写上shebang。</p>
<p>同时为了让它生效，必须确认 <code>.py</code> 文件关联的是 <code>py.exe</code>，而不是某个版本的 <code>python.exe</code>。<br>对着某个 <code>.py</code> 文件，右键查看属性 -&gt; 打开方式，确认一下。<br>如果最后安装的是Python3.3 以上的版本，貌似会自动给关联 <code>py.exe</code>。不过不是也没关系，自己改过来就好。</p>
<p>类似的，如果是GUI程序，可以把后缀改为 <code>.pyw</code>，同时关联 <code>pyw.exe</code>。<br>嗯……其实区别只是，<code>pyw.exe</code> 会将调用转给 <code>pythonw.exe</code>，跟 <code>python.exe</code> 相比，运行时不会显示命令行黑窗 （因为有GUI给你看嘛，还看什么小黑窗）。调试的时候，可以临时把文件名改为 <code>.py</code> 看输出。<br>不过，个人更推荐使用 <code>logging</code> 输出详细的调试信息。</p>
<h2 id="pip-for-win"><a href="#pip-for-win" class="headerlink" title="pip for win"></a>pip for win</h2><p>要庆幸的是，Python3.4 for win 已经自带了 pip。所以我只要为2.5安装即可。</p>
<p>实测发现，2.5实在太旧了（2.5的时代还没有pip吧），用pip自动安装2.5下的包，基本都会出错（其实是选了声明支持2.x 的包，结果里面有2.6以上的语法，会出错），<strong>所以给2.5安装pip实用价值不大。</strong> 我装2.5 本来就是为可能的测试预留的，没有必要花大力气，真有需要也可以setuptools 安装，所以最后放弃了折腾。</p>
<p>如果是Windows下的2.7 安装pip:</p>
<ol>
<li>安装对应版本的setuptools<br> <a href="https://pypi.python.org/pypi/setuptools" target="_blank" rel="external">setuptools</a> ，留意不同版本的安装方法略有差别</li>
<li><a href="https://pypi.python.org/pypi/pip" target="_blank" rel="external">pip</a> ，下载对应的pip包并解压，在解压后的目录执行  <code>&gt; py -2 setup.py install</code></li>
</ol>
<p>这之后，就可以</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;py -<span class="number">2</span> -m pip</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;py -<span class="number">3</span> -m pip</div></pre></td></tr></table></figure>
<p><s>不方便的地方是，没有 pip2 / pip3 …… </s><br>其实是有的，不过要先将各个版本安装目录下的 <code>Scripts</code> 目录加入Path 环境变量。</p>
<p>加入之后，<code>pip</code> 指向的版本，取决于你将哪个目录放在前（因为两边都有pip，看哪个先命中），然后具体指定版本，就要看Scripts下都有那些文件了。3.x 下应该 <code>pip3</code> 和 <code>pip3.x</code>都有，但是2.5 下 只有 <code>pip-2.5</code> 没有 <code>pip2</code> （其实跟上面Linux下的情况基本一致）。</p>
<hr>
<p><strong><em>以下是针对2.5的操作，包含不必要的试错，主要是无用功，留作供我日后参考。</em></strong></p>
<p>跟2.7类似，也是两步</p>
<ol>
<li><p>安装setuptools。因为支持2.5的setuptools是1.x版本，不能用最新的，而要用这个链接 <a href="https://raw.githubusercontent.com/pypa/setuptools/bootstrap-py24/ez_setup.py" target="_blank" rel="external">Setuptools 1.x</a></p>
</li>
<li><p>下载最新的支持Python2 的pip包，当前这个时刻是<a href="https://pypi.python.org/pypi/pip/8.1.2" target="_blank" rel="external">8.1.2</a>，解压，在解压后的目录执行 <code>&gt; py -2 setup.py install</code></p>
</li>
</ol>
<p>结果报语法错误。仔细一看，原来 8.1.2 最老只支持 2.6，重新找，又下载了 支持 2.5 的 1.4.1。结果依然有语法错误。但是这次支持版本信息没错啊，只好自己去看报错信息。</p>
<p>看代码的结论是，pip1.4.1 声称支持 Python2.5，它还是引入了Python2.6 为 Python3 准备的过渡语法 <code>b&#39;&#39;</code>，以至于一运行就有错误。实际上支持2.5的最新pip版本是 <a href="https://pypi.python.org/pypi/pip/1.3.1" target="_blank" rel="external">pip1.3.1</a>。</p>
<p>折腾至此，实际上已经费了好多时间和精力，总算把 pip1.3.1 给 2.5 安上了。那么我就来安装一些包看看。</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&gt;pip-<span class="number">2</span>.<span class="number">5</span> install virtualenv</div><div class="line">Downloading/unpacking virtualenv</div><div class="line"><span class="function">Exception:</span></div><div class="line">...</div><div class="line">...</div><div class="line">    <span class="title">raise</span> <span class="title">NoSSLError</span>()</div><div class="line"><span class="title">NoSSLError</span>:</div><div class="line">###################################################################</div><div class="line">##  <span class="title">You</span> <span class="title">don</span>'<span class="title">t</span> <span class="title">have</span> <span class="title">an</span> <span class="title">importable</span> <span class="title">ssl</span> <span class="title">module</span>. <span class="title">You</span> <span class="title">are</span> <span class="title">most</span>        ##</div><div class="line">##  <span class="title">likely</span> <span class="title">using</span> <span class="title">Python</span> 2.5, <span class="title">which</span> <span class="title">did</span> <span class="title">not</span> <span class="title">include</span> <span class="title">ssl</span>           ##</div><div class="line">##  <span class="title">support</span> <span class="title">by</span> <span class="title">default</span>. <span class="title">In</span> <span class="title">this</span> <span class="title">state</span>, <span class="title">we</span> <span class="title">can</span> <span class="title">not</span> <span class="title">provide</span>        ##</div><div class="line">##  <span class="title">ssl</span> <span class="title">certified</span> <span class="title">downloads</span> <span class="title">from</span> <span class="title">PyPI</span>.                           ##</div><div class="line">##                                                               ##</div><div class="line">##  <span class="title">You</span> <span class="title">can</span> <span class="title">do</span> <span class="title">one</span> <span class="title">of</span> 2 <span class="title">things</span>:                                  ##</div><div class="line">##   1) <span class="title">Install</span> <span class="title">this</span>: <span class="title">https</span>://<span class="title">pypi.python.org</span>/<span class="title">pypi</span>/<span class="title">ssl</span>/          ##</div><div class="line">##      (<span class="title">It</span> <span class="title">provides</span> <span class="title">ssl</span> <span class="title">support</span> <span class="title">for</span> <span class="title">older</span> <span class="title">Pythons</span> )             ##</div><div class="line">##   2) <span class="title">Use</span> <span class="title">the</span> --<span class="title">insecure</span> <span class="title">option</span> <span class="title">to</span> <span class="title">allow</span> <span class="title">this</span> <span class="title">insecurity</span>       ##</div><div class="line">##                                                               ##</div><div class="line">##  <span class="title">For</span> <span class="title">more</span> <span class="title">details</span>, <span class="title">go</span> <span class="title">to</span> <span class="title">the</span>  "<span class="title">SSL</span> <span class="title">Certificate</span> <span class="title">Verification</span>"  ##</div><div class="line">##  <span class="title">section</span> <span class="title">located</span> <span class="title">here</span>:                                        ##</div><div class="line">##     <span class="title">http</span>://<span class="title">www.pip</span>-<span class="title">installer.org</span>/<span class="title">en</span>/<span class="title">latest</span>/<span class="title">logic.html</span>         ##</div><div class="line">##                                                               ##</div><div class="line">###################################################################</div></pre></td></tr></table></figure>
<p>2.5 默认没有SSL包，而pip需要用SSL下载包……</p>
<p>好，我先安装SSL总可以吧</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;pip-<span class="number">2</span>.<span class="number">5</span> install ssl</div><div class="line">Downloading/unpacking ssl</div><div class="line"><span class="function">Exception:</span></div><div class="line">...</div><div class="line">...</div><div class="line">    <span class="title">raise</span> <span class="title">NoSSLError</span>()</div><div class="line"><span class="title">NoSSLError</span>:</div></pre></td></tr></table></figure>
<p>变成了先有鸡还是现有蛋的死循环了…</p>
<p>那我关掉加密传输不要SSL总可以了吧…</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&gt;pip-<span class="number">2</span>.<span class="number">5</span> install virtualenv --insecure</div><div class="line">Downloading/unpacking virtualenv</div><div class="line">  Downloading virtualenv-<span class="number">15</span>.<span class="number">0</span>.<span class="number">2</span>.tar.gz (<span class="number">1</span>.<span class="number">8</span>MB): <span class="number">1</span>.<span class="number">8</span>MB downloaded</div><div class="line">  Running setup.py egg_info <span class="keyword">for</span> package virtualenv</div><div class="line">    ...\virtualenv\setup.py:<span class="number">51</span>: Warning: 'with' will become a reserved keyword <span class="keyword">in</span> Python <span class="number">2</span>.<span class="number">6</span></div><div class="line">    Traceback (most recent <span class="keyword">call</span> last):</div><div class="line">      File "&lt;string&gt;", line <span class="number">16</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">      File "...\virtualenv\setup.py", line <span class="number">51</span></div><div class="line">        with open(os.<span class="built_in">path</span>.join(here, *paths)) as f:</div><div class="line">                ^</div><div class="line"><span class="function">    SyntaxError: <span class="title">invalid</span> <span class="title">syntax</span></span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>额，又是引进了 2.6 的语法，这次是关键字 <code>with</code>…</p>
<p>看来 pip 对 2.5 并不友好。pip 的本意是包管理的自动化。如此折腾就违反初衷了。反正 2.5 不是用来开发用的，偶尔需要什么包，手动安装一下也不费什么事，所以就此打住，不折腾pip了。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;高中第一次听说Python，第一次写大概在大三到大四之间。毕业后成为了一个Android码农，Python不是主力语言，但零零星星写过一些顺手的小东西，而且主要在公司。&lt;/p&gt;
&lt;p&gt;家里的电脑本来就用得不多，还经历了多次重装。旧电脑全格了，从Win+Linux双系统变成了Linux专用；新电脑经历了升Win10之后几次系统崩溃C盘重置，后来又从32改64。&lt;/p&gt;
&lt;p&gt;结果D盘的东西虽然还在，但是各种配置乱得不行。譬如说这会要写Python，各种配置都要重新弄。反正都好几年前装的，干脆重新安装配置一遍。&lt;/p&gt;
&lt;p&gt;不看不知道，果然很多东西都变了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://jaycechant.info/tags/Python/"/>
    
      <category term="pip" scheme="http://jaycechant.info/tags/pip/"/>
    
      <category term="virtualenv" scheme="http://jaycechant.info/tags/virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>博客迁移到了Hexo</title>
    <link href="http://jaycechant.info/2016/migrate-to-hexo/"/>
    <id>http://jaycechant.info/2016/migrate-to-hexo/</id>
    <published>2016-06-27T07:46:12.000Z</published>
    <updated>2016-11-08T09:37:36.076Z</updated>
    
    <content type="html"><![CDATA[<p>四年沉寂，重新出发，将博客从Octopress 迁移到了 Hexo</p>
<a id="more"></a>
<hr>
<h1 id="源起"><a href="#源起" class="headerlink" title="源起"></a>源起</h1><p>大四临近毕业的时候，发现了Octopress，并且兴匆匆地建了自己的博客。</p>
<p>然而没写两篇文章，一入职，就忙起来了，从入职培训，到后来项目赶着上市时不停的加班……</p>
<p>我本来也是比较懈惰的人，加之公司安保极严，在公司的成果无法带出，加班之余便再无更新，以至荒废。</p>
<p>眨眼四年过去，工作内容渐渐从新鲜有趣变成了单调重复，也觉得自己不适合通信硬件行业（软件岗，但是围绕硬件开发OS），心一横，裸辞了。美其名曰，在家充电。</p>
<p>这四年里，深深体会到，留下文字记录的重要性。软件这行，涉及知识之多，更新之快，以我等凡人，哪怕自己踩过的坑，当时再刻骨铭心，事后回忆根本记不得细节，半天最多拼凑出一点线头，乱扯一通。这便多了许多无用功。</p>
<p>所以在家面壁的第一件事，就是博客重开。如果说当年年少naive，存有一点虚荣，希望写文能得到关注；那么现在纯粹是为自己做个记录。至于有没有别人看，倒是一点不重要了。</p>
<p>就像我还在公司时，偶尔折腾一些新鲜且实用的技术做分享，最终发现感兴趣的人寥寥无几 —— 一些人觉得跟他业务无关，一些人觉得这太难懂，一些人觉得这太显浅……</p>
<p><strong>以后关于技术上的经历，尽量事无巨细在此记录；在老东家闲时研究的一些跟商业秘密无关的东西，我也会尽量回忆出来整理在此。</strong></p>
<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>四年里面，笔记本已经换过了。重新翻出Octopress ，实际上已经不能跑了，还得重新配置一遍。想当初有些gem需要Devkit编译，又麻烦又慢，坑不是一般的多。关键当初记录这些坑的博文还没写完……</p>
<p>这种情况下，发现了Hexo。</p>
<p>说到底，用Github-pages 搭博客，要的是静态HTML+js。然而总是手动写当然效率低，Octopress 不过提供了工具和模板，从Markdown 生成HTML。<br>这样的事，Hexo干得也差不多，而且因为基于Node.js，不像Octopress涉及那么多语言，配置容易太多了，速度快太多了。（没记错的话，入口是Ruby，有些gem基于C++所以要编译，代码高亮貌似Python，而页面渲染，一定有引用js的库……真是大杂烩）</p>
<p>当然并不是Octopress 就不好了，从Hexo 主页的描述来看，Hexo作为后来者，借鉴了很多Octopress 的优点，同时躲开了很多Octopress 掉了的坑。</p>
<h1 id="How-to"><a href="#How-to" class="headerlink" title="How-to"></a>How-to</h1><p><strong>注意！！ 在当前这个时间点（2016-06），Hexo 还有大量的提交，我以下说的内容，随时可能因为版本的迭代而过时。</strong></p>
<p>Hexo 依赖两个东西</p>
<ul>
<li>Node.js</li>
<li>Git</li>
</ul>
<p>关于Node.js 的安装，我前面一篇关于 <code>nodePPT</code> 的文章有介绍，不再赘述。Git 的话我也想整理一些文字，不过在那之前，网上相关的信息也非常多，应该很好解决。</p>
<p>有了这两个东西之后，安装Hexo无非就是一行命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>其实，这些内容，甚至包括Git 和 Node.js 的安装，<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">官方文档</a>都有简要提及，甚至连从Octopress 迁移都有对应说明。所以官方文档有提到的我都不说了。后面主要记录一下遇到 / 我觉得可能有人会遇到 的坑，以及补充官方文档不够详尽 / 显眼之处。</p>
<h2 id="任意目录运行hexo"><a href="#任意目录运行hexo" class="headerlink" title="任意目录运行hexo"></a>任意目录运行hexo</h2><p>概述页面的评论有人问，成功安装之后，报这个错误</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">‘hexo’不是内部或者外部命令，也不是可运行的程序或批处理文件</div></pre></td></tr></table></figure>
<p>明眼人一看就知道是path环境变量的问题，解决办法就是把node的安装目录加入环境变量。如果这样都还不知道怎么办，详细设置请看 <code>nodePPT</code> 的<a href="https://jaycechant.github.io/2016/intro-to-nodeppt/" target="_blank" rel="external">那篇文章</a>。</p>
<h2 id="语言配置"><a href="#语言配置" class="headerlink" title="语言配置"></a>语言配置</h2><p>文档只告诉你可以配置语言，但是并没有告诉你有什么语言可以选，也没告诉每个语言对应的值</p>
<p>譬如像我这种长期写Android 代码的，就会习惯性写 <code>zh-rCN</code></p>
<p>实际上语言文件在 <code>themes\&lt;主题&gt;\language\</code> 下面</p>
<p>我暂时不折腾，用默认的 landscape 主题，那么对应简体中文的配置就是 <code>zh-CN</code></p>
<h2 id="Octopress-的-Categories-V-S-Hexo-的-Tags"><a href="#Octopress-的-Categories-V-S-Hexo-的-Tags" class="headerlink" title="Octopress 的 Categories V.S. Hexo 的 Tags"></a>Octopress 的 Categories V.S. Hexo 的 Tags</h2><p>在Octopress 如果要增加标签来分类，用的是</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">categories:</span> [tag1, tag2, tag3]</div></pre></td></tr></table></figure>
<ul>
<li>tag1</li>
<li>tag2</li>
<li>tag3</li>
</ul>
<p>然后在每个标签下，都能找到这篇文章</p>
<p>文章迁移到了 Hexo 之后，效果就变成了嵌套关系</p>
<ul>
<li>tag1<ul>
<li>tag2<ul>
<li>tag3</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>原来Hexo 将分类功能细化成了 分类 和 标签，原来的 <strong>分类</strong> 功能有了层次关系，譬如</p>
<ul>
<li>中国<ul>
<li>广东省<ul>
<li>广州市</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>如果想像以前那样用互相独立的标签，Hexo 的用法是</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">tags:</span></div><div class="line"><span class="bullet">-</span> tag1</div><div class="line"><span class="bullet">-</span> tag2</div><div class="line"><span class="bullet">-</span> tag3</div></pre></td></tr></table></figure>
<h2 id="关于Git"><a href="#关于Git" class="headerlink" title="关于Git"></a>关于Git</h2><p>部署时关于Git的问题，其实<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">官方文档-部署</a>是有提到的。然而还是看到网上很多人会问，所以我把关于安装相关插件和相关命令的章节链接放这里。估计多数人是漏了安装 <code>hexo-deployer-git</code> 这个插件。可以通过以下命令安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>另外，如果你像我一样用Windows，平时用的Gitbash，部署时会报一些错。</p>
<p>那是因为Gitbash启动时会加载一些参数，这些参数在cmd下是无效的，你得重新配置一次。</p>
<p>所以最好的办法是，你直接在Gitbash下运行hexo。</p>
<h2 id="关于Disqus-或国内的多说-与-主题"><a href="#关于Disqus-或国内的多说-与-主题" class="headerlink" title="关于Disqus(或国内的多说) 与 主题"></a>关于Disqus(或国内的多说) 与 主题</h2><p>我本来一点不想折腾外观的东西，能用就行，但评论功能无论如何是需要的。</p>
<p>然而我并没有找到配置的地方，也记不起当初Octopress 怎么配置。于是去看了Disqus 的说明，发现只要加一个对应的<code>&lt;Div&gt;</code>加载js，提供shortname 和 当前链接 两个参数即可。</p>
<p>于是想在主题里加，翻了半天不知道在哪加好。然后看别人的主题都有评论，心想算了，还是换个主题吧，顺便换个对中国本土优化过的主题也好。改虽说不难，但改好看也不简单，不想在小事上费神。</p>
<p>看了半天，算是对 <strong>Next</strong> 和 <strong>Jacman</strong> 两个主题比较感兴趣，但试用效果并不是我想要的，最终换回了基于官方主题 <strong>landscape</strong> 的 <strong>landscape-plus</strong>，_config.yml里写明支持 <strong>多说</strong>。</p>
<p><strong>这里提醒大家，知乎上有关于Hexo主题的讨论，总结得挺好，至少比官方那几个主题候选强多了，大家可以去看一下。</strong></p>
<p>我想既然支持多说，disqus应该没问题吧，就搜了一下源码，发现加载位置原来在 <code>after-footer.ejs</code> ，果然也支持disqus，只是没提。</p>
<p>因为 <strong>landscape-plus</strong> 基于 <strong>landscape</strong>，我猜其实一开始就支持disqus了，就去翻源码，果然… 无端绕了一个圈，应该一开始就搜源码…就当见识一下其他主题吧，而且现在的主题虽然样子没变，对本土优化过也不坏。</p>
<p>实际上就是 <code>_config.yml</code> 里一行的事：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Disqus</span></div><div class="line"><span class="attr">disqus_shortname:</span> your_dqs_sn</div><div class="line"><span class="comment"># Duoshuo</span></div><div class="line"><span class="attr">duoshuo_shortname:</span> your_ds_sn</div></pre></td></tr></table></figure>
<p>几个要点：</p>
<ul>
<li><strong>landscape</strong> 只支持disqus</li>
<li><strong>landscape-plus</strong> 同时支持 disqus 和 多说，但是都配置的话，优先加载多说，然后忽略disqus</li>
<li>代码一眼就懂，只要知道位置就能自己动手修改：<code>themes/&lt;theme_name&gt;/layout/_partial/after-footer.ejs</code>，其他主题应该也类似</li>
<li>shortname 的配置写在主题的 <code>_config.yml</code>， 得写在全局配置，至少我是这样。估计是因为引用时是 <code>config.disqus_shortname</code> 而不是 <code>theme.disqus_shortname</code>。</li>
</ul>
<h2 id="关于插入HTML代码-与-Hexo-的换行"><a href="#关于插入HTML代码-与-Hexo-的换行" class="headerlink" title="关于插入HTML代码 与 Hexo 的换行"></a>关于插入HTML代码 与 Hexo 的换行</h2><p>习惯使用 Markdown 的朋友知道，Markdown是支持直接写HTML代码的。</p>
<p>这点带来了很大的方便：Markdown 足够小巧简洁，满足大多数需要；一旦有超出支持范围的需求，大可临时写一下HTML。</p>
<p>但是，这点在Hexo，好像突然不满足了。我插入的HTML，变成了一堆很奇怪的东西。</p>
<p>翻生成出来的HTML，找到原因：hexo 在我每一行代码后面，都插了一个<code>&lt;br&gt;</code>…… 我回去再翻我的md文件，行末并没有两个空格。由此我发现了 Hexo 与官方 Markdown 的一个差别，就是Hexo 为了你写文章方便，不需要你行末加两个空格，都会给你一个<code>&lt;br&gt;</code>。</p>
<p>然而这点让我自己插入的HTML(准确说是MathML)成了这样：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mrow</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>    <span class="tag">&lt;<span class="name">mi</span>&gt;</span>x<span class="tag">&lt;/<span class="name">mi</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>    <span class="tag">&lt;<span class="name">mo</span>&gt;</span>=<span class="tag">&lt;/<span class="name">mo</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>    <span class="tag">&lt;<span class="name">mfrac</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>...</div></pre></td></tr></table></figure>
<p>多了这么多<code>&lt;br&gt;</code>根本不能好好地被解析。</p>
<p>然后发现官方的处理方法是，加raw标签</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">raw</span> %&#125;</span><span class="xml"></span></div><div class="line">some raw content</div><div class="line"><span class="template-tag">&#123;% <span class="name">endraw</span> %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
<p>在里面的内容，会原样输出。详细说明在<a href="https://hexo.io/zh-cn/docs/tag-plugins.html#Raw" target="_blank" rel="external">官方文档这个地方</a>。</p>
<h2 id="404页、about页"><a href="#404页、about页" class="headerlink" title="404页、about页"></a>404页、about页</h2><p><s>404页我直接用了腾讯的404公益的代码，就是随便写一个最基本的HTML，然后在body部分加载以下js即可</s></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://www.qq.com/404/search_children.js"</span> charset=<span class="string">"utf-8"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>后来因为腾讯公益的404会替换整个页面，而且无法提供https的链接，我又改为使用<a href="http://yibo.iyiyun.com/Home/Index/web404" target="_blank" rel="external">益云的404</a>了。</p>
<p>在 <code>hexo/source</code> 下创建 404.md</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line"><span class="section">title: 抱歉，你要访问的网页没有找到...</span></div><div class="line">---</div><div class="line"></div><div class="line">&#123;% raw %&#125;</div><div class="line"><span class="xml"><span class="comment">&lt;!-- 你的益云404代码 --&gt;</span></span></div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure>
<p>至于about页，可以直接</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page about</div></pre></td></tr></table></figure>
<p>然后修改 <code>/source/about/index.md</code> 即可。跟写博文一样，最后生成出统一风格页面。</p>
<p>由于毕竟不是博文，提醒</p>
<ol>
<li>删掉时间</li>
<li>不要添加categories或者tags</li>
</ol>
<h2 id="使用自己的域名"><a href="#使用自己的域名" class="headerlink" title="使用自己的域名"></a>使用自己的域名</h2><p>首先要买一个域名。</p>
<p>还没写完…</p>
<h2 id="atom-xml-和-sitemap"><a href="#atom-xml-和-sitemap" class="headerlink" title="atom.xml 和 sitemap"></a>atom.xml 和 sitemap</h2><p>该章节参考了<a href="http://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="external">Hexo搭建Github静态博客</a></p>
<p>分别要安装对应的插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-feed --save</div><div class="line">npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure>
<p>稍微解释一下 <code>--save</code> 参数。有这个参数的情况下，对应的module会作为依赖自动写入当前目录的 <code>package.json</code> 。我是在 博客的根目录下执行的，那么会自动添加依赖。详情可以参考<a href="http://www.cnblogs.com/PeunZhang/p/5553574.html" target="_blank" rel="external">npm 常用命令详解</a> 。</p>
<p>然后在 <code>根目录\_config.yml</code> 添加以下内容来启用插件</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="attr">Plugins:</span></div><div class="line"><span class="bullet">-</span> hexo-generator-feed</div><div class="line"><span class="bullet">-</span> hexo-generator-sitemap</div><div class="line"></div><div class="line"><span class="comment">#sitemap</span></div><div class="line"><span class="attr">sitemap:</span></div><div class="line"><span class="attr">  path:</span> sitemap.xml</div><div class="line"></div><div class="line"><span class="comment">#Feed Atom</span></div><div class="line"><span class="attr">feed:</span></div><div class="line"><span class="attr">  type:</span> atom</div><div class="line"><span class="attr">  path:</span> atom.xml</div><div class="line"><span class="attr">  limit:</span> <span class="number">20</span></div></pre></td></tr></table></figure>
<p>如果想在导航上显示，可以在主题的 <code>_config.yml</code> 中添加 （最后两行是新增内容）</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Header</span></div><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  Home:</span> /</div><div class="line"><span class="attr">  Archives:</span> /archives</div><div class="line"><span class="attr">  Github:</span> https://github.com/xxx</div><div class="line"><span class="attr">  About:</span> /about</div><div class="line"><span class="attr">  Sitemap:</span> /sitemap.xml</div><div class="line"><span class="attr">rss:</span> /atom.xml</div></pre></td></tr></table></figure>
<hr>
<h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2><p>其他发现的坑，也会陆续更新在这里。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;四年沉寂，重新出发，将博客从Octopress 迁移到了 Hexo&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jaycechant.info/tags/blog/"/>
    
      <category term="node.js" scheme="http://jaycechant.info/tags/node-js/"/>
    
      <category term="hexo" scheme="http://jaycechant.info/tags/hexo/"/>
    
      <category term="git" scheme="http://jaycechant.info/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to MathJax &amp; some samples</title>
    <link href="http://jaycechant.info/2016/intro-to-mathjax/"/>
    <id>http://jaycechant.info/2016/intro-to-mathjax/</id>
    <published>2016-06-21T10:04:01.000Z</published>
    <updated>2016-07-12T14:30:31.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-MathJax"><a href="#什么是-MathJax" class="headerlink" title="什么是 MathJax"></a>什么是 MathJax</h1><p><strong>注：本文一开始是为在nodePPT上使用 Mathjax 所写，并非针对Hexo。虽然大同小异，但是部分配置可能存在差别，请知悉。</strong></p>
<blockquote>
<p>MathJax is a cross-browser JavaScript library that displays mathematical notation in web browsers, using MathML, TeX and AsciiMath markup.</p>
<p>MathJax 是一个跨浏览器的 JavaScript 库，可以在网页上显示数学式，使用 MathML, TeX 和 AsciiMath 标记语言编写。</p>
</blockquote>
<p>这解答了你的问题了吗？ 很可能没有。</p>
<p>你可能会接着问，什么是 MathML, TeX 和 AsciiMath？ 什么是标记语言？</p>
<p>嗯……</p>
<a id="more"></a>
<h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><ul>
<li>1969年，大神 高德纳(D. E. Knuth) 的巨著 《计算机程序设计艺术(The Art of Computer Programming)》 第一卷出版 </li>
<li>1976年，他收到了书的第二版，排版质量非常糟糕，他于是开始寻找高质量的数字排版系统</li>
<li>1977年，在遍寻无果之后，他开始自己动手写。 计划1978年完成，结果一直写到1989年，最后就成为了TeX。 由于对 数学式 排版的良好支持，在学术写作中大受欢迎，并影响了日后的排版系统。</li>
<li>1985年，计算机科学家 兰伯特(L. Lamport) 基于TeX 开发出宏包 LaTeX，包含大多数需要用的宏，方便一般人使用<strong><em>（注：由于LaTeX的流行，有时网上描述的时候会将TeX 和 LaTeX 混淆）</em></strong></li>
<li>1999年，W3C(万维网联盟)提出 基于XML标准来描述数学符号和公式的标准 MathML，目前最新的版本是2010年发布的3.0</li>
<li>2009年，美国数学学会(American Mathematical Society) 为首的多个组织发起 MathJax，兼容 TeX, AsciiMath, MathML</li>
</ul>
<p><strong>不好意思，我没有找到AsciiMath的出处和年份。 简单来说，AsciiMath要达到的效果是，只用Ascii字符就能写出数学公式。</strong></p>
<h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>这几种有啥差别？</p>
<p>我们来举个栗子来看一下</p>
<p>譬如说要显示这么一个公式</p>
<p>$$x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}$$</p>
<p>我们来看看有啥不同</p>
<h3 id="MathML"><a href="#MathML" class="headerlink" title="MathML"></a>MathML</h3><p>我们先来看看MathML。</p>
<p>MathML是XML的一个拓展，特点是，冗余但精确。</p>
<p>它可以同时表示视觉义 和 逻辑义，这对读屏软件是友好的。</p>
<p>首先是显示效果：</p>

<math mode="display" xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow>
    <mi>x</mi>
    <mo>=</mo>
    <mfrac>
      <mrow>
        <mo form="prefix">&#x2212;<!-- − --></mo>
        <mi>b</mi>
        <mo>&#x00B1;<!-- &PlusMinus; --></mo>
        <msqrt>
          <msup>
            <mi>b</mi>
            <mn>2</mn>
          </msup>
          <mo>&#x2212;<!-- − --></mo>
          <mn>4</mn>
          <mo>&#x2062;<!-- &InvisibleTimes; --></mo>
          <mi>a</mi>
          <mo>&#x2062;<!-- &InvisibleTimes; --></mo>
          <mi>c</mi>
        </msqrt>
      </mrow>
      <mrow>
        <mn>2</mn>
        <mo>&#x2062;<!-- &InvisibleTimes; --></mo>
        <mi>a</mi>
      </mrow>
    </mfrac>
  </mrow>
</math>

<p>然后源码长这样：</p>
<p>我们可以留意到，一些视觉上被省略、不显示（Invisible）的符号，在MathML中也有对应的转义实体对应。这些符号的存在，首先是保证了公式没有歧义；其次，读屏软件可以把这些符号读出来，方便残障人士理解。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">math</span> <span class="attr">mode</span>=<span class="string">"display"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1998/Math/MathML"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mrow</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mi</span>&gt;</span>x<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mo</span>&gt;</span>=<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mfrac</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">mrow</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mo</span> <span class="attr">form</span>=<span class="string">"prefix"</span>&gt;</span>&amp;#x2212;<span class="comment">&lt;!-- − --&gt;</span><span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mi</span>&gt;</span>b<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mo</span>&gt;</span>&amp;#x00B1;<span class="comment">&lt;!-- &amp;PlusMinus; --&gt;</span><span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">msqrt</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">msup</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">mi</span>&gt;</span>b<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">mn</span>&gt;</span>2<span class="tag">&lt;/<span class="name">mn</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">msup</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">mo</span>&gt;</span>&amp;#x2212;<span class="comment">&lt;!-- − --&gt;</span><span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">mn</span>&gt;</span>4<span class="tag">&lt;/<span class="name">mn</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">mo</span>&gt;</span>&amp;#x2062;<span class="comment">&lt;!-- &amp;InvisibleTimes; --&gt;</span><span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">mi</span>&gt;</span>a<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">mo</span>&gt;</span>&amp;#x2062;<span class="comment">&lt;!-- &amp;InvisibleTimes; --&gt;</span><span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">mi</span>&gt;</span>c<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">msqrt</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">mrow</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">mrow</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mn</span>&gt;</span>2<span class="tag">&lt;/<span class="name">mn</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mo</span>&gt;</span>&amp;#x2062;<span class="comment">&lt;!-- &amp;InvisibleTimes; --&gt;</span><span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mi</span>&gt;</span>a<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">mrow</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mfrac</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">mrow</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">math</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="LaTeX-TeX"><a href="#LaTeX-TeX" class="headerlink" title="LaTeX(TeX)"></a>LaTeX(TeX)</h3><p>然后是LaTeX：</p>
<p>显示效果（根本没啥区别，因为最终都转换成MathML）：</p>
<p>$$x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}$$</p>
<p>LaTeX 源码：</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="formula">$$x = <span class="tag">\<span class="name">frac</span><span class="string">&#123;-b \pm \sqrt&#123;b^2 - 4ac&#125;</span></span>&#125;&#123;2a&#125;$$</span></div></pre></td></tr></table></figure>
<p>而通过F12(浏览器的调试模式)看到的代码是这样的：</p>
<p>可以看到经过转换之后，效果一样，而且代码也差不多，但是不可见符号并不能自动理解并且添加。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">math</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1998/Math/MathML"</span> <span class="attr">display</span>=<span class="string">"block"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mi</span>&gt;</span>x<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mo</span>&gt;</span>=<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mfrac</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mrow</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">mo</span>&gt;</span>−<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">mi</span>&gt;</span>b<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">mo</span>&gt;</span>±<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">msqrt</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">msup</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">mi</span>&gt;</span>b<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">mn</span>&gt;</span>2<span class="tag">&lt;/<span class="name">mn</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">msup</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">mo</span>&gt;</span>−<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">mn</span>&gt;</span>4<span class="tag">&lt;/<span class="name">mn</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">mi</span>&gt;</span>a<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">mi</span>&gt;</span>c<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">msqrt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">mrow</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mrow</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">mn</span>&gt;</span>2<span class="tag">&lt;/<span class="name">mn</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">mi</span>&gt;</span>a<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">mrow</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mfrac</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">math</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="AsciiMath"><a href="#AsciiMath" class="headerlink" title="AsciiMath"></a>AsciiMath</h3><p>显示效果有点不大对劲：</p>
<p>$$x = (-b +- sqrt(b^2 – 4ac)) / (2a)$$</p>
<p>源码：</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="formula">$$x = (-b +- sqrt(b^2 – 4ac)) / (2a)$$</span></div></pre></td></tr></table></figure>
<p>生成的MathML：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">math</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1998/Math/MathML"</span> <span class="attr">display</span>=<span class="string">"block"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mi</span>&gt;</span>x<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mo</span>&gt;</span>=<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mo</span> <span class="attr">stretchy</span>=<span class="string">"false"</span>&gt;</span>(<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mo</span>&gt;</span>−<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mi</span>&gt;</span>b<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mo</span>&gt;</span>+<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mo</span>&gt;</span>−<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mi</span>&gt;</span>s<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mi</span>&gt;</span>q<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mi</span>&gt;</span>r<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mi</span>&gt;</span>t<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mo</span> <span class="attr">stretchy</span>=<span class="string">"false"</span>&gt;</span>(<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">msup</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mi</span>&gt;</span>b<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mn</span>&gt;</span>2<span class="tag">&lt;/<span class="name">mn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">msup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mo</span>&gt;</span>–<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mn</span>&gt;</span>4<span class="tag">&lt;/<span class="name">mn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mi</span>&gt;</span>a<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mi</span>&gt;</span>c<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mo</span> <span class="attr">stretchy</span>=<span class="string">"false"</span>&gt;</span>)<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mo</span> <span class="attr">stretchy</span>=<span class="string">"false"</span>&gt;</span>)<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mrow</span> <span class="attr">class</span>=<span class="string">"MJX-TeXAtom-ORD"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mo</span>&gt;</span>/<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mrow</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mo</span> <span class="attr">stretchy</span>=<span class="string">"false"</span>&gt;</span>(<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mn</span>&gt;</span>2<span class="tag">&lt;/<span class="name">mn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mi</span>&gt;</span>a<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mo</span> <span class="attr">stretchy</span>=<span class="string">"false"</span>&gt;</span>)<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">math</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我是在nodePPT里面尝试使用，所以再次按F12进入调试模式，看看 MathJax的加载配置：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!-- MathJax --&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/x-mathjax-config"</span>&gt;</span><span class="javascript"></span></span></div><div class="line">  MathJax.Hub.Config(&#123;</div><div class="line">  <span class="attr">config</span>: [<span class="string">"TeX-AMS-MML_HTMLorMML.js"</span>],</div><div class="line">  <span class="attr">tex2jax</span>: &#123;<span class="attr">inlineMath</span>: [[<span class="string">'\\('</span>,<span class="string">'\\)'</span>]]&#125;&#125;);</div><div class="line">  <span class="comment">//['$','$'], 避免货币价格冲突</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/mathjax/MathJax.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>大家可能看不习惯，我给翻译一下：</p>
<p>这里配置并加载 MathJax.js，对应配置文件（”TeX-AMS-MML_HTMLorMML.js”）的意思是，加载 TeX + AMS拓展 + MathML，并且最终显示使用HTML+MathML</p>
<p>嗯，没有AsciiMath</p>
<hr>
<p>最终，我们把配置改成这样</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- MathJax --&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/x-mathjax-config"</span>&gt;</span><span class="javascript"></span></span></div><div class="line">  MathJax.Hub.Config(&#123;</div><div class="line">  <span class="attr">config</span>: [<span class="string">"TeX-MML-AM_HTMLorMML.js"</span>],</div><div class="line">  <span class="attr">tex2jax</span>: &#123;<span class="attr">inlineMath</span>: [[<span class="string">'\\('</span>,<span class="string">'\\)'</span>]]&#125;&#125;);</div><div class="line">  <span class="comment">//['$','$'], 避免货币价格冲突</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>翻译：加载 TeX + MathML + AsciiMath</p>
<p>出于我也不知道的原因，并没有配置文件同时兼容 AMS拓展 和 AsciiMath</p>
<p>与此同时，我查看了配置文件之后，发现</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MathJax.Extension.asciimath2jax=&#123;</div><div class="line">    <span class="attr">version</span>:<span class="string">"2.6.0"</span>,</div><div class="line">    <span class="attr">config</span>:&#123;</div><div class="line">        <span class="attr">delimiters</span>:[[<span class="string">"`"</span>,<span class="string">"`"</span>]],</div><div class="line">......</div></pre></td></tr></table></figure>
<p>把源码改成</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">\<span class="name">`</span></span>x = (-b +- sqrt(b^2 – 4ac)) / (2a)<span class="tag">\<span class="name">`</span></span></div></pre></td></tr></table></figure>
<p>效果就出来了</p>
<p>你问为什么多了一个反斜杠？ 因为反引号 ``` 在Markdown 是用来括起代码块的（没错这个反引号的代码块本身就是用反引号括起来的，啊，好拗口），所以要多加个反斜杠在前面，引用它本身而不转义。嗯，好麻烦，又多了一个不用 AsciiMath 的理由。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li><p>LaTeX </p>
<p>  能直接打的符号就打出来</p>
<p>  不能直接打的符号或者效果，通过 <code>\关键字</code> 转意， <code>{}</code> 表示起止范围</p>
<p>  譬如: 分数，就是 <code>\frac 分子 分母</code> ，如果 分子 和 分母 只有一个符号，那就直接写，否则就要用花括号括起来</p>
</li>
<li><p>MathML</p>
<p>  非常的精确，同时也非常的啰嗦</p>
<p>  实际上，我们用MathJax写的无论什么样的代码，最终都是变成Math显示</p>
<p>  如果你直接写MathML，那么脚本就不必帮你转换，而只需要渲染（然而脚本不会因此感谢你）</p>
</li>
<li><p>AsciiMath</p>
<p>  nodePPT 的配置没有支持 AsciiMath。 为什么呢？</p>
<p>  不用转意符，使AsciiMath非常自然，即使没有转义看起来也不费解； 但也因为这样，可能给转义带来了麻烦</p>
</li>
</ul>
<p>LaTeX 之所以使用转义符，并不是故弄玄虚，而是使特殊符号跟普通字符区分开了。</p>
<h2 id="初步结论"><a href="#初步结论" class="headerlink" title="初步结论"></a>初步结论</h2><p>大多数情况下用 LaTeX</p>
<p>极少数情况，需要用MathML</p>
<p>接下来提供一系列的实例，给大家展示一些常见的符号和公式用LaTeX 的写法</p>
<h2 id="加载和配置"><a href="#加载和配置" class="headerlink" title="加载和配置"></a>加载和配置</h2><p>如果是在自己写的HTML里加载MathJax，官方推荐的做法是在 <code>&lt;head&gt;</code> 标签加入</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> <span class="keyword">async</span></div><div class="line">  src=<span class="string">"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>不过如果使用 nodePPT， 它的模板已经帮你加载了</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!-- MathJax --&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/x-mathjax-config"</span>&gt;</span><span class="javascript"></span></span></div><div class="line">  MathJax.Hub.Config(&#123;</div><div class="line">  <span class="attr">config</span>: [<span class="string">"TeX-AMS-MML_HTMLorMML.js"</span>],</div><div class="line">  <span class="attr">tex2jax</span>: &#123;<span class="attr">inlineMath</span>: [[<span class="string">'\\('</span>,<span class="string">'\\)'</span>]]&#125;&#125;);</div><div class="line">  <span class="comment">//['$','$'], 避免货币价格冲突</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/mathjax/MathJax.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="数学环境"><a href="#数学环境" class="headerlink" title="数学环境"></a>数学环境</h2><p>使用MathJax 的时候，需要一些标志，告诉MathJax 这段文本是公式代码，另外也要告诉它这是什么代码，在标志中间的部分，就叫做数学环境</p>
<p>包括段模式(displayed) 和 行内(inline) 两种</p>
<p>查看配置或者文档，我们会发现，LaTeX 的默认分隔符是</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">    config:&#123;</div><div class="line">        <span class="attr">inlineMath</span>:[[<span class="string">"\\("</span>,<span class="string">"\\)"</span>]],</div><div class="line">        <span class="attr">displayMath</span>:[[<span class="string">"$$"</span>,<span class="string">"$$"</span>],[<span class="string">"\\["</span>,<span class="string">"\\]"</span>]],</div><div class="line">        ......</div></pre></td></tr></table></figure>
<p>不过，这个配置其实可以在加载的时候修改，nodePPT修改了行内的分隔符，不过因为跟官方一样，所以等于没改</p>
<p>可能早些版本的分隔符不是这样，会跟nodePPT或者Markdown的某些符号冲突，所以改了，结果最后MathJax官方也改了</p>
<p>还是那个经典例子</p>
<p>段模式：</p>
<p>$$x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}$$</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="formula">$$x = <span class="tag">\<span class="name">frac</span><span class="string">&#123;-b \pm \sqrt&#123;b^2 - 4ac&#125;</span></span>&#125;&#123;2a&#125;$$</span></div></pre></td></tr></table></figure>
<p>我是行内模式： \(x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}\)</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">我是行内模式： <span class="tag">\<span class="name">\</span></span>(x = <span class="tag">\<span class="name">frac</span><span class="string">&#123;-b \pm \sqrt&#123;b^2 - 4ac&#125;</span></span>&#125;&#123;2a&#125;<span class="tag">\<span class="name">\</span></span>)</div></pre></td></tr></table></figure>
<h1 id="下面列举一下常见的数学符号和式子"><a href="#下面列举一下常见的数学符号和式子" class="headerlink" title="下面列举一下常见的数学符号和式子"></a>下面列举一下常见的数学符号和式子</h1><p>(<strong><em>均为LaTeX，为简便期间，源码省略分隔符</em></strong>)</p>
<p>重复一遍基本原则：</p>
<ul>
<li>能打直接打，不能打反斜杠 <code>\</code> + 对应代码</li>
<li>效果只对单个块起效，如果不止一个字符，要用 <code>{}</code> 包成一个块</li>
</ul>
<h2 id="下标："><a href="#下标：" class="headerlink" title="下标："></a>下标：</h2><p><code>x_1</code> : \(x_1\)</p>
<p><code>x_{12}</code> : \(x_{12}\)</p>
<p>特别的是，<code>_强调_</code> 在 Markdown 里表示 <em>强调</em> ，如果有连续使用下标，下划线可能会被 Markdown 先识别处理</p>
<p><code>A_{M-1} &lt; A_{M+1}</code> : \(A<em>{M-1} &lt; A</em>{M+1}\)</p>
<p>可以通过添加反斜杠处理</p>
<p><code>A\_{M-1} &lt; A_{M+1}</code> : \(A_{M-1} &lt; A_{M+1}\)</p>
<h2 id="上标："><a href="#上标：" class="headerlink" title="上标："></a>上标：</h2><p><code>x^2</code> : \(x^2\)</p>
<p><code>x^{2a}</code> : \(x^{2a}\)</p>
<h2 id="括号-分数："><a href="#括号-分数：" class="headerlink" title="括号 分数："></a>括号 分数：</h2><p>() [] 用原来的就好（花括号<code>{}</code>因为用来分块，所以显示原始花括号要加反斜杠<code>\{\}</code>）</p>
<p>也可以用转义，区别就是，如果中间的式子特别大，原始符号不会跟着缩放，但是转义的就会</p>
<p><code>(\frac{n^2}{6} )</code> : \(( \frac{n^2}{6} )\)</p>
<p><code>\left( \frac{n^2}{6} \right)</code> : \(\left( \frac{n^2}{6} \right)\)</p>
<h2 id="根式-求和-求积-积分"><a href="#根式-求和-求积-积分" class="headerlink" title="根式 求和 求积 积分"></a>根式 求和 求积 积分</h2><p><code>\sqrt x</code> : \(\sqrt x\)</p>
<p><code>\sqrt[3]{x^2+1}</code> : \(\sqrt[3]{x^2+1}\)</p>
<p><code>\sum_1^n {x^2-1}</code> : \(\sum_1^n {x^2-1}\)</p>
<p><code>\prod_1^n {x^2-1}</code> : \(\prod_1^n {x^2-1}\)</p>
<p><code>\int_1^{\frac{\pi}{2}}{sin(x)}</code> : \(\int_1^{\frac{\pi}{2}}{sin(x)}\)</p>
<h2 id="其他特殊符号"><a href="#其他特殊符号" class="headerlink" title="其他特殊符号"></a>其他特殊符号</h2><p><code>\pm \times \div</code> : \(\pm \times \div\) </p>
<p><code>\lt \gt \le \ge \neq \not\lt</code> : \(\lt \gt \le \ge \neq \not\lt\) </p>
<p><code>\alpha \beta \gamma</code> : \(\alpha \beta \gamma\)</p>
<p><code>\infty</code> : \(\infty\)</p>
<p><code>\forall a \in A</code> : \(\forall a \in A\)</p>
<p><code>\exists B \subset A</code> : \(\exists B \subset A\)</p>
<p><code>\underbrace{a+b+ \cdots +z} _{26}</code> : \(\underbrace{a+b+ \cdots +z} _{26}\)</p>
<p>更多参考，见</p>
<ul>
<li>MathJax 主页： <a href="https://www.mathjax.org" target="_blank" rel="external">https://www.mathjax.org</a></li>
<li>官方文档： <a href="http://docs.mathjax.org" target="_blank" rel="external">http://docs.mathjax.org</a></li>
<li>两份我在网上找到的参考<ul>
<li><a href="http://mlworks.cn/posts/introduction-to-mathjax-and-latex-expression/" target="_blank" rel="external">Mathjax与LaTex公式简介</a></li>
<li><a href="http://www.mohu.org/info/symbols/symbols.htm" target="_blank" rel="external">常用数学符号的 LaTeX 表示方法</a></li>
</ul>
</li>
</ul>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是-MathJax&quot;&gt;&lt;a href=&quot;#什么是-MathJax&quot; class=&quot;headerlink&quot; title=&quot;什么是 MathJax&quot;&gt;&lt;/a&gt;什么是 MathJax&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注：本文一开始是为在nodePPT上使用 Mathjax 所写，并非针对Hexo。虽然大同小异，但是部分配置可能存在差别，请知悉。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MathJax is a cross-browser JavaScript library that displays mathematical notation in web browsers, using MathML, TeX and AsciiMath markup.&lt;/p&gt;
&lt;p&gt;MathJax 是一个跨浏览器的 JavaScript 库，可以在网页上显示数学式，使用 MathML, TeX 和 AsciiMath 标记语言编写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这解答了你的问题了吗？ 很可能没有。&lt;/p&gt;
&lt;p&gt;你可能会接着问，什么是 MathML, TeX 和 AsciiMath？ 什么是标记语言？&lt;/p&gt;
&lt;p&gt;嗯……&lt;/p&gt;
    
    </summary>
    
    
      <category term="how-to" scheme="http://jaycechant.info/tags/how-to/"/>
    
      <category term="nodePPT" scheme="http://jaycechant.info/tags/nodePPT/"/>
    
      <category term="Mathjax" scheme="http://jaycechant.info/tags/Mathjax/"/>
    
  </entry>
  
  <entry>
    <title>nodePPT 简介及快速上手</title>
    <link href="http://jaycechant.info/2016/intro-to-nodeppt/"/>
    <id>http://jaycechant.info/2016/intro-to-nodeppt/</id>
    <published>2016-06-20T06:35:29.000Z</published>
    <updated>2016-07-12T14:23:20.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown是什么"><a href="#Markdown是什么" class="headerlink" title="Markdown是什么"></a>Markdown是什么</h1><p>在讨论 nodePPT 是什么之前，我想先说一下，Markdown是什么。如果你已经了解，可以快速翻过去。</p>
<blockquote>
<p>Markdown 是一种轻量级的「标记语言」。</p>
</blockquote>
<a id="more"></a>
<p>That’s all，不展开。</p>
<p>如果想进一步了解</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external">维基百科</a> </li>
<li><a href="http://baike.baidu.com/view/2311114.htm" target="_blank" rel="external">百度百科</a>  偶尔维基会被墙，那可以先看百度百科</li>
<li><a href="https://jaycechant.github.io/2012/blog-with-markdown/" target="_blank" rel="external">用Markdown写日志</a></li>
</ul>
<p>简而言之，Markdown提供了一种 <strong>简便且易于理解的，内容与样式（或者叫格式）分离的编辑方式</strong> 。</p>
<p>当你编辑内容时，只专注于内容。<br>外观通过样式定义实现。（不用担心，有大量现成的定义得非常漂亮的样式表）<br>而一旦需要改动样式，不过修改一下样式，或者换个样式表，无论文档有多长，都不需要逐一修改。</p>
<h1 id="那nodePPT又是什么"><a href="#那nodePPT又是什么" class="headerlink" title="那nodePPT又是什么"></a>那nodePPT又是什么</h1><p>用作者自己的话</p>
<blockquote>
<p>这可能是迄今为止最好的网页版演示库</p>
</blockquote>
<p>它是一个基于node.js，html，css 等技术，用Markdown编写，在浏览器上实现类似<strong>Power Point</strong> / <strong>KeyNote</strong> 效果的一个工具。</p>
<p>更多的信息，请参考项目主页 <a href="Github：https://github.com/ksky521/nodePPT">Github:nodePPT</a></p>
<p>又或者直接动手操作，在接下来的实际操作中，一边操作一边体会。</p>
<h1 id="How-to"><a href="#How-to" class="headerlink" title="How-to"></a>How-to</h1><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><blockquote>
<p>Node.js是一个基于 对Google V8引擎进行封装 的Javascript运行环境(runtime)。</p>
</blockquote>
<p><a href="http://baike.baidu.com/view/3974030.htm" target="_blank" rel="external">百度百科</a></p>
<p>首先到 <a href="https://nodejs.org/" target="_blank" rel="external">Node.js官网</a> 下载安装文件，一般官网会自动判断你的操作系统（以我本地为例是 Windows x64），然后下载对应的LTS （Long Term Support 长期支持，你可以近似看做稳定版）版本的 msi 文件就好。</p>
<p>然后就是运行 msi 进行安装，这个过程应该不会有问题，如果遇到无法写入，可以试试用管理员权限运行。</p>
<p>我个人的路径是<code>D:\Dev\nodejs\</code></p>
<p>你可以根据自己的习惯选路径，总的来说，因为后面需要在命令行直接运行的需要，推荐满足两个条件：</p>
<ul>
<li>路径尽量 <strong>避免空格</strong> （否则后面需要在路径上加双引号，如 “D:\Program files\”） </li>
<li>路径尽量短并且好找</li>
</ul>
<h2 id="安装nodePPT-及-环境变量"><a href="#安装nodePPT-及-环境变量" class="headerlink" title="安装nodePPT 及 环境变量"></a>安装nodePPT 及 环境变量</h2><p>msi 安装有个好处，它会自动设置基本的环境变量。安装完之后，打开 cmd，输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node -v</div></pre></td></tr></table></figure>
<p>正常会返回当前node的版本。</p>
<p>然后我们要用 <strong>npm</strong> 安装 nodePPT 的包。</p>
<blockquote>
<p>npm (Node Package Manager)是 node 的包管理器，可以帮助我们安装和管理第三方的包。</p>
</blockquote>
<p>幸运的是新版的node.js自带npm，所以我们可以直接用。</p>
<p>类似 node，我们也可以看到npm的版本 <code>npm -v</code>。</p>
<p>但我们并非拿node.js做开发，能运行 node 和 npm 不够，后面安装完 nodePPT 也要直接运行。</p>
<p>我们要修改 全局包安装路径 和 缓存路径。 后面要把 nodePPT 安装到全局路径，然后把全局路径加入执行路径。如果不改当然也能运行，但是路径会在C盘隐藏得很深，非常不好找：</p>
<ul>
<li>在Node.js的安装目录下，分别新建两个文件夹 <code>node_global</code> 和 <code>node_cache</code> （只是推荐这样命名，你也可以根据自己习惯命名） </li>
<li>打开cmd，分别执行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm config <span class="built_in">set</span> prefix node_global完整路径</div><div class="line">npm config <span class="built_in">set</span> cache node_cache完整路径</div></pre></td></tr></table></figure>
<p>好，终于可以安装 nodePPT了。 还是cmd下，执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g nodeppt</div></pre></td></tr></table></figure>
<p>正常情况下，稍等一段时间，npm会自动下载并且安装好。</p>
<p>但是，这需要你的电脑能正常连接到 npm 的服务器。如果因为某些原因不能正常连接，你就要考虑，要么替换npm服务器设置(如淘宝的镜像 <a href="http://npm.taobao.org/" target="_blank" rel="external">http://npm.taobao.org/</a> )，要么手动安装nodePPT。</p>
<p>然而我安装时非常顺利，所以也不打算讨论着两种做法。如果你不行碰到不能连接，请自行联系度娘。</p>
<p>最后我们还要处理两个环境变量，以让我们可以直接在cmd中执行<code>nodeppt</code>：</p>
<p>对于Win7 而言，环境变量在 <code>我的电脑 &gt; 右键 &gt; 属性 &gt; 高级系统设置 &gt; 高级 &gt; 环境变量</code></p>
<ul>
<li>编辑 <code>Path</code>，在后面追加 <code>;node_global完整路径</code>。注意前面有个英文分号，跟前面的路径隔开 </li>
<li>新建系统变量 <code>NODE_PATH</code>，值为 <code>node_global完整路径\node_modules\</code></li>
<li>设置完环境变量，重新打开cmd （好让环境变量生效），输入 <code>nodeppt -v</code> 并回车，正常应该返回版本号</li>
</ul>
<h2 id="编写演示文档"><a href="#编写演示文档" class="headerlink" title="编写演示文档"></a>编写演示文档</h2><p>折腾半天，终于安装完，接下来开始编写演示文档。</p>
<p>首先找一个文件夹，用来存放演示文档的源文件，在这个文件夹空白处 <code>shift + 右键 &gt; 在此处打开命令窗口</code>，得到一个执行路径在当前目录的cmd窗口，输入 <code>nodeppt create file_name_of_your_doc</code> 并回车，紧接着它会要求你填 标题、副标题、演讲者这些信息，完了就会基于模板在当前目录生成一个 <code>file_name_of_your_doc.md</code> 文档。因为后面还能修改，所以这些信息可以先随便填，不用太纠结；文件名不用包含后缀。</p>
<p>然后找一个你习惯的Markdown编辑器（如<a href="http://markdownpad.com/" target="_blank" rel="external">MarkdownPad</a> / <a href="http://www.oschina.net/p/smark-editor" target="_blank" rel="external">Smark</a>），又或者随便一个纯文本编辑器（如Notepad++），就可以开工了。</p>
<p>nodePPT 基于 GFM 语法 （Github Flavored Markdown），在此基础上为了更好的支持演示效果，拓展了一些标签。</p>
<ul>
<li>关于 Markdown 的基础请回到前面的介绍 </li>
<li>关于 拓展的内容，文档生成时，已经自带了模板；更高级的用法，可以看官方的demo （<code>nodeppt安装目录\ppts\demo.md</code>）</li>
</ul>
<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>虽然用Markdown编辑器可以看到效果，但是对于 nodePPT 拓展的标签，还有演示效果，编辑器就无能为力了。</p>
<p>这时打开当前路径下的 cmd 窗口，输入命令并回车 （1234 可以 换成任意本地没被占用的端口，不加<code>-p</code>参数默认端口为 8080）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nodeppt start -p 1234</div></pre></td></tr></table></figure>
<p>这就打开了一个预览，任意在Markdown文件的修改，保存之后刷新一下浏览器就能马上看到效果。而且这个预览不仅本地可以用，局域网里任何能访问你电脑的机器，都能看到。 你甚至直接用这个功能，就可以完成一次演示</p>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>然而预览功能需要执行 <code>start</code> 命令的窗口一直开着，当然你的电脑也不能关机。如果你想要一直提供给大家访问，或者需要在没有node.js的机器上展示，那么你就需要发布。</p>
<p>同样的当前路径下的cmd窗口，输入命令并回车，就可以得到不依赖node.js的html文件，然后发布在Apache服务器上，或者带到你需要演示的电脑上：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nodeppt release your_ppt.md <span class="_">-a</span></div></pre></td></tr></table></figure>
<p>注意这里的文件名需要带后缀，并且推荐加上 <code>-a</code> 参数，把所有引用的 js 和 css 文件一起打包，免得演示时才发现缺少了文件。</p>
<h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>以往写教程，往往把 <strong>Why / 为什么选它</strong> 放在前面。 我不确定大家在完全不了解这个是什么东西的情况下，会不会愿意听我大条道理讲理由。 所以这次放到了后面。</p>
<p>当然前面也提到了一些 Markdown / nodePPT 的好处，那些也可以看做是理由，但我还是想谈谈个人的感受。</p>
<p>我得承认，如果你是赶一份文档，应付某个一次性的任务，Word / PowerPoint 是更好的选择。</p>
<p>所见即所得的编辑，能很快出一个 <strong>能用</strong> 的成果，拿去交差了，以后再也不用管。 而 带着Geek气质 的 Markdown，多少有些学习成本。</p>
<hr>
<p>然而，<strong>如果你把这些文档，看做你的知识财产，长期地积累、管理、转化；如果你认同，我们的文档/演示 总是重复着一些关键的内容，只是场景和面向的人有所不同。</strong> 那么，你就能体会到一些好处：</p>
<ul>
<li>文档制作好之后，通过修改样式输出不同风格的文档，而不是重新制作 </li>
<li>相同内容不同需要的文档（word，pdf，ppt等），都通过一份源文件输出，而不是分别制作</li>
<li>对纯文本的源文件，进行版本管理，可以diff每一版的修改，回退到任意版本，而不是无法管理的二进制文件</li>
<li><p>……</p>
<hr>
</li>
</ul>
<p>更多效果，请参考作者写的例子</p>
<p><a href="http://qdemo.sinaapp.com/" target="_blank" rel="external">官方demo</a></p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Markdown是什么&quot;&gt;&lt;a href=&quot;#Markdown是什么&quot; class=&quot;headerlink&quot; title=&quot;Markdown是什么&quot;&gt;&lt;/a&gt;Markdown是什么&lt;/h1&gt;&lt;p&gt;在讨论 nodePPT 是什么之前，我想先说一下，Markdown是什么。如果你已经了解，可以快速翻过去。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Markdown 是一种轻量级的「标记语言」。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="how-to" scheme="http://jaycechant.info/tags/how-to/"/>
    
      <category term="nodePPT" scheme="http://jaycechant.info/tags/nodePPT/"/>
    
      <category term="node.js" scheme="http://jaycechant.info/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>基础算法练习题汇总</title>
    <link href="http://jaycechant.info/2015/algorithm-practice-set/"/>
    <id>http://jaycechant.info/2015/algorithm-practice-set/</id>
    <published>2015-04-01T08:23:16.000Z</published>
    <updated>2016-06-29T15:21:52.163Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>这份题目汇总，是我和几个朋友一起整理所得，放在我的博客只是为了存档纪念曾经一起奋斗的日子，以及分享给有需要的人。感谢老战友。</em></strong></p>
<p>帖子很长，建议在目录查找需要的主题，然后直接Ctrl+F。</p>
<a id="more"></a>
<hr>
<p>目录</p>
<ul>
<li>1.基本算法<ul>
<li>1.1.递归与分治<ul>
<li>1.1.1.基础练习</li>
<li>1.1.2.进阶练习</li>
</ul>
</li>
<li>1.2.模拟<ul>
<li>1.2.1.基础练习</li>
<li>1.2.2.进阶练习</li>
</ul>
</li>
<li>1.3.贪心<ul>
<li>1.3.1.基础练习</li>
<li>1.3.2.进阶练习</li>
</ul>
</li>
</ul>
</li>
<li>2.解空间搜索<ul>
<li>2.1.初出茅庐<ul>
<li>2.1.1.深度优先搜索</li>
<li>2.1.2.广度优先搜索</li>
<li>2.1.3.穷竭(暴力)搜索</li>
</ul>
</li>
<li>2.2.出类拔萃<ul>
<li>2.2.1.隐式图最短路,简单剪枝</li>
<li>2.2.2.尺取</li>
<li>2.2.3.反转(开关问题,关灯问题)</li>
<li>2.2.4.二分搜索<ul>
<li>2.2.4.1.最大化最小值(或最小化最大值)</li>
<li>2.2.4.2.最大化平均值</li>
<li>2.2.4.3.查找第K大的值</li>
<li>2.2.4.4.最小化第K大的值</li>
<li>2.2.4.5.其他</li>
</ul>
</li>
</ul>
</li>
<li>2.3.登峰造极<ul>
<li>2.3.1.双端队列</li>
<li>2.3.2.调整搜索顺序和智慧剪枝</li>
<li>2.3.3.智慧搜索2( A<em> IDA</em>)</li>
</ul>
</li>
</ul>
</li>
<li>3.图论<ul>
<li>3.1.图论基础</li>
<li>3.2.图论中等</li>
<li>3.3.图论高级</li>
</ul>
</li>
<li>4.动态规划<ul>
<li>4.1.动态规划基础</li>
<li>4.2.DP中等</li>
<li>4.3.DP高级</li>
</ul>
</li>
</ul>
<h2 id="1-基本算法"><a href="#1-基本算法" class="headerlink" title="1. 基本算法"></a>1. 基本算法</h2><h3 id="1-1-递归与分治"><a href="#1-1-递归与分治" class="headerlink" title="1.1. 递归与分治"></a>1.1. 递归与分治</h3><p>递归：找出递归子结构性质（原问题的解包含了子问题的解）、用子问题的解来递归定义原问题的解、找出递归终止条件。</p>
<p>分治：问题分解，逐个击破。在处理公共子问题时，可以引入一个表格，对于计算过的解缓存起来，重复利用。</p>
<h4 id="1-1-1-基础练习"><a href="#1-1-1-基础练习" class="headerlink" title="1.1.1. 基础练习"></a>1.1.1. 基础练习</h4><ol>
<li>放苹果：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16690" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16690</a></li>
<li>Science：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=31627" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=31627</a></li>
<li>Oil Skimming：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=31171" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=31171</a></li>
<li>棋盘问题：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15202" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15202</a></li>
</ol>
<h4 id="1-1-2-进阶练习"><a href="#1-1-2-进阶练习" class="headerlink" title="1.1.2. 进阶练习"></a>1.1.2. 进阶练习</h4><ol>
<li>Two Famous Companies：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=29898" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=29898</a></li>
<li>Crazy Tank：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=33707" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=33707</a></li>
<li>Palindromin Substring：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=33418" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=33418</a></li>
</ol>
<h3 id="1-2-模拟"><a href="#1-2-模拟" class="headerlink" title="1.2. 模拟"></a>1.2. 模拟</h3><p>根据题目实际意思一步步写代码就好，没算法可言，耐心+基本功</p>
<h4 id="1-2-1-基础练习"><a href="#1-2-1-基础练习" class="headerlink" title="1.2.1. 基础练习"></a>1.2.1. 基础练习</h4><ol>
<li>Biorhythms：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16391" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16391</a></li>
<li>Maya Calendar：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11385" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11385</a></li>
<li>最大连续积：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=38909" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=38909</a></li>
<li>体重：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=37583" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=37583</a></li>
<li>最佳裁判：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=37617" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=37617</a></li>
<li>Running Rabbits：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=33714" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=33714</a></li>
<li>Counterfeit Dollar：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16424" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16424</a></li>
<li>Numbers that Count：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11260" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11260</a></li>
<li>Packets：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16476" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16476</a></li>
<li>Packing Rectangles：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16996" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16996</a></li>
</ol>
<h4 id="1-2-2-进阶练习"><a href="#1-2-2-进阶练习" class="headerlink" title="1.2.2. 进阶练习"></a>1.2.2. 进阶练习</h4><ol>
<li>矩阵覆盖：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=37614" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=37614</a></li>
<li>Sum of divisors：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=33549" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=33549</a></li>
<li>Joseph：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11573" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11573</a></li>
<li>Calendar Game：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17540" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17540</a></li>
<li>Chemical Reactions：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=31592" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=31592</a></li>
</ol>
<h3 id="1-3-贪心"><a href="#1-3-贪心" class="headerlink" title="1.3. 贪心"></a>1.3. 贪心</h3><p>顾名思义，贪心就是找到某一策略，每次寻找该策略下的最优，逐步找到最后的最优解。</p>
<p>而贪心的难点在于，你怎么确认是否存在有效的贪心策略！</p>
<p>下面是一些经典的例子</p>
<ol>
<li><p>活动选择问题 Activity selection</p>
</li>
<li><p>最小生成树 Minimum spanning tree</p>
</li>
<li><p>部分背包问题 Partial knapsack problem</p>
</li>
</ol>
<h4 id="1-3-1-基础练习"><a href="#1-3-1-基础练习" class="headerlink" title="1.3.1. 基础练习"></a>1.3.1. 基础练习</h4><ol>
<li>Scientific Conference：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=26713" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=26713</a></li>
<li>Exam：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=175278" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=175278</a></li>
<li>Electrification Plan：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=47106" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=47106</a></li>
<li>Dragon of Loowater：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=19048" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=19048</a></li>
<li>Two Teams：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=14092" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=14092</a></li>
<li>Wooden Sticks：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16477" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16477</a></li>
<li>Radar Installation：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10537" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10537</a></li>
<li>Power of Cryptography：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10040" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10040</a></li>
<li>Y2K Accounting Bug：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=18025" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=18025</a></li>
<li>Gone Fishing：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16478" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16478</a></li>
<li>Pass-Muraille：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11166" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11166</a></li>
<li>Game Prediction：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16382" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16382</a></li>
<li>Box of Bricks：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16479" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16479</a></li>
<li>Integer Intervals：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16482" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16482</a></li>
<li>Huffman’s Greed：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16483" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16483</a></li>
</ol>
<h4 id="1-3-2-进阶练习"><a href="#1-3-2-进阶练习" class="headerlink" title="1.3.2. 进阶练习"></a>1.3.2. 进阶练习</h4><ol>
<li>Minimal Coverage：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=13756" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=13756</a></li>
<li>Crossing River：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=26251" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=26251</a></li>
</ol>
<h2 id="2-解空间搜索"><a href="#2-解空间搜索" class="headerlink" title="2. 解空间搜索"></a>2. 解空间搜索</h2><p>所谓 解空间 ，顾名思义，就是 所有可能解的集合 或者说 所有候选答案的集合。</p>
<p>解空间搜索 是通用解法之首。如果问题无法用特别明显的算法解决，往往可以考虑搜索。</p>
<h3 id="2-1-初出茅庐"><a href="#2-1-初出茅庐" class="headerlink" title="2.1. 初出茅庐"></a>2.1. 初出茅庐</h3><p>搜索入门,基础的穷搜,广搜,深搜</p>
<h4 id="2-1-1-深度优先搜索"><a href="#2-1-1-深度优先搜索" class="headerlink" title="2.1.1. 深度优先搜索"></a>2.1.1. 深度优先搜索</h4><ol>
<li>Lake Counting：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=14167" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=14167</a></li>
<li>Red and Black：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=26084" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=26084</a></li>
<li>Property Distribution：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=46522" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=46522</a></li>
<li>Ball：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=22516" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=22516</a></li>
<li>Curling 2.0：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15201" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15201</a></li>
<li>Catch That Cow：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15204" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15204</a></li>
</ol>
<h4 id="2-1-2-广度优先搜索"><a href="#2-1-2-广度优先搜索" class="headerlink" title="2.1.2. 广度优先搜索"></a>2.1.2. 广度优先搜索</h4><ol>
<li>Cheese：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=49879" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=49879</a></li>
<li>Meteor Shower：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=12685" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=12685</a></li>
<li>Seven Puzzle：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=49880" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=49880</a></li>
</ol>
<h4 id="2-1-3-穷竭-暴力-搜索"><a href="#2-1-3-穷竭-暴力-搜索" class="headerlink" title="2.1.3. 穷竭(暴力)搜索"></a>2.1.3. 穷竭(暴力)搜索</h4><ol>
<li>Smallest Difference：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17170" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17170</a></li>
<li>Backward Digit Sums：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=39458" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=39458</a></li>
<li>Hopscotch：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=12306" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=12306</a></li>
<li>Osenbei：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=50785" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=50785</a></li>
</ol>
<h3 id="2-2-出类拔萃"><a href="#2-2-出类拔萃" class="headerlink" title="2.2. 出类拔萃"></a>2.2. 出类拔萃</h3><p>隐式图最短路,简单剪枝,尺取,反转(开关问题,关灯问题),二分搜索</p>
<h4 id="2-2-1-隐式图最短路-简单剪枝"><a href="#2-2-1-隐式图最短路-简单剪枝" class="headerlink" title="2.2.1. 隐式图最短路,简单剪枝"></a>2.2.1. 隐式图最短路,简单剪枝</h4><ol>
<li>Shuffle’m Up：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15207" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15207</a></li>
<li>Pots：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15208" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15208</a></li>
<li>Network Saboteur：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15209" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15209</a></li>
<li>Sudoku：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15211" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15211</a></li>
<li>Tudoku：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16441" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16441</a></li>
<li>Channel Allocation：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15212" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15212</a></li>
</ol>
<h4 id="2-2-2-尺取"><a href="#2-2-2-尺取" class="headerlink" title="2.2.2. 尺取"></a>2.2.2. 尺取</h4><p>头指针和尾指针不断交替推进 寻找满足条件的最小区间</p>
<ol>
<li>Jessica’s Reading Problem：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=24699" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=24699</a></li>
<li>Bound Found：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=39361" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=39361</a></li>
<li>Sum of Consecutive Prime Numbers：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=18023" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=18023</a></li>
<li>Graveyard Design：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=39270" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=39270</a></li>
</ol>
<h4 id="2-2-3-反转-开关问题-关灯问题"><a href="#2-2-3-反转-开关问题-关灯问题" class="headerlink" title="2.2.3. 反转(开关问题,关灯问题)"></a>2.2.3. 反转(开关问题,关灯问题)</h4><p>同一灯开关操作两次会互相抵消,可利用二进制压缩状态</p>
<ol>
<li>EXTENDED LIGHTS OUT：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17722" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17722</a></li>
<li>Flip Game：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16122" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16122</a></li>
<li>Fliptile：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17522" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17522</a></li>
<li>Game：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=22970" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=22970</a></li>
<li>The Water Bowls：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17471" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17471</a></li>
</ol>
<h4 id="2-2-4-二分搜索"><a href="#2-2-4-二分搜索" class="headerlink" title="2.2.4. 二分搜索"></a>2.2.4. 二分搜索</h4><p>利用有序数列的特性,每次检查解空间的中点是否满足条件,无论是否满足 最优解只会落在大于中点或小于中点的解空间内,</p>
<p>从而每次可以把解空间缩小一半,最终在O(logN)次的比较之内求得最优解</p>
<h5 id="2-2-4-1-最大化最小值-或最小化最大值"><a href="#2-2-4-1-最大化最小值-或最小化最大值" class="headerlink" title="2.2.4.1. 最大化最小值(或最小化最大值)"></a>2.2.4.1. 最大化最小值(或最小化最大值)</h5><ol>
<li>Aggressive cows：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=21309" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=21309</a></li>
<li>River Hopscotch：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16277" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16277</a></li>
<li>Monthly Expense：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=14546" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=14546</a></li>
<li>Drying：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16416" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16416</a></li>
<li>Cow Acrobats：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11013" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11013</a></li>
</ol>
<h5 id="2-2-4-2-最大化平均值"><a href="#2-2-4-2-最大化平均值" class="headerlink" title="2.2.4.2. 最大化平均值"></a>2.2.4.2. 最大化平均值</h5><ol>
<li>Dropping tests：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17097" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17097</a></li>
<li>K Best：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=39448" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=39448</a></li>
</ol>
<h5 id="2-2-4-3-查找第K大的值"><a href="#2-2-4-3-查找第K大的值" class="headerlink" title="2.2.4.3. 查找第K大的值"></a>2.2.4.3. 查找第K大的值</h5><ol>
<li>Median：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=24230" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=24230</a></li>
<li>Matrix：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=24239" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=24239</a></li>
</ol>
<h5 id="2-2-4-4-最小化第K大的值"><a href="#2-2-4-4-最小化第K大的值" class="headerlink" title="2.2.4.4. 最小化第K大的值"></a>2.2.4.4. 最小化第K大的值</h5><ol>
<li>Moo University - Financial Aid：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11455" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11455</a></li>
<li>Telephone Lines：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=12427" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=12427</a></li>
</ol>
<h5 id="2-2-4-5-其他"><a href="#2-2-4-5-其他" class="headerlink" title="2.2.4.5. 其他"></a>2.2.4.5. 其他</h5><ol>
<li>Garland：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17196" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17196</a></li>
<li>Showstopper：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15091" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15091</a></li>
</ol>
<h3 id="2-3-登峰造极"><a href="#2-3-登峰造极" class="headerlink" title="2.3. 登峰造极"></a>2.3. 登峰造极</h3><p>双端队列搜索,智能搜索(剪枝 A<em> IDA</em>)</p>
<h4 id="2-3-1-双端队列"><a href="#2-3-1-双端队列" class="headerlink" title="2.3.1. 双端队列"></a>2.3.1. 双端队列</h4><p>双端队列就是一个两端都是结尾的队列。队列的每一端都可以插入数据项和移除数据项。是一种具有队列和栈的性质的数据结构。</p>
<ol>
<li>Sliding Window：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16694" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16694</a></li>
<li>The Fewest Coins：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=20465" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=20465</a></li>
<li>Batch Scheduling：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10364" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10364</a></li>
<li>FIMO sequence：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=22461" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=22461</a></li>
</ol>
<h4 id="2-3-2-调整搜索顺序和智慧剪枝"><a href="#2-3-2-调整搜索顺序和智慧剪枝" class="headerlink" title="2.3.2. 调整搜索顺序和智慧剪枝"></a>2.3.2. 调整搜索顺序和智慧剪枝</h4><p>调整搜索顺序,对比盲目搜索,需要对所有分支做一定的评估,选择最大可能性的解空间优先进行搜索</p>
<p>以数独为例,优先填只有1个可能性的空格,如果没有,优先填可能性少的空格</p>
<p>智慧剪枝,设计特殊的评估函数 或 利用已经得到部分解 限制搜索深度和广度</p>
<p>例如 要求最小深度,目前得到满足条件的深度是5,当搜索深度到了6即可立即终止,搜索其他分支</p>
<ol>
<li>Sudoku：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10883" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10883</a></li>
<li>Sudoku：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10698" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10698</a></li>
<li>Sticks：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=14913" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=14913</a></li>
<li>Gap：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=27367" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=27367</a></li>
<li>Power Calculus：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11302" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11302</a></li>
<li>Square Destroyer：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17543" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17543</a></li>
</ol>
<h4 id="2-3-3-智慧搜索2-A-IDA"><a href="#2-3-3-智慧搜索2-A-IDA" class="headerlink" title="2.3.3. 智慧搜索2( A IDA)"></a>2.3.3. 智慧搜索2( A<em> IDA</em>)</h4><p>剪枝虽然可以一定程度优化,让我们较快接近最优解,但没有找到较好解前,依然需要探索很多不必要的解空间</p>
<p>深度优先搜索通过估算下界,提前剪枝优化的算法叫IDA*</p>
<p>广度优先搜索利用估算下界优化,就是A*</p>
<ol>
<li>N皇后问题：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=33634" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=33634</a></li>
<li>Solution to the n Queens Puzzle：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=23664" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=23664</a></li>
<li>Eight：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16377" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16377</a></li>
<li>The Morning after Halloween：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=18735" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=18735</a></li>
<li>Square Carpets：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=36736" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=36736</a></li>
<li>15-Puzzle Problem：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=21237" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=21237</a></li>
</ol>
<h2 id="3-图论"><a href="#3-图论" class="headerlink" title="3. 图论"></a>3. 图论</h2><h3 id="3-1-图论基础"><a href="#3-1-图论基础" class="headerlink" title="3.1. 图论基础"></a>3.1. 图论基础</h3><p>最短路径、最小生成树、强连通分量、拓扑排序入门题</p>
<ol>
<li>Christmas Tree：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10444" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10444</a></li>
<li>Unique MST：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17124" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17124</a></li>
<li>Slim Span：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15723" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15723</a></li>
<li>School Network：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17001" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17001</a></li>
<li>Labeling Balls：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=19855" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=19855</a></li>
</ol>
<h3 id="3-2-图论中等"><a href="#3-2-图论中等" class="headerlink" title="3.2. 图论中等"></a>3.2. 图论中等</h3><p>有一定难度的图论题，最大流、网路流、NP问题入门题</p>
<ol>
<li>Bottom of Graph：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11217" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11217</a></li>
<li>Going Home：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11578" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11578</a></li>
<li>Popular Cows：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16578" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16578</a></li>
<li>Network：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11132" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11132</a></li>
<li>Taxi Cab Scheme：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11751" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11751</a></li>
<li>Instantaneous Transference：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=14370" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=14370</a></li>
<li>Drainage Ditches：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10499" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10499</a></li>
<li>King’s Quest：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17071" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17071</a></li>
<li>Optimal Milking：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10503" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10503</a></li>
<li>Sightseeing：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15297" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15297</a></li>
<li>Sightseeing Cows：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17742" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17742</a></li>
<li>Graph Coloring：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17391" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17391</a></li>
<li>Secret Milking Machine：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10504" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10504</a></li>
</ol>
<h3 id="3-3-图论高级"><a href="#3-3-图论高级" class="headerlink" title="3.3. 图论高级"></a>3.3. 图论高级</h3><p>综合性较强难度较大的题目</p>
<ol>
<li>Cow Relays：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17690" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17690</a></li>
<li>Picnic Planning：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11062" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11062</a></li>
<li>Friendship：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=12876" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=12876</a></li>
<li>Cable TV Network：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11083" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11083</a></li>
<li>March of the Penguins：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10507" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10507</a></li>
<li>Dual Core CPU：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16358" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16358</a></li>
<li>Kaka’s Matrix Travels：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17098" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17098</a></li>
<li>Distance Queries：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11131" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11131</a></li>
<li>PIGS：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10509" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=10509</a></li>
<li>Knights：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=12602" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=12602</a></li>
<li>Priest John’s Busiest Day：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=18641" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=18641</a></li>
<li>Firing：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17404" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17404</a></li>
</ol>
<h2 id="4-动态规划"><a href="#4-动态规划" class="headerlink" title="4. 动态规划"></a>4. 动态规划</h2><h3 id="4-1-动态规划基础"><a href="#4-1-动态规划基础" class="headerlink" title="4.1. 动态规划基础"></a>4.1. 动态规划基础</h3><p>DAG最短路问题、01背包、最长递增子序列、多源最短路、树形DP</p>
<ol>
<li>Strategic game：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=18778" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=18778</a></li>
<li>Stockbroker Grapevine：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=14577" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=14577</a></li>
<li>AGTC：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17326" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17326</a></li>
<li>Charm Bracelet：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17547" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17547</a></li>
<li>Longest Ordered Subsequence：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15302" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=15302</a></li>
<li>Kind Spirits：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=22065" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=22065</a></li>
<li>Metro：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=14094" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=14094</a></li>
</ol>
<h3 id="4-2-DP中等"><a href="#4-2-DP中等" class="headerlink" title="4.2. DP中等"></a>4.2. DP中等</h3><p>有一定难度的动态规划问题，最长递增子序列、排列组合问题、完全背包、矩阵连乘、状态压缩DP、区间DP</p>
<ol>
<li>Folding：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11442" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=11442</a></li>
<li>False Mirrors：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17671" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17671</a></li>
<li>Multiplication Puzzle：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=21493" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=21493</a></li>
<li>Piggy-Bank：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17110" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17110</a></li>
<li>Flags：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=21494" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=21494</a></li>
<li>Bridging signals：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17328" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=17328</a></li>
</ol>
<h3 id="4-3-DP高级"><a href="#4-3-DP高级" class="headerlink" title="4.3. DP高级"></a>4.3. DP高级</h3><p>综合性较强难度较大的动态规划题目</p>
<ol>
<li>Sightseeing Trip：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=14074" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=14074</a></li>
<li>Two Rounds：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=14101" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=14101</a></li>
<li>K-based Numbers：<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16555" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=16555</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;这份题目汇总，是我和几个朋友一起整理所得，放在我的博客只是为了存档纪念曾经一起奋斗的日子，以及分享给有需要的人。感谢老战友。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;帖子很长，建议在目录查找需要的主题，然后直接Ctrl+F。&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="http://jaycechant.info/tags/algorithm/"/>
    
      <category term="practice" scheme="http://jaycechant.info/tags/practice/"/>
    
  </entry>
  
  <entry>
    <title>Windows 下 Python 2x 和 3x 版本共存</title>
    <link href="http://jaycechant.info/2012/make-python-2x-coexist-with-3x-on-Win/"/>
    <id>http://jaycechant.info/2012/make-python-2x-coexist-with-3x-on-Win/</id>
    <published>2012-04-11T11:46:00.000Z</published>
    <updated>2016-07-11T15:27:36.637Z</updated>
    
    <content type="html"><![CDATA[<p>关于 Python 多版本环境的配置，有更新的文章：<a href="/2016/python-multi-env-for-win/">在 Windows 搭建Python多版本环境（2016）</a></p>
<hr>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>（惯例来一些废话，不想看的请直接跳到HOW TO）</p>
<p>很早就知道 Python，但是当年对我而言只是一个传说。一方面，彼时的我，对技术认识极浅（虽然现在也没深起来），另一方面 Python 的可用资源还相当的少。也就是说无论我自己写，还是直接拿现成的用，都做不到。</p>
<p>好几年过去了，最近在遇到一些问题寻求现成的解决方案时，发现那些优秀开源方案是往往用  Python 实现的，或者至少包含开源的 Python 项目在内。譬如说 <a href="http://moinmo.in/" target="_blank" rel="external">MoinmoinWiki</a> 和 <a href="http://calibre-ebook.com/" target="_blank" rel="external">Calibre</a> ; 而本博客<s>使用的 Octopress</s>（本博客已迁移到Hexo,2016.06.27） 的语法高亮，也是通过 Python 实现的。由于 Python 的易用和强大，还有丰富的第三方资源，我也在 Eclipse 里装了个 PyDev 插件开始写一些 Python 的小应用做练习。<br><a id="more"></a><br>但 Python 有这样一个特点：（下文引自中文维基 Python 的词条）</p>
<blockquote>
<p>Python的3.0版本，常被称为Python 3000，或简称Py3k。相对于Python的早期版本，这是一个较大的升级。为了不带入过多的累赘，Python 3.0在设计的时候没有考虑向下兼容。许多针对早期Python版本设计的程序都无法在Python 3.0上正常运行。</p>
</blockquote>
<p>换言之，2.x和3.x不兼容。一般而言，官方鼓励使用3.x，因为那是未来的方向，2.x已经不再更新了。但是对于现存的 Python 资源存在这样三种情况：</p>
<ol>
<li>自带判断版本和处理兼容性的代码，针对不同版本运行不同的代码段，这种是做得最贴心用户体验最好的，就好像本来就不存在兼容问题一样。又或者提供多个版本按需选用，包括2.x和3.x的。</li>
<li>只支持2.x的。</li>
<li>只支持3.x（貌似这种情况很罕有，因为基于3.x写的都会考虑2.x，然后就变成了第一种情况，只有在没有3.x之前就存在的项目，才会变成第二种的情况）。</li>
</ol>
<p>第一种情况，你原本装了哪个版本的环境都可以，如果本来没装，建议装最新的3.x；第二种推荐2.5的版本；第三种情况同样建议安装最新的3.x。问题是，如果出现了同时需要2.x和3.x的情况，就需要版本共存了。</p>
<h2 id="HOW-TO"><a href="#HOW-TO" class="headerlink" title="HOW TO"></a>HOW TO</h2><p>首先要共存的版本推荐是2.5 + 最新版的3.x。3.x版本尚在更新中，尽量安装最新的stable版本是不需解释的。至于推荐2.5,，是因为2.5实际上是最后一个纯2.x的版本。在2.6和2.7里面考虑项目向3.x迁移，兼容了部分3.x的特性，反而导致纯2.x的代码有可能出现不确定的结果。很多基于2.x开发的项目，都是推荐2.5的运行环境。</p>
<p>虽然我个人很喜欢Unix和Linux的哲学，但因为各种原因（跟其他人的兼容和打机包括在内），很多时间还是留在了Windows下，所以这里主要是说Windows下的（我的具体是Win7）。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>首先第一步，到 Python 官网下载2.5和最新版3.x的安装文件（一般是msi），并且安装在不同的目录下（下面假设分别安装在 D:\python2x\ 和 D:\python3x\）。这步基本没有什么大问题。</p>
<p>稍微提醒的有两点：</p>
<ol>
<li>两个版本的安装顺序会有一点点小影响。安装程序会绑定相应后缀的默认程序，那么只有在最后安装的版本的绑定会留下来，前面的会被覆盖。这点后面再讨论。</li>
<li>如果是 Vista 以上（也就是带有 UAC）的系统，安装时可能会提醒文件不存在之类的错误。这是因为msi文件是在 System 账户下安装的，而安装文件下载下来默认只有你当前账户有完全控制权限。解决方法就是在“属性-安全”里给 System 账户（或者干脆给 Everyone 账户）授权。</li>
</ol>
<h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><p>安装好了之后，就要通过设置环境变量，让两个解析器可见，但又不会互相冲突，里面包括一下几种情况：</p>
<ol>
<li>双击执行.py文件直接执行。这种情况依赖的是Windows下的默认程序设置，考虑你双击执行的情况主要是哪个版本的为主，把那个版本的放在后面安装。当然也可以通过修改默认程序变更。</li>
<li>在命令行（cmd）执行。这种情况是看环境变量。</li>
<li>被其它程序调用。</li>
</ol>
<p>之后有一段没空写博客，未完待续…见谅</p>
<hr>
<p><img src="http://i.creativecommons.org/l/by-nc-nd/2.5/cn/88x31.png" alt="“知识共享 署名-非商业性使用-禁止演绎 2.5 中国大陆(CC BY-NC-ND 2.5)”许可协议"><br>本作品为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-nd/2.5/cn/" target="_blank" rel="external">“知识共享 署名-非商业性使用-禁止演绎 2.5 中国大陆(CC BY-NC-ND 2.5)”许可协议</a>进行许可。<br>本作品允许复制和传播。如需转载，请留言告知，原文转载并在文章开头明显位置加上署名和原链接，不得用于商业用途，不得修改、转换或者以本作品为基础进行创作，谢谢合作。详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-nd/2.5/cn/" target="_blank" rel="external">协议</a>具体内容。</p>
<hr>
<p>另外，本文使用markdown标记语言以及MEditor编辑。  想了解更多，可以访问<a href="http://du.5d13.cn/a/itdev/doc/2011/0413/9162.html" target="_blank" rel="external">markdown语法精简版</a>、<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md" target="_blank" rel="external">markdown语法完整版</a>以及<a href="https://github.com/othree/markdown-syntax-zhtw" target="_blank" rel="external">下载MEditor软件</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 Python 多版本环境的配置，有更新的文章：&lt;a href=&quot;/2016/python-multi-env-for-win/&quot;&gt;在 Windows 搭建Python多版本环境（2016）&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;（惯例来一些废话，不想看的请直接跳到HOW TO）&lt;/p&gt;
&lt;p&gt;很早就知道 Python，但是当年对我而言只是一个传说。一方面，彼时的我，对技术认识极浅（虽然现在也没深起来），另一方面 Python 的可用资源还相当的少。也就是说无论我自己写，还是直接拿现成的用，都做不到。&lt;/p&gt;
&lt;p&gt;好几年过去了，最近在遇到一些问题寻求现成的解决方案时，发现那些优秀开源方案是往往用  Python 实现的，或者至少包含开源的 Python 项目在内。譬如说 &lt;a href=&quot;http://moinmo.in/&quot;&gt;MoinmoinWiki&lt;/a&gt; 和 &lt;a href=&quot;http://calibre-ebook.com/&quot;&gt;Calibre&lt;/a&gt; ; 而本博客&lt;s&gt;使用的 Octopress&lt;/s&gt;（本博客已迁移到Hexo,2016.06.27） 的语法高亮，也是通过 Python 实现的。由于 Python 的易用和强大，还有丰富的第三方资源，我也在 Eclipse 里装了个 PyDev 插件开始写一些 Python 的小应用做练习。&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://jaycechant.info/tags/Python/"/>
    
      <category term="skill" scheme="http://jaycechant.info/tags/skill/"/>
    
  </entry>
  
  <entry>
    <title>Hello Octopress</title>
    <link href="http://jaycechant.info/2012/hello-octopress/"/>
    <id>http://jaycechant.info/2012/hello-octopress/</id>
    <published>2012-04-11T10:28:00.000Z</published>
    <updated>2016-06-28T03:44:29.483Z</updated>
    
    <content type="html"><![CDATA[<p>为了给安装遇到问题搜索解决方案的人提供方便，开头先给出我的环境配置：<br><strong>Win7+MsysGit+RubyInstaller+Devkit+GitHub+Python2.6</strong></p>
<hr>
<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>一直有开技术博客的想法。之前有了好几个博客，分别写不同的内容（譬如诗词、譬如生活的琐碎、譬如在辩论队群博写辩论的话题…有空时在关于页面介绍给大家），技术内容插在哪一个都感觉四不像，别的不说，就博客的风格主题设置就无法定位，还是分开的好。</p>
<p>不过一直没动手，一方面感觉自己弱爆了没东西写，另一方面主要是主流写博方式麻烦，尤其是长日志，博客后台超差的一致性和稳定性，常搞到我很崩溃。已有那几个博客，偶尔心血来潮更新一下，长期丢荒，何必新增一块荒地。</p>
<p>直到遇到 <strong><em>Markdown</em></strong>（以及类似的轻量级标记语言），真的很清爽，让我写日志的量和质都有了大的提升，感觉又有了写的动力。（有关Markdown的介绍，请看<a href="../blog-with-markdown">这篇日志</a>）接下来，又遇见了基于Markdown的Jekyll，和基于Jekyll的 <strong><em>Octopress</em></strong>，突然发现，这才是程序员应有的写博方式：在本地用简洁的标记（Markdown）把文章写好，然后敲一个命令，什么都搞定了。当然代价就是，前期得折腾一些。然而对于吾等“生命在于折腾”的人，此亦一乐也。<br><a id="more"></a><br>于是，经过两天断断续续折腾，博客算是有了雏形。为此，写下这篇日志，一为留个记录，二为有类似需求的人提供参考。好了，废话够多了，下面正题。</p>
<h2 id="HOW-TO"><a href="#HOW-TO" class="headerlink" title="HOW TO"></a>HOW TO</h2><p>重申我的环境配置： <strong>Win7+MsysGit+RubyInstaller+Devkit+GitHub+Python2.6</strong></p>
<p>相关教学已经很多，大部分问题可以直接搜到。也许我比较菜，看了那些教程，中间还是遇到许多阻碍。因为过程很琐碎，而且目标读者是懂很少甚至不懂技术的人（也就是比我这个菜鸟还菜的），所以原理直接跳过，很容易搜到的也跳过，只挑关键的说，只说完安装，后续配置可能另文叙述。为了方便大家，关键命令会贴出，有核对过，应该可以 <strong>直接复制粘贴执行</strong>。本文没有说到的，请自行搜索，或者…等我写后续的文章——有空的话。</p>
<ul>
<li><p><strong><em>git</em></strong>：我选用的是msysGit。这个不是这次一起装的，之前就一直在用，没有出过什么问题，大部分时间在bash下敲，偶尔偷懒会配合TortoiseGit和eclipse上的插件用。没有试过cygwin版，没法比较。因为装完太久，已经想不起可能会出什么问题，应该会装软件就会吧， <strong>默认设置</strong>就好了。装完之后找一个文件夹空白的地方右键，菜单里应该会出现一系列git的命令。git的用法技巧不在讨论范围。</p>
</li>
<li><p><strong><em>ruby</em></strong>：这个比较折腾，主要是Windows下没有rvm。我用rubyinstaller装完之后 <strong>听说用railsinstaller会更简单</strong>，因为里面包含了大部分东西，大家可以搜一下。不过如果你决定折腾，或者已经用了rubyinstaller，继续看下去。</p>
</li>
</ul>
<p>首先包括Octopress官网在内，很多人说 <strong>必须1.9.2</strong>的。可我装完 <strong>1.9.3</strong>才留意到，目前为止没出过问题，所以对大家都强调1.9.2很疑惑。保险起见，听大家的吧；不过如果已经装了1.9.3，似乎也不用换。</p>
<p>这个也是一般软件安装的样子。需要强调的是，安装路径 <strong>不能有空格和中文</strong>，因为某些gem的调用（还是安装，忘了）会出错。装完随便打开一个cmd，敲</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -v</div></pre></td></tr></table></figure>
<p>然后回车，如果看到版本信息说明成功了。接下来要用到gem，因为1.9.2以上版本的ruby默认有gem，所以不用单独安装。不过保险起见，建议执行一次  </p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem update --system <span class="comment">#将gem本身升级到最新</span></div></pre></td></tr></table></figure>
<ul>
<li><strong><em>Devkit</em></strong>：这个必须安装，因为某些gem没有可执行版本供安装，必须获取源码然后本地编译，这是就需要devkit提供编译环境。下载回来一般是个自解压缩包，解压到要安装的地方，然后就可以开始安装了。同样地，路径不能有空格和中文。下面假设路径是d:\devkit</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd <span class="symbol">d:</span>\devkit</div><div class="line">ruby dk.rb init	    <span class="comment">#生成config.yml，会检查将要安装DevKit支持的Ruby列表，只支持通过RubyInstaller安装的Ruby，如果列出的Ruby不是安装目标，可以手动修改</span></div><div class="line">ruby dk.rb review	<span class="comment">#可选操作，检查安装DevKit支持的Ruby列表是否有误</span></div><div class="line">ruby dk.rb install	<span class="comment">#如果之前安装过但失败，这步会报错说已经安装，要加上 -f参数强制覆盖</span></div></pre></td></tr></table></figure>
<p>如果没有报错信息，一般就成功了，这时可以尝试安装RDiscount（反正后面要装）测试Devkit是否安装成功：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install rdiscount --platform=ruby</div></pre></td></tr></table></figure>
<ul>
<li><strong><em>Octopress</em></strong>：主角出场。首先是获取代码。最直接当然是<code>git clone</code>到本地。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 注意之前安装git时，如果没有把git执行目录加入系统目录，那么所有关于git的操作都必须在git bash进行</span></div><div class="line">git <span class="built_in">clone</span> git@github.com/imahtics/octopress.git <span class="built_in">local</span>\path\octopress <span class="comment">#把本地目录替换成你想要的位置</span></div></pre></td></tr></table></figure>
<p>考虑到网络环境的差别，譬如校园有时会封掉某些端口导致git clone很慢甚至失败，这时直接去项目主页下载压缩包反而比较快。下面正式开始安装，开始之前我先假设你有一个github账户（注册流程跟普通网站没两样）</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cd octopress <span class="comment">#进入Octopress的根目录</span></div><div class="line">gem source --remove <span class="symbol">http:</span>/<span class="regexp">/rubygems.org/</span> <span class="comment">#因为一些你懂的原因，官方服务器偶尔抽风，所以不用</span></div><div class="line">gem source -a <span class="symbol">http:</span>/<span class="regexp">/ruby.taobao.org/</span> <span class="comment">#感谢淘宝的镜像</span></div><div class="line"><span class="comment">#安装必要的gem</span></div><div class="line">gem install bundler</div><div class="line">gem install rake</div><div class="line">bundle install</div><div class="line">rake install <span class="comment">#一般到这里都会提示rake版本比要求的高，这时只要执行一下bundle update再重新执行就好</span></div></pre></td></tr></table></figure>
<p>写了很长但还没写完，接下来可能有一段时间没空，未完待续…</p>
<hr>
<p><img src="http://i.creativecommons.org/l/by-nc-nd/2.5/cn/88x31.png" alt="“知识共享 署名-非商业性使用-禁止演绎 2.5 中国大陆(CC BY-NC-ND 2.5)”许可协议"><br>本作品为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-nd/2.5/cn/" target="_blank" rel="external">“知识共享 署名-非商业性使用-禁止演绎 2.5 中国大陆(CC BY-NC-ND 2.5)”许可协议</a>进行许可。<br>本作品允许复制和传播。如需转载，请留言告知，原文转载并在文章开头明显位置加上署名和原链接，不得用于商业用途，不得修改、转换或者以本作品为基础进行创作，谢谢合作。详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-nd/2.5/cn/" target="_blank" rel="external">协议</a>具体内容。</p>
<hr>
<p>另外，本文使用markdown标记语言以及MEditor编辑。  想了解更多，可以访问<a href="http://du.5d13.cn/a/itdev/doc/2011/0413/9162.html" target="_blank" rel="external">markdown语法精简版</a>、<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md" target="_blank" rel="external">markdown语法完整版</a>以及<a href="https://github.com/othree/markdown-syntax-zhtw" target="_blank" rel="external">下载MEditor软件</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了给安装遇到问题搜索解决方案的人提供方便，开头先给出我的环境配置：&lt;br&gt;&lt;strong&gt;Win7+MsysGit+RubyInstaller+Devkit+GitHub+Python2.6&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;说在前面&quot;&gt;&lt;a href=&quot;#说在前面&quot; class=&quot;headerlink&quot; title=&quot;说在前面&quot;&gt;&lt;/a&gt;说在前面&lt;/h2&gt;&lt;p&gt;一直有开技术博客的想法。之前有了好几个博客，分别写不同的内容（譬如诗词、譬如生活的琐碎、譬如在辩论队群博写辩论的话题…有空时在关于页面介绍给大家），技术内容插在哪一个都感觉四不像，别的不说，就博客的风格主题设置就无法定位，还是分开的好。&lt;/p&gt;
&lt;p&gt;不过一直没动手，一方面感觉自己弱爆了没东西写，另一方面主要是主流写博方式麻烦，尤其是长日志，博客后台超差的一致性和稳定性，常搞到我很崩溃。已有那几个博客，偶尔心血来潮更新一下，长期丢荒，何必新增一块荒地。&lt;/p&gt;
&lt;p&gt;直到遇到 &lt;strong&gt;&lt;em&gt;Markdown&lt;/em&gt;&lt;/strong&gt;（以及类似的轻量级标记语言），真的很清爽，让我写日志的量和质都有了大的提升，感觉又有了写的动力。（有关Markdown的介绍，请看&lt;a href=&quot;../blog-with-markdown&quot;&gt;这篇日志&lt;/a&gt;）接下来，又遇见了基于Markdown的Jekyll，和基于Jekyll的 &lt;strong&gt;&lt;em&gt;Octopress&lt;/em&gt;&lt;/strong&gt;，突然发现，这才是程序员应有的写博方式：在本地用简洁的标记（Markdown）把文章写好，然后敲一个命令，什么都搞定了。当然代价就是，前期得折腾一些。然而对于吾等“生命在于折腾”的人，此亦一乐也。&lt;br&gt;
    
    </summary>
    
    
      <category term="how-to" scheme="http://jaycechant.info/tags/how-to/"/>
    
      <category term="ruby" scheme="http://jaycechant.info/tags/ruby/"/>
    
      <category term="Octopress" scheme="http://jaycechant.info/tags/Octopress/"/>
    
  </entry>
  
  <entry>
    <title>用Markdown写日志</title>
    <link href="http://jaycechant.info/2012/blog-with-markdown/"/>
    <id>http://jaycechant.info/2012/blog-with-markdown/</id>
    <published>2012-04-10T08:39:00.000Z</published>
    <updated>2016-06-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章原本发表在另外一个我和别人合写的<a href="http://infodebate.blog.163.com/" target="_blank" rel="external">博客</a>，现在新博开张，姑且移过来作为第一篇文章。</p>
<hr>
<p>既然开了群博，就要鼓励各位参与者多写日志、写高质量的日志。而其中一点，就是教会大家一些技巧，降低写出高质量日志的难度。这就是本文的目的。<br>不过日志只是其中一个方面，Markdown的本意是用易读易写的纯文本对文档进行简单的排版，推而广之，其实还可以用来写别的东西，譬如邮件，譬如简历或者论文（不过对后两者Markdown显得太弱了，可能用wiki标签甚至是强大的Latex会更好，这就是后话了）。<br>如果你有足够的好奇心和耐性，建议你全部看完；否则，为了不因为你的不耐烦浪费了初衷，请直接跳到HOW TO 部分。</p>
<p>首先，这篇日志就是用Markdown（配合MEditor，你可以选择其它Markdown转HTML工具,例如MarkdownPad）写的。<br><a id="more"></a></p>
<h2 id="WHAT’S-Markdown"><a href="#WHAT’S-Markdown" class="headerlink" title="WHAT’S Markdown"></a>WHAT’S Markdown</h2><p>WHAT不是这篇文章的重点，建议你直接去维基百科看Markdown的词条（其实里面也有简单示例）：<br><a href="http://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external">维基百科上的词条</a><br>稍微得瑟一下的是，这条词条是我创建的。我在写这篇日志查找资料过程中，发现维基没有Markdown的词条，所以把这篇日志写到一半，暂停，把词条写完再回来写日志。<br>词条的内容主要来自英文翻译，部分有所更新和修改。<br>如果你发现问题，欢迎告诉我，或者更直接地，参与词条的编辑。</p>
<h2 id="WHY-Markdown"><a href="#WHY-Markdown" class="headerlink" title="WHY Markdown"></a>WHY Markdown</h2><h4 id="Markdown的哲学"><a href="#Markdown的哲学" class="headerlink" title="Markdown的哲学"></a>Markdown的哲学</h4><p>以下内容引自官方文档的翻译：</p>
<blockquote>
<p>Markdown 的目標是實現「易讀易寫」。</p>
<p>不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。Markdown 語法受到一些既有 text-to-HTML 格式的影響，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，然而最大靈感來源其實是純文字的電子郵件格式。</p>
<p>因此 Markdown 的語法全由標點符號所組成，並經過嚴謹慎選，是為了讓它們看起來就像所要表達的意思。像是在文字兩旁加上星號，看起來就像<em>強調</em>。Markdown 的清單看起來，嗯，就是清單。假如你有使用過電子郵件，區塊引言看起來就真的像是引用一段文字。</p>
</blockquote>
<h4 id="我的需要"><a href="#我的需要" class="headerlink" title="我的需要"></a>我的需要</h4><ul>
<li>考虑一下日志（或者类似的轻量级超文本）的特点我们会发现，主要是纯文本编辑，但需要少量的排版功能。一般而言，我们希望足够简单轻量，最好可以离线编辑，排版具有 <strong>一致性</strong> 和 <strong>稳定性</strong> （也就是不会因为一个小小的误操作把排好的全弄乱）。</li>
<li>大部分人写日志会使用的，就是博客提供的后台，也有部分会使用类似Word的编辑软件写好再粘贴，但他们本质上都是WYGIWYS（what you get is what you see，所见即所得）编辑器。</li>
<li>博客后台做的工作，其实是把你编辑（或者粘贴）的内容，转换成HTML代码。譬如说你想对某个字加粗，实际上后台做的事情是往目标前后加上<code>&lt;b&gt;</code>加粗<code>&lt;/b&gt;</code>,然后浏览器解析HTML标签，效果就变成了<strong>加粗</strong>。</li>
<li>但这样有几个缺点。首先你必须得在线（较真的话，编辑纯文本内容时可以不用，但排版必须要）。</li>
<li>其次这样的编辑方式稳定性也很不好，很有可能你一个误操作，排版全乱，而你还不知道发生什么事。这是因为编辑器自动转换代码时，自动判断未必是那么智能，尤其当文章很长，格式很多,而且互相干扰时。</li>
<li>最后如果你要把文章在别处再发表，又不想重新排版，你就要复制黏贴HTML源码（几乎所有后台都提供编辑HTML代码的功能）。问题是，自动生成的代码垃圾代码极多，可读性极差，这带来了潜在的显示一致性（两边效果不一致）和稳定性（复制漏了某个符号导致排版崩溃）的问题，而且你想做小修改也很难。</li>
<li>类Word的软件做的工作比较类似，但是转换的过程更为复杂，转换成的文档编码一般只有兼容该标准的软件才能解析和编辑（你试试用记事本打开doc文档），不太可能人工阅读（更别谈修改）。所以博客后台会出现的问题这里都会有，或者说会更严重。而且一个功能丰富的软件，也就意味着heavy，意味着启动速度慢等等。</li>
<li>一致性和稳定性差几乎是所有WYGIWYS的通病。</li>
</ul>
<p>综合以上各点，最稳妥的方法似乎就是，拿个编辑器直接敲HTML代码。</p>
<p>作为标记语言，HTML还是很好懂的。就是几个标签对（也有少量单个标签，像换行<code>&lt;br/&gt;</code>），每一对标签对中间夹着的部分实现特定排版功能。（参考上面加粗的示例）但是好懂还是不等于方便。作为结构化的语言，HTML太严谨了，为了一个很简单的功能得敲很多标签，嵌套和配对还不能出错。加入大量标签之后，文章也变得不好识别。而事实上，大部分功能我们还用不到。所以在遇到Markdown前，我还是宁愿用所见即所得编辑器。</p>
<p>Markdown的好处就刚好弥补了这些问题。它易读易写。它的排版符号经过谨慎筛选，即使不解析，也基本保留了文章原样，你能很容易看明白它的作用。它极其简单轻量，只实现最essential的功能，而不是enough。当然大部分情况下，已经足够了。偶尔遇到一些没有的功能，它还允许直接写HTML补充。配合一个支持实时预览的Markdown编辑器，基本接近所见即所得。<br>你想一下，前后加*或者_就是斜体，加两个就是加粗，3个就粗斜体，加个#就是标题，三个“-”单独一行就是分割线，有序列表自动排序号，加[]就是超链接…..刷新一下就可以看到效果（其实连刷新也可以省，带实时预览功能的编辑器可以编辑同时看到效果），而且一致性和稳定性良好。有什么理由不选用？</p>
<h4 id="所见即所得-V-S-所想即所得"><a href="#所见即所得-V-S-所想即所得" class="headerlink" title="所见即所得 V.S. 所想即所得"></a>所见即所得 V.S. 所想即所得</h4><p>其实更重要的是，相对于“所见即所得”，标记语言的排版被认为是 <strong>WYGIWYT（所想即所得）</strong> 。它的特点是 <strong>内容与格式分离</strong> 。</p>
<p>在所见即所得模式下编辑，编辑对象本身既包含了内容，也包含了格式。这要求你要么一边写一边设置格式（于是乎你的思维要不断在“写什么内容”和“怎样的显示效果”之间切换）；要么一口气写完内容，然后一点一点回头识别出不同的区块，然后分别设置格式。如果你设置完之后不满意，或者改变用途所以要重设格式，你又要重头来设置一遍。（好吧，我知道Word爱好者会告诉我，其实可以设置和应用样式，然后要改时统一修改样式。这的确稍微轻松了，但是稳定性仍然有待提高。而且有这样一个问题，你能直接看出某段文字应用了哪个样式吗？）我完全没有否定Word的意思，Word有大量功能是轻量级标记语言做不到的。不过话说回来，那部分的功能我很可能会选用LaTeX。</p>
<p>所想即所得是让编辑者把注意力放在内容上，写到标题，你只需简单标记一下，这是一级标题（# 或者 <code>&lt;h1&gt;&lt;/h1&gt;</code>）。是的，你还是需要分神标记一下，但是你只需想起这个是标题，你并没有从内容的思路跳出，思考标题该是什么样子的。类似的，这是强调，这是链接，这是列表……你都不要考虑显示效果。写完之后（当然实时编辑器写的时候就能看见），经过解析，你就会看到在当前解析器设置下，标题、强调、链接、列表…..等等这些元素是什么样子的。如果你满意，事情就这么结了。如果还想调整，只需对着某一类元素调整，那么整个文档都会一致的调整过来，而这一点可以通过设置解析器，或者增加一个css文件达到目的。整个编辑内容的过程，你只需简单的标记一下，这“是什么”，但是“是什么”对显示成“什么样子”是中立的，你可以等到完全编辑完了内容，再来统一地考虑“什么”是“什么样子”。</p>
<h2 id="HOW-TO-Markdown"><a href="#HOW-TO-Markdown" class="headerlink" title="HOW TO Markdown"></a>HOW TO Markdown</h2><p>好了，前面费了这么大篇幅告诉大家Markdown的好处，也是时候开始教学了。<br>其实如果你是对代码有一定的敏感度，或者学过一下HTML，你就会发现Markdown太简单，比那些见过的代码都要简单。因为它本来就不算什么代码。你可以直接去看一下语法，然后就可以开始了。<br><a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">Markdown语法官方完整版</a><br><a href="http://www.cnblogs.com/yihuiso/archive/2011/04/13/markdown.html" target="_blank" rel="external">Markdown语法中文完整版</a><br><a href="http://www.cnblogs.com/yihuiso/archive/2011/04/13/minimarkdown.html" target="_blank" rel="external">Markdown语法中文精简版</a>  </p>
<p>不过为了更直观一些，我还是想给出常用功能的对照示例。看懂了，就可以实现基本的写日志的排版格式。</p>
<h4 id="1-段落"><a href="#1-段落" class="headerlink" title="1.段落"></a>1.段落</h4><p>Markdown的段落由一个或多个连续的行构成，段落间靠一个或以上视觉上的空行（也就是不管实际是什么字符只要看上去是空白）划分。一般的段落不应该用空格或制表符缩进（缩进有特殊意义，下面讲到）。这个就不用给示例了，因为见到的，就是写的时候的样子。但是强调段落还是有意义的，因为段落是很多效果的生效单位。</p>
<h4 id="2-换行和强迫断行"><a href="#2-换行和强迫断行" class="headerlink" title="2.换行和强迫断行"></a>2.换行和强迫断行</h4><p>首先，Markdown对段落内的“换行符”是直接无视的，也就是说虽然你写的时候敲了回车，但是最终的显示结果却是整段连成一行，由浏览器自动换行。<br>这点跟HTML很像。HTML也是无视换行，想强迫断行，就得加入<code>&lt;br/&gt;</code>标签。类似地，Markdown也可以强迫断行，但简单的多，只需要在行末以两个或以上空格结束即可。这个很容易明白，也不演示了。</p>
<h4 id="3-强调"><a href="#3-强调" class="headerlink" title="3.强调"></a>3.强调</h4><p>这个倒不用解释，直接上演示：<br>代码<br><code>*强调* 或者 _强调_</code><br><code>**加重强调** 或者 __加重强调__</code><br><code>***特别强调*** 或者 ___特别强调___</code><br>对应的效果<br><em>强调</em> (斜体效果)<br><strong>加重强调</strong> (粗体效果)<br><strong><em>特别强调</em></strong> (粗斜体效果)  </p>
<h4 id="4-标题"><a href="#4-标题" class="headerlink" title="4.标题"></a>4.标题</h4><p>这个也很好理解。HTML有六级标题H1~H6,数字越小越高级，字体越大。<br>跟这个相对应，在标题前面加多少个井号#就是几级标题。需要注意的是，#需要加在行首才起效。<br><code># 一级标题</code>  </p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p><code>#### 四级标题</code>  </p>
<h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><p>特别地，一级和二级还有一种写法，就是在标题紧接下来的一行，加上任意数量的等号=（一级）或者减号-（二级）。效果上面演示过，就不再演示了。  </p>
<pre><code>一级标题  
=======  
二级标题  
----
</code></pre><h4 id="5-列表"><a href="#5-列表" class="headerlink" title="5.列表"></a>5.列表</h4><p>无序列表用一个星号、加号或者减号做标记，每个项一行，标记在行首，标记和内容之间至少有一个空格，列表本身要作为单独的段落：  </p>
<pre><code>* 无序列表项目1  
+ 项目2  
- 项目3  
</code></pre><ul>
<li>无序列表项目1</li>
</ul>
<ul>
<li>项目2</li>
</ul>
<ul>
<li>项目3  </li>
</ul>
<p>有序列表跟无序列表很接近，要求基本一样，只是标记变成了一个数字+一个英文句点+至少一个空格+内容：  </p>
<pre><code>9. 有序列表项目1  
2. 项目2  
7. 项目3  
</code></pre><ol>
<li>有序列表项目1  </li>
<li>项目2  </li>
<li>项目3 </li>
</ol>
<p>需要注意的是，只要是数字就可以，显示的数字会在列表里自动排序，跟你输入的数字无关。</p>
<h4 id="6-引用"><a href="#6-引用" class="headerlink" title="6.引用"></a>6.引用</h4><p>有时我们引用了别人的一些原话，需要特别强调这是引用，除了双引号，还有一个选择就是用引用框把内容包起来。<br>只需要在段落开头加一个右尖括号’&gt;’就可以把这段话变成引用。<br>引用可以嵌套。如果要在一个引用里插入一个引用，可以用两个’&gt;’开头。依此类推，根据嵌套层次加相应数量的符号。  </p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; 一段引用。第一行。(提醒，这里插入了两个空格强迫断行，下同)</div><div class="line">这是第二行。</div><div class="line"><span class="meta">&gt;&gt;</span> 这是一个嵌套的引用。这是第一行。</div><div class="line">这是第二行</div><div class="line">&gt;</div><div class="line">&gt; 外层引用第三行。前面需要一个视觉上的空行表示内层嵌套结束，空行前面的<span class="string">'&gt;'</span>可有可无。</div></pre></td></tr></table></figure>
<blockquote>
<p>一段引用。第一行。<br>这是第二行。</p>
<blockquote>
<p>这是一个嵌套的引用。这是第一行。<br>这是第二行</p>
</blockquote>
<p>外层引用第三行。前面需要一个视觉上的空行表示内层嵌套结束，空行前面的’&gt;’可有可无。</p>
</blockquote>
<p>需要注意引用框在某些页面的风格设置下并不明显（貌似网易和Qzone都是），结果只能看到内容缩进了，这时还是用引号表明引用比较明显。</p>
<h4 id="7-链接和图片"><a href="#7-链接和图片" class="headerlink" title="7.链接和图片"></a>7.链接和图片</h4><p>因为大家都知道链接和图片长啥样（什么！没见过？请看文末的版权声明，那里既有链接也有图片），所以不演示效果，只给代码。<br>链接有4种写法（支持相对地址）：  </p>
<ol>
<li>&lt;链接地址&gt; 这种形式只是简单的标出链接地址。  </li>
<li><code>[文字](链接地址 “标题”)</code> 给文字添加链接，其中标题是可选的。  </li>
<li>先在需要链接的地方插入[文字][标记] ，然后在后面一个以[标记]:开头的新行给出地址（一般是段落后面或文章末尾，冒号后面至少有一个空格，标记不可以重复）。    </li>
<li>或者直接以[文字][]这种形式编写，在下面的新行中使用  </li>
</ol>
<pre><code>[文字]:链接的形式声明链接。（相当于省略标记，文字同时充当标记）  
</code></pre><p>示例：<code>[Markdown语法完整版][md]</code>然后在后面的某一行添加（后面这行不会显示）：<br><code>[md]: https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md</code></p>
<p>图片可以算是一种特殊的链接，可以使用链接的后三种写法，只是要在前面加上!表示这是图片。<br>例如<code>![图片](http://i.creativecommons.org/l/by-nc-nd/2.5/cn/88x31.png &quot;这是创用协议的图片&quot;)</code></p>
<h4 id="8-水平分割线"><a href="#8-水平分割线" class="headerlink" title="8.水平分割线"></a>8.水平分割线</h4><p>使用三个以上的星号“<em>”、减号“-”或者下划线“_”来表示。星号跟减号之间可以插入任意空格，如果减号没有插入空格，那它必须在单独的一个段落里，否则会将上一行识别为标题。<br>`</em> <em> </em><code>`***</code><br><code>*****</code><br><code>- - -</code><br><code>-----------------</code><br>效果如下：</p>
<hr>
<h4 id="9-代码等特殊内容"><a href="#9-代码等特殊内容" class="headerlink" title="9.代码等特殊内容"></a>9.代码等特殊内容</h4><p>介绍了这么多，已经认识了相当多的符号用来产生格式。但是，如果要显示这些符号本身呢？我上面的示例又是如何将代码显示出来而不是产生格式呢？  </p>
<ol>
<li>对于单个特殊符号，在前面加反斜杠\就可以按字面含义显示；而如果\和特殊字符凑在一起只是巧合，你其实要显示\而不是取消特殊字符的功能，那就输入<code>\\</code>两个反斜杠，相当于前面的\取消掉后面的\的取消功能。</li>
<li>在大部分情况下，Markdown会很智能地判断是否将&lt;和&amp;转换成HTML实体引用。一般情况下都会换成实体引用，以保留字面意义；当Markdown认为这是HTML标签和实体引用的一部分时，就会保留其代码含义；而如果是在代码块里的代码，Markdown又会替换，以让代码原样输出而不是产生功能。如果你不能确定而想保留字面含义，可以手动转换成对应的实体引用<code>&amp;lt;</code>和<code>&amp;amp;</code></li>
<li>如果是一行代码，可以把内容包在一对反引号（Esc下面那个）``中，Markdown会照原样输出。</li>
<li>如果是一段代码，只要段落的每一行都缩进4个空格或者1个Tab，就可以整段原样输出。这种用法会让保留所有的空白字符——而一般情况下，Markdown会删除所有换行和空格，打乱原有的缩进和排版。  </li>
</ol>
<h4 id="10-缩进"><a href="#10-缩进" class="headerlink" title="10.缩进"></a>10.缩进</h4><p>4个空格或者1个Tab的缩进除了形成原样输出的代码块之外，还有别的一些功能，所以拿出来单独总结。 </p>
<ol>
<li>形成代码块，这个上面说了。</li>
<li>形成嵌套。</li>
<li>嵌套里的代码块。</li>
</ol>
<h4 id="11-其它"><a href="#11-其它" class="headerlink" title="11.其它"></a>11.其它</h4><p>对于Markdown没有的功能，其实可以直接写HTML代码实现。注意的是，在区块级的HTML标签对里，Markdown语法不再起效。</p>
<h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><p>目前我用过3个Markdown编辑器<br>MEditor、MarkdownPad和 <a href="http://notepag.es" target="_blank" rel="external">http://notepag.es</a></p>
<hr>
<p><img src="http://i.creativecommons.org/l/by-nc-nd/2.5/cn/88x31.png" alt="“知识共享 署名-非商业性使用-禁止演绎 2.5 中国大陆(CC BY-NC-ND 2.5)”许可协议"><br>本作品为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-nd/2.5/cn/" target="_blank" rel="external">“知识共享 署名-非商业性使用-禁止演绎 2.5 中国大陆(CC BY-NC-ND 2.5)”许可协议</a>进行许可。<br>本作品允许复制和传播。如需转载，请留言告知，原文转载并在文章开头明显位置加上署名和原链接，不得用于商业用途，不得修改、转换或者以本作品为基础进行创作，谢谢合作。详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-nd/2.5/cn/" target="_blank" rel="external">协议</a>具体内容。</p>
<hr>
<p>另外，本文使用Markdown标记语言以及MEditor编辑。  想了解更多，可以访问<a href="http://du.5d13.cn/a/itdev/doc/2011/0413/9162.html" target="_blank" rel="external">Markdown语法精简版</a>、<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md" target="_blank" rel="external">Markdown语法完整版</a>以及<a href="https://github.com/othree/markdown-syntax-zhtw" target="_blank" rel="external">下载MEditor软件</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章原本发表在另外一个我和别人合写的&lt;a href=&quot;http://infodebate.blog.163.com/&quot;&gt;博客&lt;/a&gt;，现在新博开张，姑且移过来作为第一篇文章。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;既然开了群博，就要鼓励各位参与者多写日志、写高质量的日志。而其中一点，就是教会大家一些技巧，降低写出高质量日志的难度。这就是本文的目的。&lt;br&gt;不过日志只是其中一个方面，Markdown的本意是用易读易写的纯文本对文档进行简单的排版，推而广之，其实还可以用来写别的东西，譬如邮件，譬如简历或者论文（不过对后两者Markdown显得太弱了，可能用wiki标签甚至是强大的Latex会更好，这就是后话了）。&lt;br&gt;如果你有足够的好奇心和耐性，建议你全部看完；否则，为了不因为你的不耐烦浪费了初衷，请直接跳到HOW TO 部分。&lt;/p&gt;
&lt;p&gt;首先，这篇日志就是用Markdown（配合MEditor，你可以选择其它Markdown转HTML工具,例如MarkdownPad）写的。&lt;br&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="http://jaycechant.info/tags/Markdown/"/>
    
      <category term="how-to" scheme="http://jaycechant.info/tags/how-to/"/>
    
      <category term="blog" scheme="http://jaycechant.info/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>新博客建设中</title>
    <link href="http://jaycechant.info/2012/new-blog/"/>
    <id>http://jaycechant.info/2012/new-blog/</id>
    <published>2012-04-08T21:41:00.000Z</published>
    <updated>2016-06-27T07:58:54.981Z</updated>
    
    <content type="html"><![CDATA[<p><strong>新博启用</strong></p>
<p>这个博客是用Octopress+GitHub搭建的，主要用来写技术和软件的内容。</p>
<p>暂时还没有东西写，先这样吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;新博启用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个博客是用Octopress+GitHub搭建的，主要用来写技术和软件的内容。&lt;/p&gt;
&lt;p&gt;暂时还没有东西写，先这样吧。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>first post</title>
    <link href="http://jaycechant.info/2012/first-post/"/>
    <id>http://jaycechant.info/2012/first-post/</id>
    <published>2012-04-08T21:40:00.000Z</published>
    <updated>2016-06-28T03:36:29.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新博启用"><a href="#新博启用" class="headerlink" title="新博启用"></a>新博启用</h1><p>暂时还没有东西写，先这样吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;新博启用&quot;&gt;&lt;a href=&quot;#新博启用&quot; class=&quot;headerlink&quot; title=&quot;新博启用&quot;&gt;&lt;/a&gt;新博启用&lt;/h1&gt;&lt;p&gt;暂时还没有东西写，先这样吧。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
