<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>存档Save&amp;Load</title>
  <subtitle>存档意味着放下包袱，搞砸了不过回来读档</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jaycechant.info/"/>
  <updated>2019-04-30T12:53:26.667Z</updated>
  <id>https://jaycechant.info/</id>
  
  <author>
    <name>Jayce Sigit Chant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang-string 和 bytes 之间的 unsafe 转换</title>
    <link href="https://jaycechant.info/2019/golang-unsafe-cast-between-string-and-bytes/"/>
    <id>https://jaycechant.info/2019/golang-unsafe-cast-between-string-and-bytes/</id>
    <published>2019-04-30T09:52:12.000Z</published>
    <updated>2019-04-30T12:53:26.667Z</updated>
    
    <content type="html"><![CDATA[<p>最近写一个 golang 的工具包时，涉及到反复在 string 和 []byte 之间来回转换。这给了我一个机会了解转换时底层发生的事情。</p>
<a id="more"></a>
<h3 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h3><p>具体来说，是一个缓存相关的封装包：把对象 <code>json.Marshal()</code> 之后得到的 []byte 放到缓存；或者反过来，取出 []byte 交给 <code>json.Unmarshal()</code> 。无论正反方向的调用，输入输出都是 []byte，本没有 string 的事。</p>
<p>偏偏这中间为了实现某些功能，需要往 marshal 之后的 json 字符串上追加（存的时候）或提取（读的时候）某些信息。追加还好办，可以把追加的内容一起变成 []byte 之后 <code>append()</code> ；但提取需要基于字符串的语义，不得不先转成 string，解析完再转回来。</p>
<p>我对这中间的开销产生了兴趣。</p>
<h3 id="unsafe"><a href="#unsafe" class="headerlink" title="unsafe"></a>unsafe</h3><p>写 demo 对比地址之后，可以确定每次转换，string 和 []byte 的地址都有变化。</p>
<p>但是这只能确定 string 和 slice ([]byte 的 slice) 的结构体发生了复制，结构体指向的底层 byte array 是否有发生复制无从得知。</p>
<p>通过查阅网上的讨论以及源码，进一步确认，底层的 array 也发生的复制。既然发生了深复制，那么一定是有额外开销的，只是多和少的差别。</p>
<p>通过 <code>unsafe</code> 包，可以强制直接转换来绕过复制的开销。实际上 <code>strings.Builder</code> 就是这样做的。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> myunsafe</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"unsafe"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">BytesToString</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="title">string</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> *(*<span class="keyword">string</span>)(unsafe.Pointer(&amp;b))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">StringToBytes</span><span class="params">(s <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> *(*[]<span class="keyword">byte</span>)(unsafe.Pointer(&amp;s))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h3><p>那究竟两种转换方式差别有多大呢？</p>
<p>跑一个 Benchmark：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> myunsafe_test</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	. <span class="string">"myunsafe"</span></div><div class="line">	<span class="string">"testing"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> (</div><div class="line">	strs = []<span class="keyword">string</span>&#123;</div><div class="line">		<span class="string">"a"</span>,</div><div class="line">		<span class="string">"abc"</span>,</div><div class="line">		<span class="string">"some words"</span>,</div><div class="line">		<span class="string">"loooooooooooooonger"</span>,</div><div class="line">		<span class="string">"Characters with 1234567890 +-*/ and !@#$%^&amp;()="</span>,</div><div class="line">		<span class="string">`a multi-line long text, here is line one.</span></div><div class="line">line two.</div><div class="line">line three.</div><div class="line">some other texts:</div><div class="line">1234567890-=!@#$%^&amp;*()_+</div><div class="line">abcdefghijklmnopqrstuvwxyz</div><div class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZ    `,</div><div class="line">	&#125;</div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkCast</span><span class="params">(b *testing.B)</span></span> &#123;</div><div class="line">	n := <span class="built_in">len</span>(strs)</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</div><div class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n; j++ &#123;</div><div class="line">			b := []<span class="keyword">byte</span>(strs[j])</div><div class="line">			_ = <span class="keyword">string</span>(b)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkUnsafeCast</span><span class="params">(b *testing.B)</span></span> &#123;</div><div class="line">	n := <span class="built_in">len</span>(strs)</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</div><div class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n; j++ &#123;</div><div class="line">			b := StringToBytes(strs[j])</div><div class="line">			_ = BytesToString(b)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试结果对比如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">go <span class="built_in">test</span> -test.bench=.* -benchmem -run=none </div><div class="line">goos: windows</div><div class="line">goarch: amd64</div><div class="line">pkg: myunsafe</div><div class="line">BenchmarkCast-8         	 5000000	       281 ns/op	     448 B/op	       4 allocs/op</div><div class="line">BenchmarkUnsafeCast-8   	200000000	         8.81 ns/op	       0 B/op	       0 allocs/op</div><div class="line">PASS</div><div class="line">ok  	myunsafe	4.996s</div></pre></td></tr></table></figure>
<p>我用不同数据测过几次，上面只是其中一次。用较短的字符串测试时，大概是 20 倍的差距；当字符串越来越长，差距越来越明显。所以当反复转换较长的字符创时，可以考虑用 unsafe。</p>
<h3 id="字面量常量"><a href="#字面量常量" class="headerlink" title="字面量常量"></a>字面量常量</h3><p>网友提到这个转换只能对动态生成的字符串用，但是我上面的测试用了字面量常量，却没有报错呢？</p>
<p>有什么办法可以让它报错呢？我想差别是在于读和写。上面虽然对字面量常量做了 unsafe 转换，但是转换之后得到的结果并没有尝试写入。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	. <span class="string">"myunsafe"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	s := <span class="string">"a"</span></div><div class="line">	b := StringToBytes(s)</div><div class="line">	fmt.Println(b, <span class="keyword">string</span>(b))</div><div class="line">	b[<span class="number">0</span>] = <span class="number">0x42</span> <span class="comment">// ascii for B</span></div><div class="line">	fmt.Println(b, <span class="keyword">string</span>(b))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>果然报错了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[97] a</div><div class="line">unexpected fault address 0x4bb9ac</div><div class="line">fatal error: fault</div><div class="line">[signal 0xc0000005 code=0x1 addr=0x4bb9ac pc=0x48b615]</div></pre></td></tr></table></figure>
<p>改为动态生成的字符串看看。怎么生成？可以用 <code>strings.Builder</code> 。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	. <span class="string">"myunsafe"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	sb := strings.Builder&#123;&#125;</div><div class="line">    sb.WriteString(<span class="string">"a"</span>)</div><div class="line">	s := sb.String()</div><div class="line">	b := StringToBytes(s)</div><div class="line">	fmt.Println(b, <span class="keyword">string</span>(b))</div><div class="line">	b[<span class="number">0</span>] = <span class="number">0x42</span> <span class="comment">// ascii for B</span></div><div class="line">	fmt.Println(b, <span class="keyword">string</span>(b))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这回就不报错了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[97] a</div><div class="line">[66] B</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><p><a href="https://sheepbao.github.io/post/golang_byte_slice_and_string/" target="_blank" rel="external">golang string和[]byte的对比</a></p>
</li>
<li><p><a href="https://ninokop.github.io/2017/10/25/Go-Slice%E4%B8%8EString%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E5%92%8C%E5%AE%9E%E7%8E%B0" target="_blank" rel="external">Go Slice与String内存布局和实现</a></p>
</li>
<li><p><a href="https://liudanking.com/performance/golang-strings-builder-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">Golang strings.Builder 原理解析</a></p>
</li>
</ul>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近写一个 golang 的工具包时，涉及到反复在 string 和 []byte 之间来回转换。这给了我一个机会了解转换时底层发生的事情。&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://jaycechant.info/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>为什么不要用 pip 安装 conda</title>
    <link href="https://jaycechant.info/2019/why-not-install-conda-with-pip/"/>
    <id>https://jaycechant.info/2019/why-not-install-conda-with-pip/</id>
    <published>2019-01-15T14:37:08.000Z</published>
    <updated>2019-01-23T06:47:37.346Z</updated>
    
    <content type="html"><![CDATA[<p>几乎所有人都直接安装 Anaconda。但它不过是 conda 包管理器 + 预置一系列常用 sci&amp;math 包。</p>
<p>如果我有环境洁癖，只允许存在一个 Python 环境，我可以 <code>pip install conda</code> ，再逐个 <code>conda install xyz</code> 安装那些 conda 下的包吗？</p>
<a id="more"></a>
<hr>
<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>接触 Python 有好些年了，用得不算多，主要做辅助的脚本工具，更像瑞士军刀，不是主力武器。而我的工作偏开发，所以 Anaconda 有所耳闻，并未直接使用。直到有数据分析的需求。</p>
<p>快速浏览相关的介绍和对比，大概得出这么一些信息：</p>
<ul>
<li>conda 是个包管理器</li>
<li>Python + conda = Miniconda</li>
<li>Minconda + 一系列预置的 sci&amp;math 的包 = Anaconda</li>
</ul>
<p>大概讨论这个的都是偏 Science 和 Data Analysis 的社区，大家都觉得直接安装 Anaconda 是标准操作，哪怕你已经安装了 Python。至于为什么不能在 Python 上安装 conda，几乎没有提及。</p>
<p>所以我想试一下。虽然我明知道直接安装会省事很多，但我要知道为什么。</p>
<h2 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h2><p>直接上手试：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">pip install conda <span class="comment"># 前面试过一次，所以有 cache</span></div><div class="line">Collecting conda</div><div class="line">  Using cached https://files.pythonhosted.org/packages/74/4e/c533c3136427be62c38cc0e038cabf167bb54489c2ced2f6df903c456861/conda-4.3.16.tar.gz</div><div class="line">Collecting pycosat&gt;=0.6.1 (from conda)</div><div class="line">  Using cached https://files.pythonhosted.org/packages/c0/fd/e38d68774c0a345b0090d608a90f1fbf423970d812f7ec7aef9ac024e648/pycosat-0.6.3.zip</div><div class="line">Collecting requests&gt;=2.12.4 (from conda)</div><div class="line">  Using cached https://files.pythonhosted.org/packages/7d/e3/20f3d364d6c8e5d2353c72a67778eb189176f08e873c9900e10c0287b84b/requests-2.21.0-py2.py3-none-any.whl</div><div class="line">Collecting ruamel.yaml&gt;=0.11.14 (from conda)</div><div class="line">  Using cached https://files.pythonhosted.org/packages/d3/6b/7d085479a131c16fd910f22172ca7cecf5e5c8ec0b508abf543a54a3b4b0/ruamel.yaml-0.15.85-cp36-cp36m-win_amd64.whl</div><div class="line">Collecting menuinst (from conda)</div><div class="line">  Could not find a version that satisfies the requirement menuinst (from conda) (from versions: )No matching distribution found <span class="keyword">for</span> menuinst (from conda)</div></pre></td></tr></table></figure>
<p>找不到 conda 依赖的 menuinst。</p>
<p>Google 之，得到 <a href="https://stackoverflow.com/questions/43397018/could-not-find-a-version-that-satisfies-conda-for-python-3" target="_blank" rel="external">https://stackoverflow.com/questions/43397018/could-not-find-a-version-that-satisfies-conda-for-python-3</a> 的方案：安装 4.2.7 版本的 conda ，再用 conda 升级它自己：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pip install auxlib</div><div class="line"><span class="comment"># 省略输出</span></div><div class="line">pip install conda==4.2.7</div><div class="line"><span class="comment"># 这次提醒缺少 VSC++ 套件......</span></div></pre></td></tr></table></figure>
<p>咦，有点不对劲。我明明是想用 conda 管理二进制依赖，好不用自己安装各种非 Python 的编译环境来着。</p>
<p>没事，我在答案里还发现了 conda 的安装包：<a href="https://www.continuum.io/downloads#windows" target="_blank" rel="external">https://www.continuum.io/downloads#windows</a></p>
<p>结果点进去……Error522。嗯，也许最新版的下载地址变了，我直接在 <a href="https://continuum.io" target="_blank" rel="external">https://continuum.io</a> 找。</p>
<p>一点，地址变成 <a href="https://www.anaconda.com/" target="_blank" rel="external">https://www.anaconda.com/</a> 了。</p>
<h2 id="OK-Anaconda"><a href="#OK-Anaconda" class="headerlink" title="OK, Anaconda"></a>OK, Anaconda</h2><p>根据网上资料，这 continuum 就是开发 conda 的公司。可能由于 Anaconda 成为了最知名的产品，公司直接改名 Anaconda Inc. 了……</p>
<p>我找了半天，没有直接提供 conda 的安装包。最多安装 Miniconda，但是还是不可避免多出一个 Python 环境。</p>
<p>既然我并非真的闲得想手动安装一个一个常用依赖，只是想知道 Why，我最终安装了 Anaconda，并且多了一个 Anaconda 专用的 Python 3.7 （未加入 PATH）。以后一般 Python 的应用开发，使用 原来的 Python 3.6，Anaconda 相关的在 Anaconda Prompt 下操作。以上。</p>
<h2 id="some-tips"><a href="#some-tips" class="headerlink" title="some tips"></a>some tips</h2><p>pip 与 conda 并非竞争对手——他们的工作有部分重叠，但更多面向不同的需求：</p>
<ul>
<li>pip 面向纯 Python 环境，从源码安装，是 Python 官方包管理器</li>
<li>conda 来自 Python 不止于 Python，是为 PyData 社区解决各种非 Python 的二进制依赖</li>
</ul>
<p>本质上，这是一个二难质问：如果你愿意折腾用 pip 安装 conda ，你就没有必要安装 conda；既然你需要 conda 为你解决二进制依赖，你就不能用 pip 安装——因为 conda 本身也有一系列二进制依赖。</p>
<p>后续操作：（如果有必要，我考虑另起一篇展开说）</p>
<ul>
<li>安装 Anaconda （官方已经不提供二进制的 conda 安装包），既然这样，不再折腾</li>
<li>当前版本（2018.12）已带 Jupyter</li>
<li>添加清华 channels</li>
<li>conda 安装 nbextensions</li>
<li>修改 notebook 默认位置<ul>
<li>快捷方式改参数</li>
<li>配置文件改 <code>jupyter notebook --generate-config</code></li>
</ul>
</li>
</ul>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几乎所有人都直接安装 Anaconda。但它不过是 conda 包管理器 + 预置一系列常用 sci&amp;amp;math 包。&lt;/p&gt;
&lt;p&gt;如果我有环境洁癖，只允许存在一个 Python 环境，我可以 &lt;code&gt;pip install conda&lt;/code&gt; ，再逐个 &lt;code&gt;conda install xyz&lt;/code&gt; 安装那些 conda 下的包吗？&lt;/p&gt;
    
    </summary>
    
    
      <category term="pip" scheme="https://jaycechant.info/tags/pip/"/>
    
      <category term="Anaconda" scheme="https://jaycechant.info/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>配置 Golang 开发环境</title>
    <link href="https://jaycechant.info/2018/setup-golang-env/"/>
    <id>https://jaycechant.info/2018/setup-golang-env/</id>
    <published>2018-11-06T16:53:09.000Z</published>
    <updated>2018-11-07T10:54:59.049Z</updated>
    
    <content type="html"><![CDATA[<p>为想尝试 Go 的朋友开个头，介绍环境的配置。语言的优缺点不在此展开。</p>
<p>因身边多数使用 Win64 环境，以下无特殊说明均以 Win64 为例，日后有需要再补充其他平台部分。</p>
<a id="more"></a>
<h2 id="1-Go"><a href="#1-Go" class="headerlink" title="1. Go"></a>1. Go</h2><ul>
<li>下载：<a href="https://golang.org/dl/" target="_blank" rel="external">https://golang.org/dl/</a> （out of wall）</li>
<li>版本：1.9+，一般下载最新版本即可</li>
</ul>
<h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><p>访问官网下载页面，获取对应版本。不过如果你不懂得翻-墙，会发现访问不了官网，因为它在 Google 的服务器上。这点请自行解决。不过经过 PuTTY 和 iOS SDK 第三方下载被植入木马的事件，劝各位还是努力到官网下载。</p>
<p>Win64 的安装文件一般为 <code>go1.xx.y.windows-amd64.msi</code> ，下载好后安装，路径默认或自定义，没有强制要求，不要出现中文和空格，尽量短一些即可。个人路径供参考： <code>D:\Dev\Go</code> 。</p>
<h3 id="1-2-环境变量"><a href="#1-2-环境变量" class="headerlink" title="1.2 环境变量"></a>1.2 环境变量</h3><p>安装后设置环境变量，指定 官方工具包（及内置库） 和 工作目录。</p>
<p>以下设置均在：<code>我的电脑（Win10 此电脑） &gt; 右键菜单 &gt; 属性 &gt; 高级系统设置 &gt; 环境变量</code> ， 如果变量存在就确认内容，不存在就新建。</p>
<h4 id="1-2-1-GOROOT"><a href="#1-2-1-GOROOT" class="headerlink" title="1.2.1 GOROOT"></a>1.2.1 GOROOT</h4><p>指定 Go 的安装目录，并以此确定工具包和内置库的位置。确保 <code>GOROOT</code> 指向 Go 的安装目录 （例： <code>D:\Dev\Go</code>）。</p>
<h4 id="1-2-2-GOPATH"><a href="#1-2-2-GOPATH" class="headerlink" title="1.2.2 GOPATH"></a>1.2.2 GOPATH</h4><p>指定 Go 的 workspace（工作目录）。<code>GOPATH</code> 允许指定多个 workspace，中间以 <code>;</code> 隔开（跟 <code>PATH</code> 类似，其他平台下的分隔符是 <code>:</code>）。可以在任意一个 workspace 下开发，但是 <code>go get</code> 和 <code>go install</code> 的包只会放在第一个目录。当引用包的时候，会先查找 <code>%GOROOT%\pkg</code> 的语言内置包，再顺序查找每个 workspace 的 <code>src</code> 目录，找到就结束。</p>
<p>一般情况下，推荐设置两个 workspace ： 第一个存放下载的第三方依赖包，第二个存放本地开发的代码，分开避免混淆。例：<code>C:\Users\Jayce\go;E:\workspace\go</code> 。</p>
<h4 id="1-2-3-PATH"><a href="#1-2-3-PATH" class="headerlink" title="1.2.3 PATH"></a>1.2.3 PATH</h4><p><code>PATH</code> 是系统自带的执行路径，所以我们不能覆盖它，只能在后面追加。需要将<strong>GOROOT 的 bin 目录</strong> 和 <strong>第一个 workspace 的 bin 目录加入 PATH</strong> ，以调用 官方工具包 和 安装的第三方工具。其中如果你检查 GOROOT 的时候发现 GOROOT 已经配置好了，有可能 <code>%GOROOT%\bin</code> 也已经添加了，你可以复制到记事本里检查一下。</p>
<p>假定两个都没有添加，那么以上述 <code>GOPATH</code> 的配置为例，则是 <code>原来的PATH内容;%GOROOT%\bin;C:\Users\Jayce\go\bin</code></p>
<p><strong>注：Win10 对 PATH 的管理进行了优化，不再是一长串用 <code>;</code> 分隔的路径，而是一个路径的列表，追加时只需新建子项即可。</strong></p>
<h3 id="1-3-验证"><a href="#1-3-验证" class="headerlink" title="1.3 验证"></a>1.3 验证</h3><p>打开 cmd，然后按如下操作</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看安装版本</span></div><div class="line">go version</div><div class="line"><span class="comment"># 正常应该显示你安装的版本</span></div><div class="line"><span class="comment"># 找不到指令请检查安装  GOROOT 的安装目录是否正确 / PATH 里是否包含了 %GOROOT%\bin</span></div><div class="line">go version go1.<span class="number">10.1</span> windows/amd64</div></pre></td></tr></table></figure>
<h2 id="2-gcc-和-make"><a href="#2-gcc-和-make" class="headerlink" title="2. gcc 和 make"></a>2. gcc 和 make</h2><p>有时部分依赖包以 C 开发，需要用到 gcc 编译；另外，为简化编译流程，项目规模增大后会逐渐交由 make 管理编译。两个工具在 Linux 下一般自带，或通过系统的包管理很轻易地安装，Windows 下则要安装 MinGW-w64 。注意必须是 <strong>MinGW-w64</strong> 。MinGW 不兼容 64 位系统，同时长期不更新；而 w64 可以同时兼容 32 和 64 位。</p>
<ul>
<li>下载：<a href="https://sourceforge.net/projects/mingw-w64/" target="_blank" rel="external">https://sourceforge.net/projects/mingw-w64/</a></li>
</ul>
<h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><p>下载得到的是安装器，在选择版本后，会自动下载对应版本并安装。建议不要改动任何选项，只需要确保 Architecture 对应你的计算机即可（Win64 选 x86_64）。</p>
<p>安装路径依然没有强制要求，无中文和空格，尽量短即可。参考：<code>D:\Dev\mingw-w64</code> 。</p>
<h3 id="2-2-创建-make-的软链接"><a href="#2-2-创建-make-的软链接" class="headerlink" title="2.2 创建 make 的软链接"></a>2.2 创建 make 的软链接</h3><p>安装完后进入 安装目录的 bin 目录，可以看到大量的工具，其中有 <code>gcc.exe</code>  和 <code>mingw32-make.exe</code> ，没有 <code>make.exe</code> 。其实 <code>mingw32-make.exe</code> 就是，但是用这个名字调用太长，也不利于其他工具用默认的名字调用，所以我们要创建一个名字叫 <code>make.exe</code> 的软链。</p>
<p>首先用管理员权限打开 cmd （右键菜单 &gt; 用管理员权限打开），然后按如下操作：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 请修改路径对应你的安装目录</span></div><div class="line">C:\Windows\system32&gt;cd /d D:\Dev\mingw-w64\bin</div><div class="line"></div><div class="line">D:\Dev\mingw-w64\bin&gt;mklink make.exe mingw32-make.exe</div><div class="line">为 make.exe &lt;&lt;===&gt;&gt; mingw32-make.exe 创建的符号链接</div></pre></td></tr></table></figure>
<p><strong>建议创建软链之后就关掉管理员权限的 cmd，避免因权限过高造成不可恢复的误操作。后续操作在普通权限下执行即可。</strong></p>
<p>完成后你会看到 bin 目录下多了一个 <code>make.exe</code> 文件，然后执行 <code>dir make.exe</code> ，会看到</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">D:\Dev\mingw-w64\bin&gt;dir make.exe</div><div class="line"><span class="number">2018</span>/<span class="number">10</span>/<span class="number">04</span>  <span class="number">18</span>:<span class="number">17</span>    &lt;SYMLINK&gt;      make.exe [mingw32-make.exe]</div></pre></td></tr></table></figure>
<h3 id="2-3-PATH-环境变量"><a href="#2-3-PATH-环境变量" class="headerlink" title="2.3 PATH 环境变量"></a>2.3 PATH 环境变量</h3><p>跟 Go 安装类似的， bin 目录也要追加到 PATH 目录的最后，详细可以参考 1.2.3 Go 的 PATH 环境变量部分。</p>
<p><strong>特别强调：mingw-w64 下面还有一套 mingw32，添加到 PATH 的是根目录的 bin，不是 mingw32 下面的！！</strong></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mingw-w64</div><div class="line">├── bin <span class="comment"># 64位系统认准这个！！</span></div><div class="line">├── mingw32</div><div class="line">│   ├── bin <span class="comment"># 不是这个</span></div><div class="line">......</div></pre></td></tr></table></figure>
<h3 id="2-4-验证"><a href="#2-4-验证" class="headerlink" title="2.4 验证"></a>2.4 验证</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gcc --version</div><div class="line"><span class="comment"># 正常会输出 gcc 的版本，64位：x86_64, 32位：i686; 注意区分</span></div><div class="line">make -v</div><div class="line"><span class="comment"># 能调用就行，不需要留意位数</span></div></pre></td></tr></table></figure>
<h2 id="3-项目包管理及编译"><a href="#3-项目包管理及编译" class="headerlink" title="3. 项目包管理及编译"></a>3. 项目包管理及编译</h2><h3 id="3-0-预备知识：Go-的目录结构与包管理"><a href="#3-0-预备知识：Go-的目录结构与包管理" class="headerlink" title="3.0 预备知识：Go 的目录结构与包管理"></a>3.0 预备知识：Go 的目录结构与包管理</h3><p>每个 workspace 下都有三个指定用途的目录，用到的时候如果不存在，会自动创建：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">├── bin <span class="comment"># 存放 install 之后的可执行文件</span></div><div class="line">├── pkg <span class="comment"># 存放编译之后链接之前的中间文件</span></div><div class="line">└── src <span class="comment"># 存放 包 的源文件</span></div></pre></td></tr></table></figure>
<p>其中 <code>go get</code> 获得的 src 和 <code>go install</code> 获得的 bin ，会放在第一个 workspace 中，所以建议至少添加两个 workspace，并在第二个进行本地开发，避免混淆。</p>
<p>Go 语言引用包时，需要在代码开头 import 对应包的路径（非包名，虽然路径的最后一层目录往往跟包名一样，但也可以不一样）：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"../local/relative/path"</span> <span class="comment">// 相对路径。不纳入 workspace 的小项目允许。正规项目需要纳入，会报错！！</span></div><div class="line">    <span class="string">"github.com/urface/cli"</span> <span class="comment">// 全局路径。</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p>全局路径的 import </p>
<ol>
<li>先在 <code>%GOROOT%\pkg</code> 查找内置的包（已编译，所以引用 pkg）</li>
<li>再在每个 workspace 的 src 目录查找</li>
<li>在 1.6 版本后新增了项目根目录下的 vendor 目录，可以通过依赖管理工具拷贝特定版本的依赖，方便锁定依赖的版本，并随项目源码一起提交。</li>
</ol>
<p>使用了 local import 的包，不能被别的包 import，所以在正式项目中基本是禁止使用的。那么需要被引用的包只能存放在 src 或者 vendor 中。</p>
<p>跟 Java 相比最大的差别就是， <strong>项目的根目录不在 import 的搜索范围内</strong> 。Java 项目内的包，包名（跟路径对应）不包括项目名，从根目录下开始算；Go 没有项目本地包的概念，都是全局 import，包路径从 src 下开始算，所以项目<strong>根目录名</strong>也是包路径的一部分。由此得出结论：</p>
<ul>
<li>Go 项目必须在 workspace 的 src 目录下开发</li>
<li>根目录 <strong>名字确定后就不能随意更改</strong> ，否则项目内的互相 import 都得改</li>
</ul>
<h3 id="3-1-包管理"><a href="#3-1-包管理" class="headerlink" title="3.1 包管理"></a>3.1 包管理</h3><p>有了上述知识准备，接下来的内容就容易理解了。</p>
<ul>
<li>git clone 必须在 （第二个） workspace 的 src 目录进行 （后续要新建项目同理）。</li>
<li>项目名（例：myproj） 需要跟 import 路径 （<code>import myproj/xxx/yyy</code>） 保持一致，新建项目时就要考虑，clone 之后不能修改目录名。</li>
<li>推荐使用官方的依赖管理工具 dep，所有第三方依赖都会拷贝到 vendor 跟源码一起管理，clone 后不需 <code>go get</code> 对应的依赖。</li>
</ul>
<h3 id="3-2-编译"><a href="#3-2-编译" class="headerlink" title="3.2 编译"></a>3.2 编译</h3><p>在确保做好包管理的基础上，编译就很简单了，在根目录打开 cmd：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go build</div></pre></td></tr></table></figure>
<p>即可。</p>
<p><strong>TODO：</strong> </p>
<p>后续项目复杂度增加后，编译会交给 make 管理，这部分内容待补充，或另起一文。</p>
<h2 id="4-IDE"><a href="#4-IDE" class="headerlink" title="4. IDE"></a>4. IDE</h2><ul>
<li><p><a href="https://github.com/visualfc/liteide" target="_blank" rel="external">LiteIDE</a>：LiteIDE is a simple, open source, cross-platform Go IDE</p>
<p>国人开发的开源跨平台 IDE，简单，免费，够用。</p>
</li>
<li><p><a href="https://www.jetbrains.com/go/" target="_blank" rel="external">GoLand</a>：A Clever IDE to Go by JetBrains</p>
<p>IDE 名门 JetBrains 出品，口碑很好，就是要付费。</p>
</li>
<li><p><a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a>：Code Editing. Redefined</p>
<p>传统软件巨头微软拥抱开源之后的 开源 IDE ，热度很高；并非专门为 Go 设计，但提供相关插件。</p>
</li>
</ul>
<p>视乎你更习惯哪个 IDE，看你自己喜欢。</p>
<h2 id="5-其他工具"><a href="#5-其他工具" class="headerlink" title="5. 其他工具"></a>5. 其他工具</h2><ul>
<li>bindata：将资源文件编译成 go 源码，参与编译。（类似 Android 下的 R.java）</li>
<li>dep：Go 官方依赖管理工具，将指定版本的第三方依赖拷贝到 vendor 目录，跟源码一起管理。</li>
</ul>
<p><strong>TODO：</strong> 这两个是非常方便的工具，但没有也可以做开发，并非必须，待补充。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为想尝试 Go 的朋友开个头，介绍环境的配置。语言的优缺点不在此展开。&lt;/p&gt;
&lt;p&gt;因身边多数使用 Win64 环境，以下无特殊说明均以 Win64 为例，日后有需要再补充其他平台部分。&lt;/p&gt;
    
    </summary>
    
    
      <category term="unfinished" scheme="https://jaycechant.info/tags/unfinished/"/>
    
      <category term="golang" scheme="https://jaycechant.info/tags/golang/"/>
    
      <category term="dep" scheme="https://jaycechant.info/tags/dep/"/>
    
  </entry>
  
  <entry>
    <title>golang 依赖管理：glide 从入门到放弃</title>
    <link href="https://jaycechant.info/2018/glide-from-start-up-to-give-up/"/>
    <id>https://jaycechant.info/2018/glide-from-start-up-to-give-up/</id>
    <published>2018-10-24T10:01:17.000Z</published>
    <updated>2018-10-26T06:04:39.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>先丢结论，两个推荐选项：</p>
<ul>
<li>forked glide + 配置 mirror ：<a href="https://github.com/xkeyideal/glide" target="_blank" rel="external">https://github.com/xkeyideal/glide</a> ，具体修复哪些 bug ，以及它特有的 mirror 配置，请看 <a href="https://github.com/xkeyideal/glide/blob/master/README_CN.md" target="_blank" rel="external">https://github.com/xkeyideal/glide/blob/master/README_CN.md</a></li>
<li>dep + proxy ：<a href="https://github.com/golang/dep" target="_blank" rel="external">https://github.com/golang/dep</a> ，proxy 不过是设置 <code>http_proxy</code> 和 <code>https_proxy</code> 两个环境变量。</li>
</ul>
<a id="more"></a>
<p>glide 声名在外，但太子 dep 出生以来不再活跃，bug 不少且修复不活跃，要改用网友 fork 的版本。<strong>如果不会搞 proxy，推荐这个</strong> 。</p>
<p>而 <strong>长远考虑，官方支持的 dep 更好</strong> ，别的不说，光 prune 一个特性就值了。</p>
<p>折腾过程请看下文：</p>
<hr>
<p>go 最近几年热了起来，我一个长期靠 Java 吃饭的人，也从 Python 吹，变成了 go 吹。</p>
<h2 id="依赖管起来-glide-init"><a href="#依赖管起来-glide-init" class="headerlink" title="依赖管起来 glide init"></a>依赖管起来 glide init</h2><p>一开始就知道 go 官方的依赖管理不给力。如果第三方依赖有 breaking changes，或者干脆删库走人，好好一个项目，换个没有依赖包缓存的机器，就编译不能了。1.5 开始引入了 vendor 目录，但毕竟没有默认启用，工具支持也不够（当时 dep 不知道是没发布，还是还在 alpha）。</p>
<p>当时看了网上的讨论，好像一致推崇 glide 。安装，玩一下就算了。当时写小工具，依赖很少，没把 glide 用起来。（多数是用 go 重写 Python 工具。把工具共享出去时别人没装 Python，懒得折腾打包。）</p>
<h3 id="breaking-changes"><a href="#breaking-changes" class="headerlink" title="breaking changes"></a>breaking changes</h3><p>直到写稍大一点的项目，依赖多起来。但还是拖着，心想具体用哪个包可能还会变，不会刚写两天就来一个 breaking change。</p>
<p>写到稍有模样，碰到个 bug，最后发现是依赖包引起的，去主页一看，作者已经 fix 了，是个 breaking change，发了个大版本。我升级了，还好 breaking 的地方对我没有影响。但这样一来，就下决心把依赖管理起来。</p>
<h3 id="碰『壁』"><a href="#碰『壁』" class="headerlink" title="碰『壁』"></a>碰『壁』</h3><p>（这不是教学帖，不教安装使用。反正教程一搜一大把。）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">glide init</div><div class="line">...... // 省略 glide 问我的一堆问题</div><div class="line">glide install</div><div class="line">[INFO]  Lock file (glide.lock) does not exist. Performing update.</div><div class="line">[INFO]  Downloading dependencies. Please wait...</div><div class="line">...... // 省略那些成功的包</div><div class="line">[INFO]  --&gt; Fetching golang.org/x/crypto/acme/autocert</div><div class="line">[WARN]  Unable to checkout golang.org/x/crypto/acme/autocert</div><div class="line">[ERROR] Error looking <span class="keyword">for</span> golang.org/x/crypto/acme/autocert: Cannot detect VCS</div><div class="line">...... // 这种报错一个 4 个，都是 golang.org 上的包</div></pre></td></tr></table></figure>
<p>出问题问谷歌，然后找到这么一个文章： <a href="https://studygolang.com/articles/10453" target="_blank" rel="external">https://studygolang.com/articles/10453</a> ， 里面说是 golang.org 被墙了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">curl golang.org</div><div class="line">curl: (7) Failed to connect to golang.org port 80: Timed out</div><div class="line"></div><div class="line">curl https://golang.org</div><div class="line">curl: (7) Failed to connect to golang.org port 443: Timed out</div><div class="line"></div><div class="line">curl -x socks5://127.0.0.1:1080 https://golang.org/x/crypto/acme/autocert</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>/&gt;</div><div class="line">&lt;meta name=<span class="string">"go-import"</span> content=<span class="string">"golang.org/x/crypto git https://go.googlesource.com/crypto"</span>&gt;</div><div class="line">&lt;meta name=<span class="string">"go-source"</span> content=<span class="string">"golang.org/x/crypto https://github.com/golang/crypto/ https://github.com/golang/crypto/tree/master&#123;/dir&#125; https://github.com/golang/crypto/blob/master&#123;/dir&#125;/&#123;file&#125;#L&#123;line&#125;"</span>&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"refresh"</span> content=<span class="string">"0; url=https://godoc.org/golang.org/x/crypto/acme/autocert"</span>&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">Nothing to see here; &lt;a href=<span class="string">"https://godoc.org/golang.org/x/crypto/acme/autocert"</span>&gt;move along&lt;/a&gt;.</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>确实被墙了。那平时上为什么毫无障碍的？这时才想起翻 pac 配置，发现 golang.org 赫然在列，说明被屏蔽不是一天两天，早早被加入了 gfwlist。（后来得知网站托管在 google 服务器上）</p>
<p>而且结合 <code>golang.org/x/crypto</code> 的重定向 和 meta 信息，可以看出来 golang.org 只是提供重定向信息，<code>go get</code> 和 <code>glide</code> 应该是解析这些信息之后，再去 googlesource 或者 github 取代码。而目前第一步就 Time out 了，所以即使给 git 加 proxy 也没用。</p>
<h2 id="配置镜像-glide-mirror"><a href="#配置镜像-glide-mirror" class="headerlink" title="配置镜像 glide mirror"></a>配置镜像 glide mirror</h2><h3 id="mirror-的-N-种配置方法"><a href="#mirror-的-N-种配置方法" class="headerlink" title="mirror 的 N 种配置方法"></a>mirror 的 N 种配置方法</h3><p>那配置镜像吧。咦，不对，别人的例子都是 import 依赖包的根目录，例如 <code>golang.org/x/crypto</code> ，可以直接映射 <code>github.com/golang/crypto</code> ，但是子包 <code>golang.org/x/crypto/acme/autocert</code> 怎么办？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">glide mirror <span class="built_in">set</span> golang.org/x/crypto github.com/golang/crypto</div></pre></td></tr></table></figure>
<p>照样 <code>Cannot detect VCS</code> 。 这个命令实际上写入了 <code>~/.glide/mirrors.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">repos:</span> <span class="comment"># 以这个包为例子，省略同理的其他包，下同</span></div><div class="line"><span class="attr">- original:</span> golang.org/x/crypto</div><div class="line"><span class="attr">  repo:</span> github.com/golang/crypto</div></pre></td></tr></table></figure>
<p>所以为了避免反复 <code>glide mirror remove</code>  再 set，我直接在 <code>mirrors.yaml</code> 上修改：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">repos:</span> <span class="comment"># 考虑 import 的路径是 golang.org/x/crypto/acme/autocert，可能不会命中 golang.org/x/crypto</span></div><div class="line"><span class="attr">- original:</span> golang.org/x/crypto/acme/autocert</div><div class="line"><span class="attr">  repo:</span> github.com/golang/crypto/acme/autocert</div></pre></td></tr></table></figure>
<p>继续一样的错误，再改</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">repos:</span> <span class="comment"># github 上实际的地址是 github.com/golang/crypto/tree/master&#123;/dir&#125;， github.com/golang/crypto/acme/autocert 根本不存在，也许映射到根目录，余下的会根据规则匹配？</span></div><div class="line"><span class="attr">- original:</span> golang.org/x/crypto/acme/autocert</div><div class="line"><span class="attr">  repo:</span> github.com/golang/crypto</div></pre></td></tr></table></figure>
<p>照旧，再改</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">repos:</span> <span class="comment"># 看到有些人加了 https，死马当活马医，加上试试</span></div><div class="line"><span class="attr">- original:</span> https://golang.org/x/crypto/acme/autocert</div><div class="line"><span class="attr">  repo:</span> https://github.com/golang/crypto</div></pre></td></tr></table></figure>
<p>好了，终于不报该死的 <code>Cannot detect VCS</code> 了。</p>
<h3 id="看不见的折腾"><a href="#看不见的折腾" class="headerlink" title="看不见的折腾"></a>看不见的折腾</h3><p>这数次不断尝试和失败的过程非常痛苦。因为没有一次跑到最后，没有生成 gllide.lock 文件，所以每次执行 <code>glide install</code> ，实际触发的都是 <code>glide update</code> ；而 github 虽然可以访问，速度并不快，在知道关键的 4 个包是否成功 fetch 前，先要忍受一堆包的 fetch updates，偶尔还会因为超时出现 <code>exit status 128</code>。</p>
<p>而除了上面列出的，还尝试过加 <code>--vcs git</code> ，加 <code>--base</code> ，给 git 加 proxy …… 尝试次数比看到的要多，只是最后证明无关就没有列出；每次失败之后都要思考背后的原因，看哪里还能调整一下。在这上面耗了大半天。</p>
<h2 id="还有-ERROR？-另一个-glide"><a href="#还有-ERROR？-另一个-glide" class="headerlink" title="还有 ERROR？ 另一个 glide"></a>还有 ERROR？ 另一个 glide</h2><h3 id="endless-errors"><a href="#endless-errors" class="headerlink" title="endless errors"></a>endless errors</h3><p>你以为这就完了？并没有！</p>
<p>在终于消灭了所有 <code>Cannot detect VCS</code> 之后</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[ERROR] Unable to <span class="built_in">export</span> dependencies to vendor directory: Error moving files: <span class="built_in">exit</span> status 1. output</div><div class="line">: ***********</div><div class="line">************** // 乱码会打乱这篇文章的编码，所以用 * 代替</div></pre></td></tr></table></figure>
<p>还有 ERROR，而且还乱码，什么鬼啊！？？ 然后我就找到了这个：</p>
<p><a href="https://github.com/xkeyideal/glide/blob/master/README_CN.md" target="_blank" rel="external">https://github.com/xkeyideal/glide/blob/master/README_CN.md</a></p>
<p>简单说，glide 有两个 bug，一个是子包的目录映射错误（还没成功 export 过，无缘见识），一个是 Windows 下 export dependencies 时的权限问题，乱码是由于编码（Windows 默认 GB2312，但 glide 输出 UTF-8）。因为原作者迟迟没有合 PR <a href="https://github.com/Masterminds/glide/pull/889/commits/cc37dc711a3191c2b91b01b9593c685660eeb9af" target="_blank" rel="external">#889</a> ，作者就 fork 之后修复了。（我去看了，17 年 7 月的 PR，到现在 18 年 10 月，仍然没有合并……）</p>
<h3 id="forked-glide"><a href="#forked-glide" class="headerlink" title="forked glide"></a>forked glide</h3><p>先把原来的 glide 重命名为 <code>glide.Materminds.bk</code> （在 <code>~/go/bin</code> 下），然后</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get github.com/xkeyideal/glide</div></pre></td></tr></table></figure>
<p>另外，记得加上 base 参数，实测过不加 export 的目录结构确实是错的。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">repos:</span></div><div class="line"><span class="attr">- original:</span> https://golang.org/x/crypto</div><div class="line"><span class="attr">  repo:</span> https://github.com/golang/crypto</div><div class="line"><span class="attr">  base:</span> github.com/golang/crypto</div></pre></td></tr></table></figure>
<p>已经忘了是第几次执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># glide init 只需执行一次，只要 glide.yaml 存在就不必再次执行</span></div><div class="line">glide install</div></pre></td></tr></table></figure>
<p>终于执行到了最后。</p>
<h2 id="转投-dep"><a href="#转投-dep" class="headerlink" title="转投 dep"></a>转投 dep</h2><p>完事了吗？还没有。</p>
<p>从上面的尝试可以看出，glide 虽在一众依赖管理工具中收获了人气， 但存在不少 bug；而 364 个 open issue / 34 个 oepn pr ，多数有一年没有处理，最早的居然是 15 年的 （截止 2018/10/24），可以看出来作者 <strong>不再活跃</strong> ，对一个开源项目来说， <strong>比有 bug 更糟糕</strong> 。</p>
<p>像 Windows 下的权限问题，上面 #889 一年多钱提了 PR 没人管，9月又有人提了重复的PR <a href="https://github.com/Masterminds/glide/pull/1020" target="_blank" rel="external">#1020: Update winbug.go</a> ，作者依旧没有处理。</p>
<p>fork 项目虽解决了几个明显问题，毕竟不是活跃的原项目，更多是先修复继续用的权益之计，以后也很难代替原作者继续推进开发。</p>
<h3 id="重新评估"><a href="#重新评估" class="headerlink" title="重新评估"></a>重新评估</h3><p>我要考虑对于 go 依赖管理工具的认知是不是已经过时了。重新查这方面的对比，尽量留意时间近的帖子，翻到这么两篇：</p>
<ul>
<li><p><a href="https://github.com/golang/go/wiki/PackageManagementTools" target="_blank" rel="external">PackageManagementTools</a></p>
</li>
<li><p><a href="https://github.com/blindpirate/report-of-build-tools-for-java-and-golang" target="_blank" rel="external">A Survey on Build Tools of Golang and Java</a></p>
</li>
</ul>
<p>挑重点说：go 有了官方的依赖管理工具 dep，关注度很高，而这还是 17 年 11 月的比较，当时 dep 刚出不久。</p>
<p>关键我还在原版 glide 的 release history 发现这么个东西：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Release 0.13.0</div><div class="line">@mattfarina mattfarina released this on 29 Sep 2017 · 16 commits to master since this release</div><div class="line"></div><div class="line">The latest release of Glide brings continued support.</div><div class="line"></div><div class="line">Consider switching to dep</div><div class="line">Glide is used by a great number of projects and will continue to get support for some time. But, the near future is likely in dep. dep can handle importing Glide config files. Please consider trying dep on your project or converting to dep. If you encounter an issue please check if there is an existing bug report and file one if there is not.</div><div class="line"></div><div class="line">Glide will continue to be supported for some time as there are many users who rely on it and some are not able or ready to move to dep.</div></pre></td></tr></table></figure>
<p>重点就是：这是 Glide 最后一个持续支持的版本了（我的理解是，往后只 patch，不大改），你们考虑切换到 dep 吧。dep 都能导入 Glide 的配置了，未来是官方亲儿子的。</p>
<h3 id="亲儿子-dep"><a href="#亲儿子-dep" class="headerlink" title="亲儿子 dep"></a>亲儿子 dep</h3><p>说得那么好，试试。地址在这 <a href="https://github.com/golang/dep" target="_blank" rel="external">https://github.com/golang/dep</a></p>
<p>安装略过，请按官方指引来，以后也许会变。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 加 -gopath 优先检查本地 gopath，加 -v 看详细输出否则啥进度没有干着急</span></div><div class="line">dep init -gopath -v</div><div class="line">...... // 省略正常内容</div><div class="line">init failed: unable to solve the dependency graph: Solving failure: No versions of github.com/kataras/pio met constraints:</div><div class="line">        master: unable to deduce repository and <span class="built_in">source</span> <span class="built_in">type</span> <span class="keyword">for</span> <span class="string">"golang.org/x/sys/unix"</span>: unable to <span class="built_in">read</span> metadata: unable to fetch raw metadata: failed HTTP request to URL <span class="string">"http://golang.org/x/sys/unix?go-get=1"</span>: Get http://golang.org/x/sys/unix?go-get=1: dial tcp 216.239.37.1:80: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.</div></pre></td></tr></table></figure>
<p>又是 golang.org 无法访问。是不是同样的配方，熟悉的味道？</p>
<p>这还没到下载，而是分析依赖图时获取 metadata 就出错了，所以 gopath 里已有了 cache 并不改变结果。难道 glide 上的困难又得重来一遍？继续问谷歌，又找到一篇：<a href="https://my.oschina.net/u/553243/blog/1504715" target="_blank" rel="external">https://my.oschina.net/u/553243/blog/1504715</a></p>
<p>具体说，就是设置 <code>http_proxy</code> 和 <code>https_proxy</code> 两个环境变量，dep 自然会读取并使用。环境变量根据系统有差异，为了不影响其他地方，每次打开 cmd / shell 设一下也不算麻烦；当然 alias 也是一种解决办法。</p>
<h3 id="意外惊喜"><a href="#意外惊喜" class="headerlink" title="意外惊喜"></a>意外惊喜</h3><p>这回终于好了。依赖图分析需要网络，稍有点久，后面直接读 gopath，速度很快。之后就是把 vendor 提交掉。</p>
<p>不过，提交过程太流畅了，隐约有一丝不对劲。毕竟用 glide 的时候，提交卡顿了一会儿，70+M 的一堆小文件，很正常。去看一眼 vendor 文件夹，这次居然才 25+M！？太小了吧，难道漏文件了？</p>
<p>可是点进去看我就懂了，dep 把引用不到的子包删掉了。换言之，glide 的最小粒度是 项目，哪怕只引用了大项目里的一个子包，也会把整个项目 export 到 vendor； 而 dep 应该是基于 subpackage 或者 文件的，先分析依赖图，没有引用到的文件都不要。<code>Gopkg.toml</code> 里的这段可以作为佐证：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[prune]</div><div class="line">  go-tests = true</div><div class="line">  unused-packages = true</div></pre></td></tr></table></figure>
<p>用过之后，感觉 dep 相当简洁，<code>-gopath</code> 选项 和 prune 特性则是意外之喜。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><ul>
<li>在程序员的节日折腾这些，感受 GFW 带来的不便，相当不友好，感叹国内开发的不易，总有额外成本</li>
<li>今天这『群雄并起，太子一统』的故事套路，怎么感觉跟当年 pip 那么像</li>
</ul>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;先丢结论，两个推荐选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;forked glide + 配置 mirror ：&lt;a href=&quot;https://github.com/xkeyideal/glide&quot;&gt;https://github.com/xkeyideal/glide&lt;/a&gt; ，具体修复哪些 bug ，以及它特有的 mirror 配置，请看 &lt;a href=&quot;https://github.com/xkeyideal/glide/blob/master/README_CN.md&quot;&gt;https://github.com/xkeyideal/glide/blob/master/README_CN.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;dep + proxy ：&lt;a href=&quot;https://github.com/golang/dep&quot;&gt;https://github.com/golang/dep&lt;/a&gt; ，proxy 不过是设置 &lt;code&gt;http_proxy&lt;/code&gt; 和 &lt;code&gt;https_proxy&lt;/code&gt; 两个环境变量。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://jaycechant.info/tags/golang/"/>
    
      <category term="glide" scheme="https://jaycechant.info/tags/glide/"/>
    
  </entry>
  
  <entry>
    <title>为什么你应该学 Python</title>
    <link href="https://jaycechant.info/2017/why-you-should-learn-python/"/>
    <id>https://jaycechant.info/2017/why-you-should-learn-python/</id>
    <published>2017-10-18T15:37:29.000Z</published>
    <updated>2017-10-18T16:45:35.565Z</updated>
    
    <content type="html"><![CDATA[<p>人生苦短，我用Python</p>
<a id="more"></a>
<h2 id="1-What-amp-Why"><a href="#1-What-amp-Why" class="headerlink" title="1 What &amp; Why"></a>1 What &amp; Why</h2><h3 id="1-1-What’s-Python"><a href="#1-1-What’s-Python" class="headerlink" title="1.1 What’s Python?"></a>1.1 What’s Python?</h3><p><strong>Python</strong>（英语发音：/ˈpaɪθən/，类似 『派森』）, 是一种 <strong>面向对象</strong>、<strong>解释型</strong>、<strong>动态 强类型</strong> 程序设计语言。</p>
<p>由 Guido van Rossum 于 <strong>1989年底</strong> 发明，第一个公开发行版发行于 1991 年。</p>
<p>Python 语法 <strong>简洁而清晰</strong>，具有 <strong>丰富和强大的类库</strong>。常被称为 <strong>胶水语言</strong>，能够把用其他语言制作的各种模块（尤其是 C/C++）很轻松地联结在一起。</p>
<p>常见一种应用情形是，使用 Python 快速生成程序原型（有时是程序的最终界面），然后对其中有特别要求的部分，用更合适的语言改写，比如 3D 游戏中的图形渲染模块，性能要求特别高，就可以用 C++ 重写。</p>
<h3 id="1-2-Why-Python"><a href="#1-2-Why-Python" class="headerlink" title="1.2 Why Python?"></a>1.2 Why Python?</h3><blockquote>
<p>生产工具决定生产效率</p>
</blockquote>
<p>理由很多，我列举一些普遍公认的好处，以及优秀特性。</p>
<h4 id="1-2-1-明确、简单、优雅"><a href="#1-2-1-明确、简单、优雅" class="headerlink" title="1.2.1 明确、简单、优雅"></a>1.2.1 明确、简单、优雅</h4><p>这必须放在最前面，而且有可能是最重要的。</p>
<p>Python 在设计上坚持了 <strong>清晰划一</strong> 的风格，这使 Python 非常易读、易写、易维护。</p>
<p>Python 哲学里有这样一句话</p>
<blockquote>
<p>In the face of ambiguity, refuse the temptation to guess.<br>当存在多种可能时，不要尝试去猜测<br>There should be one– and preferably only one –obvious way to do it.<br>应该有一个——而且最好只有一个——最明显的方法去完成</p>
</blockquote>
<p>（Python 在语法上接近C语言，后面的例子会C/C++或者Java的人应该很快可以理解。）</p>
<hr>
<p>以下问题应该多少遇过：</p>
<ul>
<li>C语言 <code>b = a+++++a;</code> 的优先级问题</li>
<li>纠结 <code>while(){}</code> 和 <code>do{}while();</code> 的差别。</li>
<li>凌乱的括号和缩进，团队内难以统一</li>
<li>……</li>
</ul>
<p>于 Python，这些问题都不存在：</p>
<ul>
<li>没有 <code>++</code></li>
<li>只有 <code>while</code> 没有 <code>do</code> </li>
<li>推荐一行一句，不推荐分号</li>
<li>没有花括号</li>
<li>唯一缩进风格，缩进决定代码层级（换言之，缩进不仅仅是排版，而是语义的一部分）</li>
</ul>
<p>一般语言缩进不对，是风格问题，影响可读性，不影响运行；Python 哪怕多一个空格，<strong>报错，罢工。</strong></p>
<p>你可能会不习惯，甚至觉得蛮不讲理。可一旦你习惯并使用一段时间，需要阅读自己以前的代码，或者别人的代码：你会发现，可读性真好！</p>
<p>Python 有意设计 <strong>限制性很强的语法</strong>，使得不好的编程习惯直接不能通过编译（注：需要编译为字节码）。你只有两个选择：清晰易读的代码，和不能运行的代码，没有中间选项。同时也避免了初学者在多种写法中选择困难，在歧义中玩猜谜游戏。</p>
<hr>
<p>去掉令人费解的特性同时，Python 加入了很多符合直觉的语法</p>
<h5 id="同时赋值"><a href="#同时赋值" class="headerlink" title="同时赋值"></a>同时赋值</h5><p>（注：背后的机制是自动打包与解包）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C code</span></div><div class="line">temp = a;</div><div class="line">a = b;</div><div class="line">b = temp;</div></pre></td></tr></table></figure>
<p><br></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python code</span></div><div class="line">a, b = b, a</div></pre></td></tr></table></figure>
<p>五个变量按以下顺序交换，如果用 C 怎么写？多少个临时变量？按什么顺序赋值？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python</span></div><div class="line">a, b, c, d, e = b, d, a, e, c</div></pre></td></tr></table></figure>
<p>不仅是少了两行代码 和 一个临时变量，而是大大提升可读性！</p>
<h5 id="列表推导"><a href="#列表推导" class="headerlink" title="列表推导"></a>列表推导</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C Code</span></div><div class="line"><span class="keyword">int</span> <span class="built_in">list</span>[SIZE];</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; SIZE; i++)&#123;</div><div class="line">    <span class="built_in">list</span>[i] = i * <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python code</span></div><div class="line"></div><div class="line">list = [i * <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(SIZE)]</div></pre></td></tr></table></figure>
<h5 id="默认参数-和-命名参数"><a href="#默认参数-和-命名参数" class="headerlink" title="默认参数 和 命名参数"></a>默认参数 和 命名参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java code</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</div><div class="line">        bar(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> arg1)</span> </span>&#123;</div><div class="line">        bar(arg1, <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2)</span> </span>&#123;</div><div class="line">        System.out.println(arg1 + <span class="string">", "</span> + arg2)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// main() here</span></div><div class="line">Foo f = <span class="keyword">new</span> Foo();</div><div class="line">f.bar(); <span class="comment">// 1, 2</span></div><div class="line">f.bar(<span class="number">11</span>); <span class="comment">// 11, 2</span></div><div class="line">f.bar(<span class="number">11</span>, <span class="number">55</span>); <span class="comment">// 11, 55</span></div></pre></td></tr></table></figure>
<p><br></p>
<p>严格来说，由于 Python 的参数表没有指定类型，无法基于参数表做重载。<br>不过由于 <strong>默认参数</strong> 和 <strong>命名参数</strong> 的存在，Python 不需要重载，还更易用。  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python code</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self, arg1=<span class="number">1</span>, arg2=<span class="number">2</span>, arg3=<span class="number">3</span>, arg4=<span class="number">4</span>)</span>:</span></div><div class="line">        print(<span class="string">', '</span>.join(arg1, arg2, arg3, arg4))</div><div class="line">    </div><div class="line"><span class="comment"># main() here</span></div><div class="line">f = Foo()</div><div class="line">f.bar() <span class="comment"># 1, 2, 3, 4</span></div><div class="line">f.bar(<span class="number">56</span>) <span class="comment"># 56, 2, 3, 4</span></div><div class="line">f.bar(<span class="number">56</span>, <span class="number">78</span>) <span class="comment"># 56, 78, 3, 4</span></div><div class="line">f.bar(<span class="number">56</span>, arg3=<span class="number">99</span>) <span class="comment"># 56, 2, 99, 4 # 如果跳过了中间的参数，后面的参数都要用命名参数</span></div></pre></td></tr></table></figure>
<h5 id="map-与-匿名函数（λ-计算）"><a href="#map-与-匿名函数（λ-计算）" class="headerlink" title="map() 与 匿名函数（λ 计算）"></a>map() 与 匿名函数（λ 计算）</h5><p>以下代码试图将一个列表的每个数变成自己的平方</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C code</span></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; SIZE; i++)&#123;</div><div class="line">    <span class="built_in">list</span>[i] = <span class="built_in">list</span>[i] * <span class="built_in">list</span>[i];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python code</span></div><div class="line">list = map(<span class="keyword">lambda</span> n : n**<span class="number">2</span>, list)</div></pre></td></tr></table></figure>
<p><code>map()</code> 的两个参数分别是 <strong>函数</strong> 和 <strong>列表</strong>。（Python一切皆对象，包括函数本身也可以赋值和作为参数传递）作用是将 列表 中的每一个元素，都放进函数运行，将结果重新构成一个 新的列表 返回。</p>
<p>其中，这个匿名函数等价于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n**<span class="number">2</span></div></pre></td></tr></table></figure>
<h5 id="in-关键字"><a href="#in-关键字" class="headerlink" title="in 关键字"></a>in 关键字</h5><p>多条件判断</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C code</span></div><div class="line"><span class="keyword">if</span>((a == <span class="number">1</span> || a == <span class="number">2</span> || a == <span class="number">4</span> || a == <span class="number">9</span>) &amp;&amp; (b != <span class="number">3</span> &amp;&amp; b != <span class="number">8</span>))&#123;</div><div class="line">    <span class="comment">// so something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python code</span></div><div class="line"><span class="keyword">if</span> a <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>) <span class="keyword">and</span> b <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">3</span>, <span class="number">8</span>):</div><div class="line">    <span class="comment"># do something</span></div></pre></td></tr></table></figure>
<p>容器遍历</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C code</span></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ROW_SIZE; i++)&#123;</div><div class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; COL_SIZE; j++)&#123;</div><div class="line">        <span class="comment">// do something with list[i][j]</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python code</span></div><div class="line"><span class="keyword">for</span> row <span class="keyword">in</span> list:</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> row:</div><div class="line">        <span class="comment"># do something with x</span></div></pre></td></tr></table></figure>
<h5 id="容器特性"><a href="#容器特性" class="headerlink" title="容器特性"></a>容器特性</h5><p>按照一定间隔取元素</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C code</span></div><div class="line"><span class="keyword">for</span>(i = <span class="number">3</span>; i &lt; <span class="number">100</span>; i += <span class="number">4</span>)&#123;</div><div class="line">    <span class="comment">// do something with list[i]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python code</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> list[<span class="number">3</span>:<span class="number">100</span>:<span class="number">4</span>]:</div><div class="line">    <span class="comment"># do something with x</span></div></pre></td></tr></table></figure>
<p>访问尾部元素</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java code</span></div><div class="line">list[list.length - <span class="number">1</span>];</div></pre></td></tr></table></figure>
<p><br></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python code</span></div><div class="line">list[<span class="number">-1</span>]</div></pre></td></tr></table></figure>
<p>一不小心就介绍了太多特性</p>
<p>好用的特性不止这些，像 自动打包与解包，装饰器，闭包这些特性，以后有机会再讨论。</p>
<hr>
<p>大家可以发现，Python 代码非常接近自然语言，基本可以当作英语去阅读理解。所以 Python 又有 『可以运行的伪代码』 之称。</p>
<p>它的简单，让大脑从细节中解放，集中精力放在业务流程和算法上。</p>
<h4 id="1-2-2-跨平台、胶水语言、丰富和强大的类库"><a href="#1-2-2-跨平台、胶水语言、丰富和强大的类库" class="headerlink" title="1.2.2 跨平台、胶水语言、丰富和强大的类库"></a>1.2.2 跨平台、胶水语言、丰富和强大的类库</h4><h5 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h5><p>Python 是开源的语言，只要目标平台实现一个解析环境就能支持。</p>
<p>实际上 Mac 和 大多数 Linux 发行版 内置支持Python。只有 Windows 和 手机 需要安装一下。</p>
<h5 id="胶水语言"><a href="#胶水语言" class="headerlink" title="胶水语言"></a>胶水语言</h5><p>Python 可以跟很多语言互相调用。首先是 C。</p>
<p>这意味着如果某些地方用 Python 实现不好（譬如太慢），你可以换成更适合的语言实现。</p>
<h5 id="强大的类库"><a href="#强大的类库" class="headerlink" title="强大的类库"></a>强大的类库</h5><p>自带的库就包含大量高级数据类型，如 列表、元组、字典、集合、队列… 非常强大。<br>甚至于你要启动一个简单的 Server，一般的语言都要费点劲，Python 自带 HTTPServer ，跑起来就一两行代码。</p>
<p>至于各种第三方库，就强大到令人发指了。除了本身 Python 编写的库，由于 Python 对 C/C++ 友好，众多强大的开源软件包即使不是用 Python 写的，也往往提供 Python API。</p>
<ul>
<li>GUI 库 Qt</li>
<li>计算机视觉库 OpenCV</li>
<li>三维可视化库 VTK</li>
<li>医学图像处理库 ITK</li>
<li>3个著名的科学计算库 NumPy / SciPy / matplotlib </li>
<li>…</li>
</ul>
<p>良好的类库支持，聚集了一大批活跃的开发者，将开发成果继续开源发布出来……</p>
<p>强大的类库支持，让我们从重复造轮子的劳动中解放出来。</p>
<h4 id="1-2-3-快！"><a href="#1-2-3-快！" class="headerlink" title="1.2.3 快！"></a>1.2.3 快！</h4><p>这一点是前面两点的结果。</p>
<p>有网友实践，一个ASF XML 序列化工具，C++ 需要 1580 行，而Python只用 130 行。Python 作为一个高级语言的代码生产力高于多数语言的。（这里高级是指抽象层级更高，无好坏之分）</p>
<p>只要敲非常少的代码，引用强大的类库，就实现了需求；每次修改之后，不需要等待编译，马上可以运行。</p>
<p>这对于 <strong>快速原型</strong> 和 <strong>流程自动化</strong> 很重要。</p>
<h4 id="1-2-4-需求巨大"><a href="#1-2-4-需求巨大" class="headerlink" title="1.2.4 需求巨大"></a>1.2.4 需求巨大</h4><p>最新的 Github 语言排行，Python 已代替 Java 上升到第二的位置。</p>
<p>科学计算、数据挖掘、人工智能、自动化运维/测试 … 未来对于 Python 的需求非常大。</p>
<h4 id="1-2-5-缺点"><a href="#1-2-5-缺点" class="headerlink" title="1.2.5 缺点"></a>1.2.5 缺点</h4><p>Python 没有缺点吗？有：</p>
<ul>
<li><p>慢： 相对于 C/C++ ,  Java 而言，抽象层级高的代价，是执行效率不高。<br>但随着运算力越来越廉价 和 人的时间越来越宝贵，很多时候这变得不那么重要。<br>何况：</p>
<ol>
<li>自己写的 C/C++ 代码，算法效率未必比得上 Python 库里的实现</li>
<li>Python 已经优化得越来越快了，某些特定领域甚至超过了 C（通过 PyPy 的 JIT 技术）</li>
<li>根据 20/80 定律，可以把性能瓶颈用 C/C++ 重写。为什么不一开始就用 C/C++ ？Python 可以快速实现原型。<br>一般的自动化工具，根本感觉不到速度问题。</li>
</ol>
</li>
<li><p>动态语言难以维护大型项目：对于编程习惯不好的人，是的。  </p>
<p>但是同样的人，在静态语言也会面临问题。Java 之所以存在大量复杂的 Design Pattern ，很大一部分是为了绕过语言设置的限制，为此逻辑弄得晦涩难明。<br>Python 语法上做了大量限制，逻辑上却给予了很大的自由，可以很简单就实现原本复杂的设计模式才有的功能。<br>至于大型项目的可维护性，要依赖良好的设计 和 编码规范。另外也可以通过装饰器限制参数类型。不过从公司的角度，要找到合格的开发者，确实比 Java 要难。</p>
</li>
</ul>
<h2 id="2-How-to-Python"><a href="#2-How-to-Python" class="headerlink" title="2 How to Python"></a>2 How to Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python 3.x</span></div><div class="line">print(<span class="string">"Hello world!"</span>)</div></pre></td></tr></table></figure>
<p>That’s all!</p>
<hr>
<p>是的，我没有打算展开讲。</p>
<p>语法接近C，而且非常直观。我到现在为止没有买过任何一本 Python 的书，大多数早期的问题， API 文档就够了。（注1：Windows 版 Python 安装时，会附带一份 API 文档。注2：这段话写于 2015年，后来我买了一本 《Python cookbook》）</p>
<p>文档还看不懂，请打开浏览器。（谷哥还是度娘，自己选择）</p>
<p>到不得不买书的时候，往往已经比较深入了。</p>
<h3 id="Python-2-x-VS-Python-3-x"><a href="#Python-2-x-VS-Python-3-x" class="headerlink" title="Python 2.x VS Python 3.x"></a>Python 2.x VS Python 3.x</h3><p>作为将 <strong>简洁清晰</strong> 视作生命的语言，为了减轻历史包袱，Python 3.0 以后的版本，并 <strong>不兼容</strong> 之前的版本。于是，关于用哪一个版本就分成了两派。</p>
<p>其实很简单</p>
<ul>
<li>如果有什么理由不得不用 Python 2.x，例如有个库只有 2.x 的版本，那就用 2.x （注：随着时间推移这种情况已经越来越少）</li>
<li>否则，推荐从 3.x 开始。它代表未来 Python 的方向。到了今天，多数的库都已移植到 3.x ，官方宣布 2020 停止维护 2.x 。</li>
<li>或者不得已，都用。差别没那么大。</li>
</ul>
<hr>
<blockquote>
<p>Life is short, you need Python!<br><cite>– Bruce Eckel, ANSI C++ Comitee member</cite></p>
</blockquote>
<p><br></p>
<p>文章的最后，一起来看一下 <strong>Python 之禅</strong></p>
<blockquote>
<p><strong>The Zen of Python </strong><br><cite>——Tim Peters</cite><br>Beautiful is better than ugly.<br>Explicit is better than implicit.<br>Simple is better than complex.<br>Complex is better than complicated.<br>Flat is better than nested.<br>Sparse is better than dense.<br>Readability counts.<br>Special cases aren’t special enough to break the rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In the face of ambiguity, refuse the temptation to guess.<br>There should be one– and preferably only one –obvious way to do it.<br>Although that way may not be obvious at first unless you’re Dutch.<br>Now is better than never.<br>Although never is often better than <em>right</em> now.<br>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>Namespaces are one honking great idea – let’s do more of those!  </p>
</blockquote>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生苦短，我用Python&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://jaycechant.info/tags/Python/"/>
    
      <category term="why" scheme="https://jaycechant.info/tags/why/"/>
    
  </entry>
  
  <entry>
    <title>改用 screen 作为 byobu 的后端</title>
    <link href="https://jaycechant.info/2017/use-screen-as-byobu-backend/"/>
    <id>https://jaycechant.info/2017/use-screen-as-byobu-backend/</id>
    <published>2017-09-19T08:57:40.000Z</published>
    <updated>2017-10-12T14:41:16.668Z</updated>
    
    <content type="html"><![CDATA[<p>如题，一分钟Mark文。</p>
<a id="more"></a>
<p><strong>byobu</strong> 是很方便的 Unix 窗口管理器 和 Terminal Multiplexer，它是一套 profiles 或者说 wrapper ，降低使用 tmux 或 screen 的 配置 和 操作 成本。（如果不知道我说什么，看这里<a href="../special-for-tools/">《小工具专题》</a> ，还有 <a href="http://www.byobu.co/" target="_blank" rel="external">byobu主页</a>）</p>
<p>不过我只能算轻度用户，多数时间只使用两个功能：</p>
<ul>
<li>通过 detach 让我下线之后 Session 还能继续干活，以及下次上线不用重新找目录</li>
<li>方便的多窗口管理（F2，F3，F4 完事）</li>
</ul>
<p>从没关心过后面是 tmux 还是 screen。直到公司服务器的 byobu 由我一个人用，到大家都用。大家直接敲 <code>byobu</code> 完事，于是都挤在一个 Session 里，互相干扰。</p>
<hr>
<p>用 byobu 之前我是一个 screen 用户，自然想到大家各自连自己的 Session 。试着给 byobu 加 screen 的参数，发现不行。这时才想到去确认，发现当前版本（5.74）byobu 默认 backend 是 tmux。（印象中是不是早期 byobu 试过以 screen 为默认？忘了）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ byobu --version</div><div class="line">byobu version 5.74</div><div class="line">tmux 1.8</div><div class="line">$ cat ~/.byobu/backend</div><div class="line">BYOBU_BACKEND=tmux</div></pre></td></tr></table></figure>
<p>我知道 tmux 也很强大，加上一些指令和参数，也可以分别创建和管理 Session。可是，我已经习惯 screen ，所以决定把后端换掉。（各位看到这里不必跟我争论哪个好用）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 首先你要确定装了 screen，我一直有装就跳过</span></div><div class="line">$ vim ~/.byobu/backend <span class="comment"># 把里面的值改为 screen，然后保存</span></div><div class="line">$ cat ~/.byobu/backend</div><div class="line">BYOBU_BACKEND=screen</div></pre></td></tr></table></figure>
<p>这时候开始，执行 <code>byobu</code> 背后已经是 screen 在干活。最初目的是为了方便分别创建 Session，对应 <code>screen -S SessionName</code>，相应的 byobu 指令是否可行呢？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ byobu -S jayce</div><div class="line"><span class="comment"># 执行完跳到了一个新的窗口，但是不是真的成功了呢？</span></div><div class="line">~ byobu -ls</div><div class="line">There is a screen on:</div><div class="line">        151664.jayce    (Tuesday, September 19, 2017 05:30:12 CST)      (Attached)</div><div class="line">1 Socket <span class="keyword">in</span> /var/run/screen/jayce.</div></pre></td></tr></table></figure>
<p>注意最后的那个 Attached，表明现在就在这个 Session 里。</p>
<p>如果按 <code>F6</code> 或者 <code>Ctrl-A,Ctrl-D</code> detach ，之后再看：（注意，如果第一次在 screen 按 <code>Ctrl-A</code> ，它会询问 Escape Sequence，建议选 <code>1 screen mode</code> 就好）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ byobu -ls</div><div class="line">There is a screen on:</div><div class="line">        151664.jayce    (Tuesday, September 19, 2017 05:30:12 CST)      (Detached)</div><div class="line">1 Socket <span class="keyword">in</span> /var/run/screen/jayce.</div></pre></td></tr></table></figure>
<hr>
<p>基本能用了，只是还有一个小问题：如果不记得/不确定之前的 Session 还在不在，那么操作流程是</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ byobu -ls <span class="comment"># 列出当前所有 Session</span></div><div class="line">$ byobu -r mysession <span class="comment"># 如果 Session 还在就重连</span></div><div class="line">$ byobu -S mysession <span class="comment"># 如果因为重启的原因不在，新建一个</span></div></pre></td></tr></table></figure>
<p>比较麻烦。screen 自带 <code>-R SessionName</code> 参数实现『有则重连，无则新建』 的动作。可尝试把 <code>-R</code>加载 byobu 后面，不支持。byobu 是怎样接受参数并传递给 screen 的呢？试一下在没有 Session 的情况下，执行没有参数的 byobu：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ byobu</div><div class="line"><span class="comment"># Ctrl-A,D detach</span></div><div class="line">$ screen -ls <span class="comment"># 跟 byobu -ls 等价</span></div><div class="line">There is a screen on:</div><div class="line">        152910.byobu    (Tuesday, September 19, 2017 05:48:24 CST)      (Detached)</div><div class="line">1 Socket <span class="keyword">in</span> /var/run/screen/jayce.</div></pre></td></tr></table></figure>
<p><code>byobu</code> 背后执行的是 <code>screen -S byobu</code> ，也就是说，如果不指定任何参数，byobu 默认会创建一个名字叫 『byobu』 的 Session。而如果指定了（某些）参数，默认名字就不会起效。但 <code>-R</code> 不算在某些参数里。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ sudo vim `<span class="built_in">which</span> byobu`</div><div class="line"><span class="comment"># 省略....</span></div><div class="line">148                 BYOBU_SESSION_NAME=<span class="string">"-S <span class="variable">$PKG</span>"</span> <span class="comment"># 这里的 $PKG 的值就是 byobu</span></div><div class="line">149                 <span class="comment"># Zero out $BYOBU_SESSION_NAME if user has specified a session name</span></div><div class="line">150                 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span>; <span class="keyword">do</span></div><div class="line">151                         <span class="keyword">case</span> <span class="variable">$i</span> <span class="keyword">in</span></div><div class="line">152                                 -*r*|-*d*|-*D*|-*S*|-ls|-list)</div><div class="line">153                                         BYOBU_SESSION_NAME=</div><div class="line">154                                 ;;</div><div class="line">155                         <span class="keyword">esac</span></div><div class="line">156                 <span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>看完上面的内容，应该就知道了『某些参数』是哪些。当指定这几个参数时，默认 Session 名就会被清空。</p>
<p>那容易，把『某些参数』改成下面的样子：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">152                                 -*r*|-*R*|-*d*|-*D*|-*S*|-ls|-list)</div></pre></td></tr></table></figure>
<p>保存。好了，<code>-R</code> 可以用了。</p>
<p>就酱。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如题，一分钟Mark文。&lt;/p&gt;
    
    </summary>
    
    
      <category term="screen" scheme="https://jaycechant.info/tags/screen/"/>
    
      <category term="byobu" scheme="https://jaycechant.info/tags/byobu/"/>
    
  </entry>
  
  <entry>
    <title>OpenGrok + Universal ctags</title>
    <link href="https://jaycechant.info/2017/OpenGrok-Universal-ctags/"/>
    <id>https://jaycechant.info/2017/OpenGrok-Universal-ctags/</id>
    <published>2017-03-06T02:30:56.000Z</published>
    <updated>2017-09-24T09:04:30.354Z</updated>
    
    <content type="html"><![CDATA[<p>OpenGrok 环境搭建踩坑。</p>
<a id="more"></a>
<p>不知道 OpenGrok 自己放 Google ，为何选它不选 Source Insight 或者 Source Navigator 也请自己查。</p>
<p>安装时，服务器上已有 JDK 和 Tomcat，这部分直接跳过。</p>
<h2 id="Ctags"><a href="#Ctags" class="headerlink" title="Ctags"></a>Ctags</h2><h3 id="Exuberant-V-S-Universal"><a href="#Exuberant-V-S-Universal" class="headerlink" title="Exuberant V.S. Universal"></a>Exuberant V.S. Universal</h3><p>OpenGrok 官方 Requirements</p>
<blockquote>
<ul>
<li>Latest <a href="http://www.oracle.com/technetwork/java//" target="_blank" rel="external">Java</a> 1.8</li>
<li>A servlet container like <a href="https://glassfish.dev.java.net/" target="_blank" rel="external">GlassFish</a> or <a href="http://tomcat.apache.org/" target="_blank" rel="external">Tomcat</a> (8.x or later) also running with Java at least 1.8</li>
<li><a href="http://ctags.sourceforge.net/" target="_blank" rel="external">Exuberant Ctags</a></li>
</ul>
</blockquote>
<p>前两个就不说。原打算装 Exuberant Ctags（以下简称EC） ，结果看到知乎上大家讨论，说Universal Ctags （以下简称UC）更好。</p>
<p>官网在此 <a href="http://ctags.io/" target="_blank" rel="external">http://ctags.io/</a></p>
<p>简单说，就是 EC 托管在 SourceForge 不再活跃了，UC 作为 Fork 接过接力棒，继续开发。</p>
<hr>
<blockquote>
<p> autogen.sh runs autoreconf internally. If you use a (binary oriented) GNU/Linux distribution, autoreconf may be part of the autoconf package. In addition you may have to install automake and/or pkg-config, too.</p>
</blockquote>
<h3 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h3><p>官方提醒 autogen.sh 脚本里面调用了 <code>autoreconf</code> ，先安装 automake</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install automake <span class="comment"># ubuntu, centos 用 yum</span></div></pre></td></tr></table></figure>
<p>然后跟着官方走：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/universal-ctags/ctags.git</div><div class="line">$ <span class="built_in">cd</span> ctags</div><div class="line">$ ./autogen.sh</div><div class="line">$ ./configure --prefix=/<span class="built_in">where</span>/you/want <span class="comment"># defaults to /usr/local</span></div><div class="line">configure.ac:120: error: possibly undefined macro: AC_DEFINE</div><div class="line">      If this token and others are legitimate, please use m4_pattern_allow.</div><div class="line">      See the Autoconf documentation.</div><div class="line">configure.ac:342: error: possibly undefined macro: AC_MSG_ERROR</div><div class="line">configure.ac:596: error: possibly undefined macro: AS_IF</div><div class="line">autoreconf: /usr/bin/autoreconf failed with <span class="built_in">exit</span> status: 1</div></pre></td></tr></table></figure>
<p>报错，几个宏找不到。用这几个错误搜索，有人说这个包那个包，最后发现是 <code>pkg-config</code> 解决掉：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install pkg-config</div></pre></td></tr></table></figure>
<p>是不是很眼熟？是的，一开始那段提醒里就已经提到，因为 写着 or ，没当回事。安装完就不再报错了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ ./autogen.sh</div><div class="line">$ ./configure --prefix=/<span class="built_in">where</span>/you/want <span class="comment"># defaults to /usr/local</span></div><div class="line">$ make</div><div class="line">$ make install <span class="comment"># may require extra privileges depending on where to install</span></div><div class="line">$ ctags --version</div><div class="line">Universal Ctags 0.0.0(d2efd07), Copyright (C) 2015 Universal Ctags Team</div><div class="line">Universal Ctags is derived from Exuberant Ctags.</div><div class="line">Exuberant Ctags 5.8, Copyright (C) 1996-2009 Darren Hiebert</div><div class="line">  Compiled: Feb 15 2017, 15:19:35</div><div class="line">  URL: https://ctags.io/</div><div class="line">  Optional compiled features: +wildcards, +regex, +option-directory, +coproc</div></pre></td></tr></table></figure>
<p>UC 安装完毕。</p>
<h2 id="OpenGrok"><a href="#OpenGrok" class="headerlink" title="OpenGrok"></a>OpenGrok</h2><h3 id="初次索引"><a href="#初次索引" class="headerlink" title="初次索引"></a>初次索引</h3><p><a href="http://opengrok.github.io/OpenGrok/" target="_blank" rel="external">OpenGrok</a> 分两个主要部分：</p>
<ol>
<li>index 生成工具</li>
<li>搜索查询的 webapp</li>
</ol>
<p>下载之后，解压目录主要都是 1) ，llib/ 目录下的 <code>source.war</code> 则是 2)。</p>
<p>war 包直接放到 Tomcat 的 webapp 目录即可 通过 <code>http://path/to/tomcat/source/</code> 访问，只不过现在没有项目。</p>
<p>index 工具部分，主要是 lib/ 下的 <code>opengrok.jar</code> 和 bin/ 下的 <code>OpenGrok</code> 脚本。</p>
<p>网上大家讨论，往往要配置很多环境变量，调用 opengrok.jar 时还要给一堆参数。</p>
<p>我懒，直接来最简单的版本：</p>
<ol>
<li>环境变量只配置 <code>OPENGROK_INSTANCE_BASE</code> ，设为 OpenGrok 根目录，其他相关目录，你没有配置会自动在根目录下生成。然后把 <code>OPENGROK_INSTANCE_BASE/bin/</code> 加入 PATH （为了全局执行 OpenGrok ）。</li>
<li>上述配置生效后（source 或者 重新登录 ssh），将项目源码放到 <code>OPENGROK_INSTANCE_BASE/src/</code> 下 （我是直接<code>ln</code> 过去，当然你真放也行），然后 <code>sudo -E OpenGrok index</code> 。</li>
</ol>
<p>尽可能使用默认配置，除了上面半开玩笑的懒，另一方面原因是怕以后会忘掉自己怎么配置。默认配置有它的道理，刚接触拍脑袋决定很难比默认好，集中放在根目录下也方便管理。以后有新需要，再改不晚。</p>
<h3 id="关闭历史"><a href="#关闭历史" class="headerlink" title="关闭历史"></a>关闭历史</h3><p>第一次生成索引，非常顺利。</p>
<p>一段时间之后，代码有更新，重新生成索引，结果一堆报错，几乎每条都是相同内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">14:43:02 WARNING: Non-zero <span class="built_in">exit</span> code status 1 from <span class="built_in">command</span> [/usr/bin/svn, <span class="built_in">log</span>, --trust-server-cert, --non-interactive, --xml, -v] <span class="keyword">in</span> directory /path/to/the/<span class="built_in">source</span>: svn E170001: Unable to connect to a repository at URL <span class="string">'svn://path/to/SVN/repo'</span></div><div class="line">svn: E170001: Can<span class="string">'t get username or password</span></div></pre></td></tr></table></figure>
<p>原因清楚明白：OG 试图生成文件历史，对每个文件都执行 <code>svn log</code>。可是没有账号密码。</p>
<p>当然没有，我都没给它。</p>
<p>我后来查到，只要定义两个宏的值，就可以告诉它账号密码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">OPENGROK_SUBVERSION_USERNAME=<span class="string">"xxx"</span></div><div class="line">OPENGROK_SUBVERSION_PASSWORD=<span class="string">"yyy"</span></div></pre></td></tr></table></figure>
<p>其实你去看 OpenGrok 托管在 github 的 <a href="https://github.com/OpenGrok/OpenGrok" target="_blank" rel="external">源码</a> ，看<a href="https://github.com/OpenGrok/OpenGrok/blob/d2db363d135fe9eb6498bf458bbc49e30a494480/src/org/opensolaris/opengrok/history/SubversionRepository.java" target="_blank" rel="external">src/org/opensolaris/opengrok/history/SubversionRepository.java</a> ，源码里写得很清楚。</p>
<p>不过因为某些原因，我暂时不想生成历史，怎么关闭历史索引功能呢？我找到了一个讨论：<a href="https://github.com/OpenGrok/OpenGrok/issues/32" target="_blank" rel="external">https://github.com/OpenGrok/OpenGrok/issues/32</a></p>
<p>简单说，只有加了 <code>-S</code> 和 <code>-H</code> 参数，才会生成历史；这点去看 <a href="https://github.com/OpenGrok/OpenGrok/blob/75f1fc793f0b203cc97c1a75dc82522f171aa431/src/org/opensolaris/opengrok/index/Indexer.java" target="_blank" rel="external">src/org/opensolaris/opengrok/index/Indexer.java</a> 能得到证实。</p>
<hr>
<p>然而，我并没有加任何参数 ？！</p>
<p>一研究，是这样，参数是传给 oepngrok.jar 的。OpenGrok 脚本默认有添加一系列参数。</p>
<p>那就简单了，直接在 /path/to/OpenGrok/bin/OpenGrok 脚本里搜索，将 <code>-S</code> 和 <code>-H</code> 去掉。很简单，就不贴出来了。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OpenGrok 环境搭建踩坑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="OpenGrok" scheme="https://jaycechant.info/tags/OpenGrok/"/>
    
      <category term="ctags" scheme="https://jaycechant.info/tags/ctags/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins + 蒲公英 自动发布两个小技巧</title>
    <link href="https://jaycechant.info/2017/two-tips-for-jenkins-pgyer/"/>
    <id>https://jaycechant.info/2017/two-tips-for-jenkins-pgyer/</id>
    <published>2017-02-23T06:05:53.000Z</published>
    <updated>2017-09-24T09:32:31.724Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins 自动编译打包应用，配合蒲公英上传发布，可以做到扫码安装，简化测试步骤。这不是什么新鲜事物，以下两篇文章基本讲得很全：</p>
<ul>
<li><a href="http://www.jianshu.com/p/441e75f527f2" target="_blank" rel="external">jenkins配合蒲公英实现APK的自动发布</a></li>
<li><a href="http://blog.csdn.net/u011904605/article/details/54619549" target="_blank" rel="external">使用Jenkins生成 二维码</a></li>
</ul>
<p>我只说两个没有提到的小技巧。</p>
<a id="more"></a>
<h1 id="获取上传文件路径"><a href="#获取上传文件路径" class="headerlink" title="获取上传文件路径"></a>获取上传文件路径</h1><p>网上文章要么是直接用插件上传，要么学官方示例直接 curl。文件名要么直接跳过，要么需要 生成物名字 固定不变。</p>
<p>可我这里就不固定，为区分不同编译输出，会带有版本号日期等信息在文件名里。</p>
<p>我的做法是让 <code>find</code> 来处理，上代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FILENAME=`find ./app/build/outputs/apk/ -type f -name <span class="string">"*.apk"</span>`</div><div class="line">curl -F <span class="string">"file=@<span class="variable">$&#123;FILENAME&#125;</span>"</span> -F <span class="string">"uKey=yourUserKey"</span> -F <span class="string">"_api_key=yourApiKey"</span> http://www.pgyer.com/apiv1/app/upload</div></pre></td></tr></table></figure>
<p>脚本有效的前提是，对应目录下只能有一个apk，否则 FILENAME 里面就不止一个文件名了。要是不止一个 apk ，就要修改 <code>-name</code> 参数，让正则式只匹配想要的文件。</p>
<h1 id="获取二维码"><a href="#获取二维码" class="headerlink" title="获取二维码"></a>获取二维码</h1><p>基本原理是利用 <a href="http://wiki.jenkins-ci.org/display/JENKINS/Description+Setter+Plugin" target="_blank" rel="external">Jenkins description setter</a> ，并且在 <code>管理 &gt; Global Security &gt; Markup Formatter</code>  里打开 HTML。选 Safe HTML 也行，选 PegDown 然后不要 Suppress HTML 也行。我习惯Markdown，选了后者。</p>
<p>虽然启用 Markdown，但二维码还是要用 <code>&lt;img&gt;</code> 而不是 <code>![]()</code> ：因为 Markdown 在 Job 页面不解析，非得进入具体 build 页面才能看到，多点一下，不够方便。</p>
<p>上传应用后，在蒲公英管理页能看到二维码。可看地址，发现是与 应用 相关的 <strong>固定地址</strong>，相当于指向 latest-build 的链接。用这个链接，所有 build 都是相同二维码，都指向最新 build。</p>
<p>这当然不是想要的效果。前面列出的第二篇文章解决办法是，每次都把最新的二维码下载下来保存在本地，显示本地图片。</p>
<p>其实不用那么麻烦，让我们看看log输出：（星号是消去敏感信息）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"code"</span>:0,<span class="string">"message"</span>:<span class="string">""</span>,<span class="string">"data"</span>:&#123;<span class="string">"appKey"</span>:<span class="string">"*****"</span>,<span class="string">"userKey"</span>:<span class="string">"*****"</span>,<span class="string">"appType"</span>:<span class="string">"2"</span>,<span class="string">"appIsLastest"</span>:<span class="string">"1"</span>,<span class="string">"appFileSize"</span>:<span class="string">"*****"</span>,<span class="string">"appName"</span>:<span class="string">"*****"</span>,<span class="string">"appVersion"</span>:<span class="string">"1.1.3"</span>,<span class="string">"appVersionNo"</span>:<span class="string">"113"</span>,<span class="string">"appBuildVersion"</span>:<span class="string">"13"</span>,<span class="string">"appIdentifier"</span>:<span class="string">"**.**.**"</span>,<span class="string">"appIcon"</span>:<span class="string">"*****"</span>,<span class="string">"appDescription"</span>:<span class="string">"*****"</span>,<span class="string">"appUpdateDescription"</span>:<span class="string">""</span>,<span class="string">"appScreenshots"</span>:<span class="string">""</span>,<span class="string">"appShortcutUrl"</span>:<span class="string">"****"</span>,<span class="string">"appCreated"</span>:<span class="string">"2017-02-23 13:52:58"</span>,<span class="string">"appUpdated"</span>:<span class="string">"2017-02-23 13:52:58"</span>,<span class="string">"appQRCodeURL"</span>:<span class="string">"http:\/\/static.pgyer.com\/app\/qrcodeHistory\/*****(长度64的16进制hash，相当于256bit)"</span>&#125;&#125;</div></pre></td></tr></table></figure>
<p>这是 curl post 之后的输出，其实就是 服务器的 response。</p>
<p>appShortcutUrl 就是上面提到固定不变的短链接，假定这个值是 abcd，那么对应的链接就是 <code>static.pgyer.com/app/qrcode/abcd</code>。</p>
<p>不过，仔细留意的话，二维码的真实链接也已经在里面，就是：<code>&quot;appQRCodeURL&quot;:&quot;http:\/\/static.pgyer.com\/app\/qrcodeHistory\/*****(长度64的hash)&quot;</code> 。</p>
<p>怎么用呢？要知道 Jenkins description setter 本来就支持 正则式！</p>
<blockquote>
<p>If configured, the regular expression will be applied to each line in the build log. A description will be set based on the first match.</p>
</blockquote>
<p>换言之，它可以用正则式在 log 输出中找匹配，并且将匹配到的 match 用于description。</p>
<p>直接上配置：</p>
<p>Regular expression : <code>.*qrcodeHistory\\/(\S{64})</code></p>
<p>Description : <code>&lt;img src=&quot;http://static.pgyer.com/app/qrcodeHistory/\1&quot;&gt;</code></p>
<p>其中 <code>\1</code> 表示引用第一个匹配。（注意，匹配从0开始算，不过 <code>\0</code> 是整个匹配行）</p>
<p>搞定，提交代码之后，点一下build，然后扫码就可以测试了！！</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins 自动编译打包应用，配合蒲公英上传发布，可以做到扫码安装，简化测试步骤。这不是什么新鲜事物，以下两篇文章基本讲得很全：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/441e75f527f2&quot;&gt;jenkins配合蒲公英实现APK的自动发布&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/u011904605/article/details/54619549&quot;&gt;使用Jenkins生成 二维码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我只说两个没有提到的小技巧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="https://jaycechant.info/tags/Jenkins/"/>
    
      <category term="pgyer" scheme="https://jaycechant.info/tags/pgyer/"/>
    
  </entry>
  
  <entry>
    <title>json-lib-2.4-jdk15 的疑似 bug</title>
    <link href="https://jaycechant.info/2017/suspected-bug-in-json-lib-2-4-jdk15/"/>
    <id>https://jaycechant.info/2017/suspected-bug-in-json-lib-2-4-jdk15/</id>
    <published>2017-02-21T09:12:31.000Z</published>
    <updated>2017-09-24T10:00:50.146Z</updated>
    
    <content type="html"><![CDATA[<p>使用 json-lib 时发现了比较诡异的现象，分析半天没有找到原因。最后因时间关系，直接替换成 org.json 解决了。疑似json-lib 有 bug，Mark 一个，以后再看。</p>
<a id="more"></a>
<p>最近尝试封装某网络 API ，提供接口给上层调用。该 API 使用 json 发送数据。一开始图方便，本想直接用 String 拼接了事，后来实际一写，发现 json 结构有三层，比较复杂，而且有动态增删改字段的需求，改为老老实实构建 JSONObject ，发送前转成 String 。</p>
<p>不像 JavaScript 和 Python 那样有官方的 json 实现，Java 的 json 实现山头林立。我粗略数了一下 json.org 官网上都有25个之多！我也不要什么复杂的功能，只要</p>
<ol>
<li>根据需要建立标准 json 对象结构</li>
<li>方便在 对象 和 字符串 之间互相转换</li>
</ol>
<p>够了。</p>
<p>大概扫一眼，<code>net.sf.json-lib</code> 和 <code>org.json</code> 都够用，刚好这两个包接口极为接近。项目别的地方已经引用了 json-lib，干脆就它。</p>
<p><em>注：代码是对某网络 API的封装，它的API都是公开信息。敏感信息我已经消去。</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setPredefinedKeyValue</span><span class="params">(String key, Object value)</span></span></div><div class="line">        <span class="keyword">throws</span> Exception &#123;</div><div class="line">    System.out.println(<span class="string">"key:"</span> + key + <span class="string">", value:"</span> + value);</div><div class="line">    <span class="keyword">if</span> (ROOT_KEYS.contains(key)) &#123;</div><div class="line">        rootJson.put(key, value);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (PAYLOAD_KEYS.contains(key)) &#123;</div><div class="line">        JSONObject payloadJson = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (rootJson.has(<span class="string">"payload"</span>)) &#123;</div><div class="line">            payloadJson = rootJson.getJSONObject(<span class="string">"payload"</span>);</div><div class="line">            System.out.println(<span class="string">"payload exists: "</span> + payloadJson.toString());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            payloadJson = <span class="keyword">new</span> JSONObject();</div><div class="line">            rootJson.put(<span class="string">"payload"</span>, payloadJson);</div><div class="line">            System.out.println(<span class="string">"new payload."</span>);</div><div class="line">        &#125;</div><div class="line">        payloadJson.put(key, value);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (BODY_KEYS.contains(key)) &#123;</div><div class="line">        System.out.println(<span class="string">"Enter body =========="</span>);</div><div class="line">        JSONObject bodyJson = <span class="keyword">null</span>;</div><div class="line">        JSONObject payloadJson = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (rootJson.has(<span class="string">"payload"</span>)) &#123;</div><div class="line">            payloadJson = rootJson.getJSONObject(<span class="string">"payload"</span>);</div><div class="line">            System.out.println(<span class="string">"payload exists: "</span> + payloadJson.toString());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            payloadJson = <span class="keyword">new</span> JSONObject();</div><div class="line">            rootJson.put(<span class="string">"payload"</span>, payloadJson);</div><div class="line">            System.out.println(<span class="string">"new payload and add. root: "</span> + rootJson.toString());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"payload before has(body) : "</span> + payloadJson.toString());</div><div class="line">        <span class="keyword">if</span> (payloadJson.has(<span class="string">"body"</span>)) &#123;</div><div class="line">            bodyJson = payloadJson.getJSONObject(<span class="string">"body"</span>);</div><div class="line">            System.out.println(<span class="string">"body exists: "</span> + bodyJson.toString());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            bodyJson = <span class="keyword">new</span> JSONObject();</div><div class="line">            payloadJson.put(<span class="string">"body"</span>, bodyJson);</div><div class="line">            System.out.println(<span class="string">"new body and add. payload: "</span> + payloadJson.toString());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"body before put: "</span> + bodyJson.toString());</div><div class="line">        bodyJson.put(key, value);</div><div class="line">        System.out.println(<span class="string">"body after put: "</span> + bodyJson.toString());</div><div class="line">        System.out.println(<span class="string">"Exit body =========="</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (POLICY_KEYS.contains(key)) &#123;</div><div class="line">        <span class="comment">// ......</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// ......</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下是 <code>json-lib</code> 的log</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">key:appkey, value:********************************</div><div class="line">key:<span class="built_in">type</span>, value:customizedcast</div><div class="line">key:<span class="built_in">alias</span>, value:***********</div><div class="line">key:alias_type, value:phone</div><div class="line">key:ticker, value:测试</div><div class="line">Enter body ==========</div><div class="line">new payload and add. root: &#123;<span class="string">"alias_type"</span>:<span class="string">"phone"</span>,<span class="string">"payload"</span>:&#123;&#125;,<span class="string">"alias"</span>:<span class="string">"***********"</span>,<span class="string">"appkey"</span>:<span class="string">"********************************"</span>,<span class="string">"type"</span>:<span class="string">"customizedcast"</span>&#125;</div><div class="line">payload before has(body) : &#123;&#125;</div><div class="line">new body and add. payload: &#123;<span class="string">"body"</span>:&#123;&#125;&#125;</div><div class="line">body before put: &#123;&#125;</div><div class="line">body after put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:title, value:测试标题</div><div class="line">Enter body ==========</div><div class="line">payload exists: &#123;&#125;</div><div class="line">payload before has(body) : &#123;&#125;</div><div class="line">new body and add. payload: &#123;<span class="string">"body"</span>:&#123;&#125;&#125;</div><div class="line">body before put: &#123;&#125;</div><div class="line">body after put: &#123;<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:text, value:测试内容</div><div class="line">Enter body ==========</div><div class="line">payload exists: &#123;&#125;</div><div class="line">payload before has(body) : &#123;&#125;</div><div class="line">new body and add. payload: &#123;<span class="string">"body"</span>:&#123;&#125;&#125;</div><div class="line">body before put: &#123;&#125;</div><div class="line">body after put: &#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:after_open, value:go_app</div><div class="line">Enter body ==========</div><div class="line">payload exists: &#123;<span class="string">"body"</span>:&#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>&#125;&#125;</div><div class="line">payload before has(body) : &#123;<span class="string">"body"</span>:&#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>&#125;&#125;</div><div class="line">body exists: &#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>&#125;</div><div class="line">body before put: &#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>&#125;</div><div class="line">body after put: &#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"after_open"</span>:<span class="string">"go_app"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:display_type, value:notification</div><div class="line">payload exists: &#123;<span class="string">"body"</span>:&#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"after_open"</span>:<span class="string">"go_app"</span>&#125;&#125;</div><div class="line">key:production_mode, value:<span class="literal">true</span></div><div class="line">key:timestamp, value:**********</div><div class="line">body: &#123;<span class="string">"appkey"</span>:<span class="string">"********************************"</span>,<span class="string">"type"</span>:<span class="string">"customizedcast"</span>,<span class="string">"alias"</span>:<span class="string">"***********"</span>,<span class="string">"alias_type"</span>:<span class="string">"phone"</span>,<span class="string">"payload"</span>:&#123;<span class="string">"display_type"</span>:<span class="string">"notification"</span>,<span class="string">"body"</span>:&#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"after_open"</span>:<span class="string">"go_app"</span>&#125;&#125;,<span class="string">"production_mode"</span>:<span class="string">"true"</span>,<span class="string">"timestamp"</span>:<span class="string">"**********"</span>&#125;</div></pre></td></tr></table></figure>
<p>问题在第 15 行开始出现，明明前面刚添加完 body ，马上就不见了；然而最后添加 after_open 时，包含 text 的 body 却保留下来了！ 而且每次运行结果都一样，并不随机。</p>
<p>改为 <code>org.json</code> 后的 log （因两个包接口基本兼容，只是修改 import 的包，还有把初始化 <code>JSONObject.fromObject(str)</code> 改为 <code>new JSONObject(str)</code> 而已，上面代码一点没动，就不重新贴了）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">key:appkey, value:********************************</div><div class="line">key:<span class="built_in">type</span>, value:customizedcast</div><div class="line">key:<span class="built_in">alias</span>, value:***********</div><div class="line">key:alias_type, value:phone</div><div class="line">key:ticker, value:测试</div><div class="line">Enter body ==========</div><div class="line">new payload and add. root: &#123;<span class="string">"alias_type"</span>:<span class="string">"phone"</span>,<span class="string">"payload"</span>:&#123;&#125;,<span class="string">"alias"</span>:<span class="string">"***********"</span>,<span class="string">"appkey"</span>:<span class="string">"********************************"</span>,<span class="string">"type"</span>:<span class="string">"customizedcast"</span>&#125;</div><div class="line">payload before has(body) : &#123;&#125;</div><div class="line">new body and add. payload: &#123;<span class="string">"body"</span>:&#123;&#125;&#125;</div><div class="line">body before put: &#123;&#125;</div><div class="line">body after put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:title, value:测试标题</div><div class="line">Enter body ==========</div><div class="line">payload exists: &#123;<span class="string">"body"</span>:&#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>&#125;&#125;</div><div class="line">payload before has(body) : &#123;<span class="string">"body"</span>:&#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>&#125;&#125;</div><div class="line">body exists: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>&#125;</div><div class="line">body before put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>&#125;</div><div class="line">body after put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:text, value:测试内容</div><div class="line">Enter body ==========</div><div class="line">payload exists: &#123;<span class="string">"body"</span>:&#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;&#125;</div><div class="line">payload before has(body) : &#123;<span class="string">"body"</span>:&#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;&#125;</div><div class="line">body exists: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">body before put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">body after put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:after_open, value:go_app</div><div class="line">Enter body ==========</div><div class="line">payload exists: &#123;<span class="string">"body"</span>:&#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;&#125;</div><div class="line">payload before has(body) : &#123;<span class="string">"body"</span>:&#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;&#125;</div><div class="line">body exists: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">body before put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">body after put: &#123;<span class="string">"after_open"</span>:<span class="string">"go_app"</span>,<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:display_type, value:notification</div><div class="line">payload exists: &#123;<span class="string">"body"</span>:&#123;<span class="string">"after_open"</span>:<span class="string">"go_app"</span>,<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;&#125;</div><div class="line">key:production_mode, value:<span class="literal">true</span></div><div class="line">key:timestamp, value:**********</div><div class="line">body: &#123;<span class="string">"alias_type"</span>:<span class="string">"phone"</span>,<span class="string">"payload"</span>:&#123;<span class="string">"display_type"</span>:<span class="string">"notification"</span>,<span class="string">"body"</span>:&#123;<span class="string">"after_open"</span>:<span class="string">"go_app"</span>,<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;&#125;,<span class="string">"alias"</span>:<span class="string">"***********"</span>,<span class="string">"appkey"</span>:<span class="string">"********************************"</span>,<span class="string">"type"</span>:<span class="string">"customizedcast"</span>,<span class="string">"production_mode"</span>:<span class="string">"true"</span>,<span class="string">"timestamp"</span>:<span class="string">"**********"</span>&#125;</div></pre></td></tr></table></figure>
<p>一个可以明显发现的细节是，json-lib 保持了添加顺序，而 org.json 没有。我看过 json-lib 源码是用 ListOrderedMap（看的最新代码，没找我引用的版本，不过估计差别不会太大）。</p>
<p>然而这并没有什么用，内容都丢了，保持顺序有毛线用。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 json-lib 时发现了比较诡异的现象，分析半天没有找到原因。最后因时间关系，直接替换成 org.json 解决了。疑似json-lib 有 bug，Mark 一个，以后再看。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://jaycechant.info/tags/Java/"/>
    
      <category term="json" scheme="https://jaycechant.info/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>我的自用 软件 和 服务 清单</title>
    <link href="https://jaycechant.info/2017/my-software-and-service-list/"/>
    <id>https://jaycechant.info/2017/my-software-and-service-list/</id>
    <published>2017-01-23T07:30:50.000Z</published>
    <updated>2018-03-29T14:40:01.914Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个 <strong>持续更新</strong> 的清单，记录我在 各个平台（目前主要是 Windows 、 Linux  和 Android） 的首选 软件 / App / 服务。供我换机或重装系统时 <strong>回顾</strong>，也供大家参考；也欢迎大家在留言推荐更好的选择。</p>
<a id="more"></a>
<h2 id="选择标准"><a href="#选择标准" class="headerlink" title="选择标准"></a>选择标准</h2><ul>
<li><p>好用：超级主观的标准。我会谈谈到底哪里好，但不一定适合其他人。</p>
</li>
<li><p>开源：省钱是一方面，但只是一部分原因。  </p>
<p>更重要的，第一是 <strong>『林纳斯定律』</strong> ：一个社区活跃的开源软件，会有更少的 bug，快速的演化，以及几乎不可能有后门。（当然也并不绝对，参见『Ken Thompson 大神的 C 语言编译器后门』，最好工具引用的技术也都是开源的）  </p>
<p>第二是开源决定了，即使原作者 / 版权方 放弃更新，或者转向闭源，足够活跃的社区依然可以维持开源分支的开发（例如 Hudson &gt; Jenkins， MySQL &gt; MariaDB），开源的软件能使用更长时间，不会因为商业上的原因突然中断。一个开源工具沉寂之时，往往是被另一个更优秀的工具代替了。  </p>
<p>在此基础上，拒绝所有破解版工具。如果一个工具实在没有开源 / 免费 的替代品，那就购买。使用破解软件，一方面存在安全风险，另一方面有违软件开发者的立场。  </p>
<p>基于类似原因，推荐大家都到官网下载，谨慎使用所谓的绿化软件。确实有『绿化』需求可以考虑自己用UniversalExtractor 制作。</p>
</li>
<li><p>跨平台一致性：需要在不同的平台上使用软件，已经是一个不可回避的现实。如果两个软件各方面都差不多，我会优先选择跨平台，并 <strong>使用体验一致</strong> 的。这样会降低 学习 和 来回切换 的成本。</p>
</li>
</ul>
<p>这个清单一开始是 <code>平台 &gt; 需求 &gt; 软件</code> 的结构。后来发现，由于某些优秀跨平台软件的存在，在不同平台下都是同一个选项，会有很多重复内容。后改为 <code>需求 &gt; 软件（备注适用平台）</code> 的结构。</p>
<p>曾用过的软件如果比较优秀也会列出，当前已经不用或者很少用的，会加上<del>删除线</del>。只有标题的，先占位，慢慢补充。</p>
<p>注意这是一个清单，只列出简介，不涉及用法，另有一篇 <a href="../special-for-tools/">小工具专题</a> 分享小工具的使用。</p>
<hr>
<h2 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h2><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p>我主要使用 Markdown 作为文档原稿，Markdown 编辑器单独列出。（参见 <a href="../why-you-should-document-with-Markdown/">《为什么你应该用 Markdown 写文档？》</a> ， Markdown 足以应对绝大多数场景。其他标记语言偶尔使用，但要么不如 Markdown 轻巧，要么不如 Markdown 工具支持丰富。日后如果 Markdown 方言陷入兼容性问题，考虑往 AsciiDoc 迁移。）</p>
<p>目前主力 Typora ，Smark 备用。</p>
<ul>
<li><p><a href="http://www.typora.io/" target="_blank" rel="external">Typora</a> (Windows / Linux / Mac) ： 简洁强大的 Markdown 编辑器，当前首选。</p>
<ul>
<li>优点 ： 功能强大，该有都有，导出选项丰富（后端是 pandoc）。界面简洁美观，支持多种写作模式，尽量减少打扰，让你专注在写字这件事上。用它写东西是一种享受。需要自己体验。</li>
<li>缺点 ： 虽还在 beta 阶段，已经很好用，稳定，更新也很勤快，刚支持完 Linux ，马上又推出了 Mac 的支持。非要挑缺点的话，不开源，而且稳定版之后存在收费的可能（？）。</li>
</ul>
</li>
<li><p><a href="https://github.com/elerao/Smark" target="_blank" rel="external">Smark(Github)</a> / <a href="http://www.oschina.net/p/smark-editor" target="_blank" rel="external">Smark(OSChina)</a> (Windwos / Linux / Mac) ：作者为自己写的 pandoc 前端。</p>
<ul>
<li>优点 ： 以 pandoc 为后端，也就继承 pandoc 的强大。同时以图形界面避免记忆命令行。基于 pandoc 和 Qt 都是跨平台的，它可以保持多平台体验一致。我对它非常满意，直到发现了Typora。</li>
<li>缺点 ： 不是实时刷新。问题不大，先专心写一段，想看预览点一下 F5 也不是大问题。另外就是，源码跨平台，但作者只编译打包了 Win32 的包（他自己用）。Win64 需要自己替换64位的 pandoc ，其他平台需要自己配置 Python + PyQt 环境编译。目前在 Ubuntu 上编过一个，其他平台还没试过。</li>
</ul>
</li>
<li><p><a href="http://pandoc.org/" target="_blank" rel="external">pandoc</a> (跨平台)：pandoc 号称 标记语言的瑞士军刀，可以在多种标记语言和文档格式之间自由切换，Markdown 只是它支持的其中一种语言。不过是命令行工具，一般用户使用会有不便。上面两个优秀的编辑器都有使用 pandoc 作为后端。</p>
</li>
<li><s><a href="http://markdownpad.com/" target="_blank" rel="external">MarkdownPad</a> </s>(Windows, 需要.NET)：早期 Windows 上的选择。<ul>
<li>优点：简单易用，实时刷新，复制可以选择复制 Markdown 还是 HTM L，而且 HTML 会自动带上 CSS 。在不支持 Markdown 的 web 编辑器上面写东西，直接复制 HTML 连 CSS 很省心。</li>
<li>缺点：在早期的优点成为标配后，毫无亮点。功能很少，导出选项很少。就这样，很多功能还动不动要收费版才提供。后备，基本不用了。</li>
</ul>
</li>
</ul>
<h3 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h3><p>大文件加载快，支持多编码多格式（例如自动识别 Windows 和 Linux 的换行），能写字，也能在写段小脚本懒得开IDE时编辑代码，要么小巧要么强大。</p>
<p>目前 Linux 环境用 Vim，Windows 环境主用 Notepad++，但默认打开方式设为 Notepad2（因为更轻巧）。后面想试用一下Atom，再回来更新。</p>
<p>更多编辑器比较，可以参考 <a href="https://zh.wikipedia.org/wiki/文件编辑器比较" target="_blank" rel="external">维基百科:文件编辑器比较</a></p>
<ul>
<li><a href="http://www.vim.org/" target="_blank" rel="external">Vim</a> (跨平台)：老牌、强大、经典，只要你愿意，通过增加插件和配置，好像没有做不到的事情，Linux 下的首选编辑器，我用它纯粹习惯，无意与 Emacs 党争论。</li>
</ul>
<ul>
<li><p><a href="https://notepad-plus-plus.org/" target="_blank" rel="external">Notepad++</a> (Windows) ：Windows 下支持各种语法高亮、宏和插件的编辑器多面手。默认就很强大，也可以轻易通过配置和插件变得更适合自己。多行编辑是比较少见的特色。</p>
</li>
<li><p><a href="http://www.flos-freeware.ch/notepad2.html" target="_blank" rel="external">Notepad2</a> (Windows) ： 百K单文件的轻量级软件，系统 Notepad 的最佳替代品。</p>
</li>
<li><p><s><a href="http://www.scintilla.org/SciTE.html" target="_blank" rel="external">SciTE</a></s>(<a href="http://www.scintilla.org/" target="_blank" rel="external">Scintilla</a> , 跨平台) ： SciTE 是 <strong>SCIntilla based Text Editor</strong> 的缩写，一开始只是作者作为Scintilla 使用范例写的。  </p>
<p>Scintilla 是用 C++ 写的开源编辑器组件，因为太过优秀，一经出现就很少有人会重头写编辑器了，都是基于Scintilla 加一个外壳。这里有一个很长的 <a href="http://www.scintilla.org/ScintillaRelated.html" target="_blank" rel="external">列表</a> 列出基于 Scintilla 的编辑器，里面就包括了 Notepad++ 和 Notepad2。作为 Scintilla 嫡亲的 SciTE 当然也很优秀，单文件就已经非常强大，也有极强的可配置性，还能通过 Lua 脚本扩展功能。</p>
<p>引用 <a href="http://www.appinn.com/scite/" target="_blank" rel="external">小众软件</a> 的话： 『较其它同重量级软件，最耀眼的就是导出功能，可以导出 PDF/HTML/RTF/XML/LaTex 类型的文件，直接就能将语法高亮的内容导出』。对于中文用户有个比较致命的缺点，就是中文支持不稳定。放在这里致敬，但并不是十分推荐。</p>
</li>
<li><p><s><a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a></s>(跨平台) ： 个人感觉各方面都很像 Notepad++，不过颜值更高一些。本身是专有软件，但是上面很多扩展包都是开源的，因为社区的活跃而变得强大。严格来说，使用Sublime Text 需要购买授权，只是比较良心提供不限期试用，导致很多人一直不注册。授权方式比较灵活，可以按人数，也可以按机器，官方甚至贴心地推荐按便宜的方式买；个人授权可以用于工作环境，但反过来不行。如果你觉得它好用，最好付费使用，不然就选择开源免费的工具。</p>
</li>
</ul>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><h3 id="IDE-Integrated-Development-Environment-集成开发环境"><a href="#IDE-Integrated-Development-Environment-集成开发环境" class="headerlink" title="IDE (Integrated Development Environment 集成开发环境)"></a>IDE (Integrated Development Environment 集成开发环境)</h3><p><em>像 Android 选 AS 这种官方钦定的就不列了</em></p>
<h4 id="跨语言"><a href="#跨语言" class="headerlink" title="跨语言"></a>跨语言</h4><ul>
<li>Eclipse</li>
<li>Visual Studio Code</li>
</ul>
<h4 id="C-C"><a href="#C-C" class="headerlink" title="C / C++"></a>C / C++</h4><ul>
<li>Code::Block</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><ul>
<li>PyCharm Community edition</li>
</ul>
<h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><ul>
<li>Jenkins (Windows / Linux / Mac) ：</li>
</ul>
<h2 id="源码浏览及交叉索引"><a href="#源码浏览及交叉索引" class="headerlink" title="源码浏览及交叉索引"></a>源码浏览及交叉索引</h2><h3 id="Vim-ctags"><a href="#Vim-ctags" class="headerlink" title="Vim + ctags"></a>Vim + ctags</h3><h3 id="Source-Insight"><a href="#Source-Insight" class="headerlink" title="Source Insight"></a>Source Insight</h3><h3 id="Source-Navigator"><a href="#Source-Navigator" class="headerlink" title="Source Navigator"></a>Source Navigator</h3><h3 id="Open-Grok"><a href="#Open-Grok" class="headerlink" title="Open Grok"></a>Open Grok</h3><h3 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h3><h2 id="UML-建模"><a href="#UML-建模" class="headerlink" title="UML 建模"></a>UML 建模</h2><h3 id="starUML"><a href="#starUML" class="headerlink" title="starUML"></a>starUML</h3><h3 id="Visual-Paradigm-Community-Edition"><a href="#Visual-Paradigm-Community-Edition" class="headerlink" title="Visual Paradigm Community Edition"></a>Visual Paradigm Community Edition</h3><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>暂时不足以自成一格分类的，或者先列出来等待整理的，都暂时放这里。</p>
<ul>
<li>curl</li>
<li>Postman</li>
<li>Markdown + gitbook (based on node.js) + gitbook.com</li>
<li>rst + <a href="https://pypi.python.org/pypi/Sphinx" target="_blank" rel="external">Sphinx</a> (based on Python)+ readthedocs.org</li>
<li>AsciiDoc + <a href="http://asciidoctor.org/" target="_blank" rel="external">Asciidoctor</a> (based on Ruby)</li>
<li>hexo + github</li>
</ul>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个 &lt;strong&gt;持续更新&lt;/strong&gt; 的清单，记录我在 各个平台（目前主要是 Windows 、 Linux  和 Android） 的首选 软件 / App / 服务。供我换机或重装系统时 &lt;strong&gt;回顾&lt;/strong&gt;，也供大家参考；也欢迎大家在留言推荐更好的选择。&lt;/p&gt;
    
    </summary>
    
    
      <category term="a list" scheme="https://jaycechant.info/tags/a-list/"/>
    
      <category term="keep-updating" scheme="https://jaycechant.info/tags/keep-updating/"/>
    
      <category term="software" scheme="https://jaycechant.info/tags/software/"/>
    
      <category term="service" scheme="https://jaycechant.info/tags/service/"/>
    
      <category term="app" scheme="https://jaycechant.info/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>git: 在两个 repo 之间 merge</title>
    <link href="https://jaycechant.info/2017/git-merge-between-different-repo/"/>
    <id>https://jaycechant.info/2017/git-merge-between-different-repo/</id>
    <published>2017-01-21T03:28:29.000Z</published>
    <updated>2017-10-12T14:20:54.010Z</updated>
    
    <content type="html"><![CDATA[<p>事情是这样，有一个叫 scripts 的 git 库，里面放了一些所属不明的脚本。我希望把这些零散脚本管理起来，它们不属于任何一个项目，为每个脚本都建一个库又太小题大做，于是有了一个『脚本孤儿院』。</p>
<p>与此同时，另外有个项目在进行，到一定程度时，它需要引用前面脚本里的一个。我突然明白，那个脚本就是这个项目的一部分，它『找到组织』，该『认祖归宗』了！</p>
<a id="more"></a>
<h1 id="剪切，粘贴？"><a href="#剪切，粘贴？" class="headerlink" title="剪切，粘贴？"></a>剪切，粘贴？</h1><p>最简单的方法当然是，从原库 <strong>剪切</strong> 相关文件， <strong>粘贴</strong> 到新库，然后两边分别提交变更。</p>
<p>确实，文件管理权移交这件事完成了。但结果是，新库历史里这些文件是凭空出现的，之前的提交历史都丢失了。你当然可以在新库提交时，在message里提一下，这些文件原本是在哪个库，详细历史请参考该库历史。可如果有一天旧库不再维护呢？你无法保证两个库生命周期一致。</p>
<h1 id="merge"><a href="#merge" class="headerlink" title="merge ?"></a>merge ?</h1><p>怎么连带提交历史一起移动呢？Merge ！Merge 就是为这个目的存在的。不过等等，merge 只能在 branch  之间进行吧，两个 repo 怎么做？（严格说，是 commit 之间，branch 也好 tag 也罢，在 git 里最后都是指向 commit 的指针）</p>
<h1 id="fetch-amp-merge"><a href="#fetch-amp-merge" class="headerlink" title="fetch &amp; merge"></a>fetch &amp; merge</h1><p>当然可以，只要把要合并来源，当做远程库，获取到目标库生成一个远程分支，再合并即可。</p>
<p>假设要做的是 <code>repo-from</code> =&gt; <code>repo-target</code> 的合并，按以下操作即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> repo-target</div><div class="line">$ git remote add other /<span class="built_in">local</span>/path/to/repo-from <span class="comment"># 不要忘了 git 支持的协议非常广泛，除了常用的http(s)和ssh，也支持文件夹作为远程库</span></div><div class="line">$ git fetch other</div><div class="line">$ git merge other/master <span class="comment"># 这里假定你要合并master，别的分支改一下就好</span></div></pre></td></tr></table></figure>
<p>完事之后再 <code>git remote rm other</code>  ， 然后 <code>git rebase</code> 稍微调整一下提交历史就好（因为这样合并，会把完整历史引进来，但实际上你可能只要部分文件和相关的提交历史）。或者 fetch 后直接选择 rebase，把需要的 commit 挑选出来，不再赘述。</p>
<h1 id="fast-export-amp-fast-import"><a href="#fast-export-amp-fast-import" class="headerlink" title="fast-export &amp; fast-import"></a>fast-export &amp; fast-import</h1><p>上述方法基本可以解决问题，非要挑剔的话：</p>
<ol>
<li>要先 添加 远程库 再删掉</li>
<li>引入的历史可能太多</li>
</ol>
<p>其实 git  自带了相关工具：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> repo-from</div><div class="line">$ git fast-export master~5..master | sed <span class="string">"s|refs/heads/master|refs/heads/other|"</span> | (<span class="built_in">cd</span> /path/to/repo-target &amp;&amp; git fast-import)</div><div class="line">$ <span class="built_in">cd</span> repo-target</div><div class="line">$ git merge other</div></pre></td></tr></table></figure>
<p>通过 <code>fast-export</code> + pipe + <code>fast-import</code> 从一个库导入到另一个库。注意的地方有几个：</p>
<ol>
<li>因为两边都是本地分支，所以为了避免重名，中间可以用 sed 改名</li>
<li>fast-export 可以指定导入的范围，譬如上面就是获取 master 最后5个commit。不过注意的是，这个只是限制了commit 历史，文件还是会整个分支（也就是最新那个 commit 的所有祖先 commit）都包含进来。文件的筛选就要在merge 阶段做了。</li>
</ol>
<p>介绍到这，内容并不复杂。 对于 Git 的使用，不排斥甚至推荐用 TortoiseGit 和 SourceTree 这样的 GUI 工具，为常规操作节省时间。但是了解命令可以做到更多！</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事情是这样，有一个叫 scripts 的 git 库，里面放了一些所属不明的脚本。我希望把这些零散脚本管理起来，它们不属于任何一个项目，为每个脚本都建一个库又太小题大做，于是有了一个『脚本孤儿院』。&lt;/p&gt;
&lt;p&gt;与此同时，另外有个项目在进行，到一定程度时，它需要引用前面脚本里的一个。我突然明白，那个脚本就是这个项目的一部分，它『找到组织』，该『认祖归宗』了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://jaycechant.info/tags/git/"/>
    
      <category term="skill" scheme="https://jaycechant.info/tags/skill/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins &#39;Could not initialize JFreeChart&#39; 和 tomcat setenv.sh</title>
    <link href="https://jaycechant.info/2017/Jenkins-Could-not-initialize-JFreeChart-and-tomcat-setenv/"/>
    <id>https://jaycechant.info/2017/Jenkins-Could-not-initialize-JFreeChart-and-tomcat-setenv/</id>
    <published>2017-01-20T06:44:31.000Z</published>
    <updated>2017-10-12T14:39:33.679Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins 有一系列插件，可以提供趋势图显示项目的情况，例如 Checkstyle, Dry, FindBugs, PMD, Tasks, 和 Warnings，还有把前面的内容合并显示的 <a href="http://wiki.jenkins-ci.org/x/tgeIAg" target="_blank" rel="external">Static Analysis Collector Plug-in</a>。实际上，你只要装最后一个，前面的会作为依赖全部装上。</p>
<p>作为尝试，先配置了 <strong>Maven Warnings Trend</strong>，打开一看，图是裂的……</p>
<a id="more"></a>
<h2 id="headless-mode"><a href="#headless-mode" class="headerlink" title="headless mode"></a>headless mode</h2><p>一看有几个Exception，根源应该是这个：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Could not initialize class org.jfree.chart.JFreeChart</div></pre></td></tr></table></figure>
<p>放Google，在官方issue里发现这个：<a href="https://issues.jenkins-ci.org/browse/JENKINS-21839" target="_blank" rel="external">https://issues.jenkins-ci.org/browse/JENKINS-21839</a></p>
<blockquote>
<p>It’s not a bug in Jenkins but a miss-configuration. Anyway I couldn’t find it in any knowledge base. Maybe adding this solution in JIRA is enough … but let me suggest you to try to add it somewhere in plugin’s documentation, for example on “Configuration” section found here <a href="https://wiki.jenkins-ci.org/display/JENKINS/Performance+Plugin" target="_blank" rel="external">https://wiki.jenkins-ci.org/display/JENKINS/Performance+Plugin</a></p>
<p>The solution is just adding</p>
<p>-Djava.awt.headless=true</p>
<p>I’m running Jenkins as a webapp on my Tomcat, so I just added this line to my /opt/tomcat/bin/catalina.sh :</p>
<p>CATALINA_OPTS=-Djava.awt.headless=true</p>
</blockquote>
<p>关于headless的信息：<a href="https://www.oschina.net/translate/using-headless-mode-in-java-se" target="_blank" rel="external">https://www.oschina.net/translate/using-headless-mode-in-java-se</a></p>
<p>简单说，JFreeChart 引用了awt 包，然后 awt 会尝试绑定本地 IO 设备——包括 显示器 和 Keyboard，结果失败就会引起异常。只要启用 headless mode 就可以避免。直接 java 命令启动的 Jenkins.war，在启动时加上参数即可。如果通过 tomcat 这样的容器启动，就要把参数加到容器去。</p>
<h2 id="setenv-sh"><a href="#setenv-sh" class="headerlink" title="setenv.sh"></a>setenv.sh</h2><p>一点题外话。</p>
<p>上面 issue 的讨论里，是直接往 <code>catalina.sh</code> 里加参数；当初配置 tomcat 时，也有文章说写到 <code>startup.sh</code> 和 <code>shutdown.sh</code> 里面去。</p>
<p>实际上这都是不那么好的做法，应该写在 <code>setenv.sh</code> 里。看一下就知道 <code>startup.sh</code> 和 <code>shutdown.sh</code>  最后都实际调用到 <code>catalina.sh</code> ，而它会自动加载 <code>setenv.sh</code>。</p>
<p>跟分别写在  <code>startup.sh</code> 和 <code>shutdown.sh</code>  比，写在一处当然更容易管理；那为什么不直接写在<code>catalina.sh</code> 开头，要多此一举呢？除了单独写在一个文件，更清晰以外，还有方便管理多个实例的好处。</p>
<p><code>catalina.sh</code> 会先检查 <code>$CATALINA_BASE/bin/setenv.sh</code> ，存在就加载，不存在再去检查 <code>$CATALINA_HOME/bin/setenv.sh</code> 并加载。也就是 <code>CATALINA_BASE</code> 的配置优先于 <code>CATALINA_HOME</code> 的配置。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ -r <span class="string">"<span class="variable">$CATALINA_BASE</span>/bin/setenv.sh"</span> ]; <span class="keyword">then</span></div><div class="line">  . <span class="string">"<span class="variable">$CATALINA_BASE</span>/bin/setenv.sh"</span></div><div class="line"><span class="keyword">elif</span> [ -r <span class="string">"<span class="variable">$CATALINA_HOME</span>/bin/setenv.sh"</span> ]; <span class="keyword">then</span></div><div class="line">  . <span class="string">"<span class="variable">$CATALINA_HOME</span>/bin/setenv.sh"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p><code>CATALINA_HOME</code> 就是 tomcat 的安装目录了。而 <code>CATALINA_BASE</code> 是工作目录，默认等于 <code>CATALINA_HOME</code> ：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Only set CATALINA_HOME if not already set</span></div><div class="line">[ -z <span class="string">"<span class="variable">$CATALINA_HOME</span>"</span> ] &amp;&amp; CATALINA_HOME=`<span class="built_in">cd</span> <span class="string">"<span class="variable">$PRGDIR</span>/.."</span> &gt;/dev/null; <span class="built_in">pwd</span>`</div><div class="line"></div><div class="line"><span class="comment"># Copy CATALINA_BASE from CATALINA_HOME if not already set</span></div><div class="line">[ -z <span class="string">"<span class="variable">$CATALINA_BASE</span>"</span> ] &amp;&amp; CATALINA_BASE=<span class="string">"<span class="variable">$CATALINA_HOME</span>"</span></div></pre></td></tr></table></figure>
<p>如果需要安装一个 tomcat 跑多个实例，这时<code>CATALINA_BASE</code> 就会指向各个实例自己的目录。这时分别写在工作目录下的 <code>setenv.sh</code> 就可以分别设置不同的配置。</p>
<p>就酱。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins 有一系列插件，可以提供趋势图显示项目的情况，例如 Checkstyle, Dry, FindBugs, PMD, Tasks, 和 Warnings，还有把前面的内容合并显示的 &lt;a href=&quot;http://wiki.jenkins-ci.org/x/tgeIAg&quot;&gt;Static Analysis Collector Plug-in&lt;/a&gt;。实际上，你只要装最后一个，前面的会作为依赖全部装上。&lt;/p&gt;
&lt;p&gt;作为尝试，先配置了 &lt;strong&gt;Maven Warnings Trend&lt;/strong&gt;，打开一看，图是裂的……&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://jaycechant.info/tags/Java/"/>
    
      <category term="Jenkins" scheme="https://jaycechant.info/tags/Jenkins/"/>
    
      <category term="trouble" scheme="https://jaycechant.info/tags/trouble/"/>
    
      <category term="Tomcat" scheme="https://jaycechant.info/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>小工具专题（持续更新）</title>
    <link href="https://jaycechant.info/2017/special-for-tools/"/>
    <id>https://jaycechant.info/2017/special-for-tools/</id>
    <published>2017-01-16T06:56:57.000Z</published>
    <updated>2017-10-15T09:28:51.533Z</updated>
    
    <content type="html"><![CDATA[<p>本专题收集趁手的小工具，并附使用技巧。尽量小和简单，尽量用完即走，简单到不必单独成篇，集中放这里；复杂的工具，就单独开一篇不放这里。可能比较多是命令行工具也不一定。</p>
<p>另外开一篇常用软件列表，只列举优缺点对比不展开用法，所以某些工具可能会有重叠，但内容侧重点不同。</p>
<p>只有标题的，先占坑慢慢填。</p>
<a id="more"></a>
<h1 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h1><h2 id="Web-API-工具"><a href="#Web-API-工具" class="headerlink" title="Web API 工具"></a>Web API 工具</h2><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><h3 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h3><h2 id="Click-Python-包"><a href="#Click-Python-包" class="headerlink" title="Click (Python 包)"></a>Click (Python 包)</h2><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="Terminal-mutiplexer"><a href="#Terminal-mutiplexer" class="headerlink" title="Terminal mutiplexer"></a>Terminal mutiplexer</h2><p><strong>multiplexer</strong> 电子上是指多路复用器，当前语境则指 Linux 上的终端多会话管理器。</p>
<h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><p><a href="http://www.gnu.org/software/screen/" target="_blank" rel="external">Screen</a> 是 GNU 项目中的一部分，一般 Linux 发行版本应该都有自带。其主页上的介绍是：</p>
<blockquote>
<p>” Screen is a full-screen window manager that multiplexes a physical terminal between several processes, typically interactive shells.”</p>
</blockquote>
<p>可以简单看作一个远程会话 / 窗口管理器。</p>
<p>高级技巧我总是记不住，一般只用到它的主要特性： <strong>断开 ssh 连接之后，远程端的程序继续运行，需要时再重新连上继续工作。</strong></p>
<p>更多技巧，大家自行了解：<a href="http://www.ibm.com/developerworks/cn/linux/l-cn-screen/" target="_blank" rel="external">IBM 开发者网络上的介绍</a> </p>
<p>如果需要多个窗口， <strong>Byobu</strong> 会更方便好用，定制化更高。 (Byobu 是 对 tmux / Screen 的强化，需要额外安装，我有权限的服务器一般都会装上) </p>
<p>入门使用，以下几个命令已经基本够用了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ screen</div></pre></td></tr></table></figure>
<p>直接输入 <code>screen</code> ，会启动一个执行 shell 的会话。你可以执行任意 shell 程序，就像在 ssh 窗口那样。在窗口中键入 exit 退出该窗口，如果退出会话的唯一窗口，screen 会话也会退出，否则 screen 自动切换到前一个窗口。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C<span class="_">-a</span>, d (即Ctrl键+a键，之后再按下d键)</div></pre></td></tr></table></figure>
<p>暂时断开 (detach) 当前会话，之后再重新连接 (attach) 。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ screen –ls</div></pre></td></tr></table></figure>
<p>列出当前所有会话</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ screen –r [pid | session name]</div></pre></td></tr></table></figure>
<p>重新连接会话。如果只有一个会话，参数可以留空。如果有多个会话，可以通过上一个命令查看 pid 或 session  name(需要另外命令指定)。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ screen –R [pid | session name]</div></pre></td></tr></table></figure>
<p>跟 <code>-r</code> 作用一样，但是如果当前没有可用会话，会自动新建一个。</p>
<h3 id="Tmux-amp-byobu"><a href="#Tmux-amp-byobu" class="headerlink" title="Tmux &amp; byobu"></a>Tmux &amp; byobu</h3><p><a href="http://tmux.github.io/" target="_blank" rel="external">Tmux</a> 的官方介绍写着</p>
<blockquote>
<p><em>tmux</em> is a terminal multiplexer.</p>
<p><strong>What is a terminal multiplexer?</strong> It lets you switch easily between several programs in one terminal, detach them (they keep running in the background) and reattach them to a different terminal. And do a lot more.</p>
</blockquote>
<p>用法可以看这篇介绍：<a href="http://aofengblog.blog.163.com/blog/static/6317021201310207323925/" target="_blank" rel="external">Linux终端多窗口工具tmux</a></p>
<p>看起来 Tmux 比 screen 强不是一丁半点，但要自己折腾的地方太多了，我连screen的命令还经常忘，何况这个。</p>
<hr>
<p>所以我最后选择了 <a href="http://www.byobu.co/" target="_blank" rel="external">byobu</a> (日语屏风的罗马音)。</p>
<blockquote>
<p>Byobu is a Japanese term for decorative, multi-panel screens that serve as folding room dividers. As an open source software project, Byobu is an elegant enhancement of the otherwise functional, plain, practical <a href="http://www.gnu.org/software/screen/" target="_blank" rel="external">GNU Screen</a>. Byobu includes an enhanced profile, configuration utilities, and system status notifications for the GNU screen window manager as well as the <a href="http://tmux.sourceforge.net/" target="_blank" rel="external">Tmux</a> terminal multiplexer. Byobu is developed and released as free software under the <a href="http://www.gnu.org/licenses/gpl-3.0.txt" target="_blank" rel="external">GPLv3</a>.</p>
</blockquote>
<p>介绍里第一句说，byobu 是个日语词，是一种 multi-panel 的 screens（英语里有屏风的意思，不过常见屏风一般是单块，而日式屏风往往是多折的），所以 byobu 其实不是新东西，它本质上是一个 tmux 的 frontend ，是一个 tmux 加上一堆设计好的配置和一些小工具（配置工具，系统状态显示器），好让 tmux 不那么复杂难用。</p>
<p>执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ byobu --help</div><div class="line">usage: tmux [-28lquvV] [-c shell-command] [<span class="_">-f</span> file] [-L socket-name]</div><div class="line">            [-S socket-path] [<span class="built_in">command</span> [flags]]</div></pre></td></tr></table></figure>
<p>就暴露真身了。</p>
<p>虽是这样说，byobu 除了能执行 tmux 本身的功能之外，还是给懒人提供了方便的，最简单的就是直接<code>$ byobu</code> ，然后通过F2~F9就可以执行绝大多数功能：</p>
<table>
<thead>
<tr>
<th>按键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>F2</strong></td>
<td>Create a new window</td>
</tr>
<tr>
<td><strong>F3</strong></td>
<td>Move to the previous window</td>
</tr>
<tr>
<td><strong>F4</strong></td>
<td>Move to the next window</td>
</tr>
<tr>
<td><strong>F5</strong></td>
<td>Refresh all status notifications</td>
</tr>
<tr>
<td><strong>F6</strong></td>
<td>Detach from the session and logout</td>
</tr>
<tr>
<td><strong>Shift-F6</strong></td>
<td>Detach from the session, but do not logout</td>
</tr>
<tr>
<td><strong>F7 </strong></td>
<td>Enter scrollback/search mode</td>
</tr>
<tr>
<td><strong>F8</strong></td>
<td>Rename the current window</td>
</tr>
<tr>
<td><strong>F9</strong></td>
<td>Launch the Byobu Configuration Menu</td>
</tr>
<tr>
<td><strong>F12</strong></td>
<td>GNU Screen’s Escape Key</td>
</tr>
<tr>
<td><strong>Alt-Pageup</strong></td>
<td>Scroll back through this window’s history</td>
</tr>
<tr>
<td><strong>Alt-Pagedown</strong></td>
<td>Scroll forward through this window’s history</td>
</tr>
<tr>
<td><strong>Shift-F2</strong></td>
<td>Split the screen horizontally</td>
</tr>
<tr>
<td><strong>Ctrl-F2</strong></td>
<td>Split the screen vertically</td>
</tr>
<tr>
<td><strong>Shift-F3 </strong></td>
<td>Move focus to the next split</td>
</tr>
<tr>
<td><strong>Shift-F4</strong></td>
<td>Move focus to the previous split</td>
</tr>
<tr>
<td><strong>Shift-F5</strong></td>
<td>Collapse all splits</td>
</tr>
<tr>
<td><strong>Ctrl-F5</strong></td>
<td>Reconnect any SSH/GPG sockets or agents</td>
</tr>
<tr>
<td><strong>Shift-F12 </strong></td>
<td>Toggle all of Byobu’s keybindings on or off</td>
</tr>
</tbody>
</table>
<p>这些功能中，最常用的就是F2 新建，F3 / F4 前后切换，还有 F6 detach了。如果像我习惯了screen，也可以用 <code>Ctrl + a, d</code> 来 detach。</p>
<p>最后提一下，tmux 和 byobu 在 Linux 界两大包管理器 yum 和 apt-get 的源里都有，直接安装即可。</p>
<h2 id="links"><a href="#links" class="headerlink" title="links"></a>links</h2><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本专题收集趁手的小工具，并附使用技巧。尽量小和简单，尽量用完即走，简单到不必单独成篇，集中放这里；复杂的工具，就单独开一篇不放这里。可能比较多是命令行工具也不一定。&lt;/p&gt;
&lt;p&gt;另外开一篇常用软件列表，只列举优缺点对比不展开用法，所以某些工具可能会有重叠，但内容侧重点不同。&lt;/p&gt;
&lt;p&gt;只有标题的，先占坑慢慢填。&lt;/p&gt;
    
    </summary>
    
    
      <category term="screen" scheme="https://jaycechant.info/tags/screen/"/>
    
      <category term="byobu" scheme="https://jaycechant.info/tags/byobu/"/>
    
      <category term="keep-updating" scheme="https://jaycechant.info/tags/keep-updating/"/>
    
  </entry>
  
  <entry>
    <title>Linux 上 为 Jenkins 配置 Android-sdk 及其它</title>
    <link href="https://jaycechant.info/2017/Android-sdk-on-Linux-for-Jenkins-etc/"/>
    <id>https://jaycechant.info/2017/Android-sdk-on-Linux-for-Jenkins-etc/</id>
    <published>2017-01-16T03:24:34.000Z</published>
    <updated>2017-01-25T04:21:21.999Z</updated>
    
    <content type="html"><![CDATA[<p>用 Jenkins 编译APK，在Jenkins所在的Linux (Ubuntu) 服务器配置 Android-sdk。</p>
<p>惯例踩坑，不是完整教程。</p>
<a id="more"></a>
<h1 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h1><p>配置完 Git 库直接开跑</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.io.IOException: Cannot run program <span class="string">"gradle"</span></div></pre></td></tr></table></figure>
<p>指定了本地gradle，但服务器上并没有gradle，改为使用gradle wrapper。</p>
<p>……结果跑了一个周末，gradlew还停在：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Downloading https://services.gradle.org/distributions/gradle-2.14.1-all.zip</div></pre></td></tr></table></figure>
<p>[捂脸]国内的开发者就是困难，gradle不同版本改动大，gradle wrapper多好一个解决方案，我们享受不到。</p>
<p>好吧，好好地根据目前项目的需要，安装一个在服务器，然后到 Jenkins &gt; 系统管理 &gt; Global Tool Configuration 添加一个gradle的版本。</p>
<h1 id="Android-sdk"><a href="#Android-sdk" class="headerlink" title="Android-sdk"></a>Android-sdk</h1><p>再跑，这回找不到ANDROID_HOME。当然，我没装SDK，也没配置环境变量。一个一个去想装什么多累啊，报什么错解决什么就好了。</p>
<p>心想我不需要在服务器开发，只是要管理依赖，只要sdk-tools就好了。官方源各种连不上，到<a href="https://dsx.bugly.qq.com/repository/1" target="_blank" rel="external">腾讯大师兄</a> 下载一个 tools_r25.2.3-linux.zip，在要安装的地方（这次是/opt/下某目录）建一个android-sdk/tools目录，然后解压到里面，执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> android-sdk/tools</div><div class="line">$ sudo ./android</div></pre></td></tr></table></figure>
<p>我去，默认运行居然是GUI工具，不过我也不愿意敲一堆参数，那就配置一下x11 forwarding 然后本地开一个Xming就好了。（当然也可以选择 <code>./android update sdk --no-ui --filter sdk1, sdk2, sdk3,...</code>）</p>
<p>安装好之后，定义 <code>ANDROID_HOME</code> 为 <code>android-sdk</code> 所在目录，并且把 <code>$ANDROID_HOME/tools</code> 和 <code>$ANDROID_HOME/platform-tools</code> 加入 <code>PATH</code> 。如果不确定配置的 <code>ANDROID_HOME</code> 能不能被Jenkins读到，也可以在Jenkins的全局配置里添加这个环境变量。</p>
<p>好了，接下来就是编译报缺什么就装什么了。不过每次失败只能看到遇到的第一个错误，如果自己判断不准依赖，往往要浪费好几个build。还好build号完全不值钱。</p>
<p>这里有一个被误导的点：每次遇到缺什么依赖的时候，报的错误是</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Before building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.</div></pre></td></tr></table></figure>
<p>焦点很容易被引导到License上面去，加上我们很容易以外自己都已经安装了需要的东西，然后就开始折腾License。网上的教程往往默认你依赖的包已经安装好了（或者从别的机器挪过来了），只是没有好好同意License（或License没有一起挪过来），然后告诉你sdk-manager 会对License文件做一个签名保存在 <code>licenses/</code> 目录，要么从原来的机器导出，要么怎样同意重新生成签名云云。</p>
<p>实际上无论是 没有accept license，还是根本没有安装，都会报这个错误，所以在检查License之前，首先要确认包真的安装了。<strong>实际上确实很多时候就是安装漏了东西。要仔细留意是不是名字像，或者同一个包依赖了不同的版本。</strong></p>
<p>不过这里有个我没想明白的地方，一开始我想直接从Windows本地将包和License一起拷到Linux时，发现sdk目录下根本没有 <code>licenses/</code> 目录，Linux上也没有发现，我以为是最新的版本不再这样存放License（实际上是License的sha-1签名）。因为这样，我选择了全部在Linux上用UI重新accept然后安装一次。还好配置了大师兄的镜像速度还是很快的，比拷过去再研究自己生成签名要省事。（配置镜像请看<a href="../../2016/mirrors-collection/">这里</a>）</p>
<p>然后今天我写这篇文章的时候重新进去，忽然发现 <code>licenses/</code> 目录不知道啥时候生成了…… 里面只有一个 <code>android-sdk-license</code> 文件，里面只有一行sha-1 签名，也不知道是对哪个包的，没搞懂原理，暂时能用也先不追究了。</p>
<h1 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h1><p>一路这样一个build号搞定一个依赖，直到一个包在sdk-manager怎么也找不到</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; You have not accepted the license agreements of the following SDK components:</div><div class="line">  [com.android.support.constraint:constraint-layout:1.0.0-alpha4, com.android.support.constraint:constraint-layout-solver:1.0.0-alpha4].</div><div class="line">  Before building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.</div><div class="line">  Alternatively, to learn how to transfer the license agreements from one workstation to another, go to http://d.android.com/r/studio-ui/<span class="built_in">export</span>-licenses.html</div></pre></td></tr></table></figure>
<p>网上找了半天，发现大家都是在Android Studio的SDK Manager里安装，我就在Windows上试了一下，果然只能在Android Studio里看得到……</p>
<p>好吧先不追究原因，我装一个AS还不行吗。同样是在大师兄下载AS的包，解压到对应目录，然后执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> bin</div><div class="line">$ ./studio.sh</div></pre></td></tr></table></figure>
<p>注意这个必须要有界面，不像sdk-manager还有 –no-ui 参数可选，所以 x-server是必须的，我还是x11 forwarding + Xming。</p>
<p>然后就是第一次启动的Setup Wizard。Linux的AS不带SDK，而是在Setup Wizard时从官方(dl.google.com)下载，一般是一个最新的SDK-Tools 和 一个推荐的platform。platform和一些其他的推荐是可以取消复选框的，但是SDK-Tools是强制选中的。官方网址自然很卡，而且我们前面已经安装了一堆东西，没有必要重来，所以只要把 <code>android-sdk</code> 目录指定给AS就好，<strong>它会自动检测，有了的东西不会重复安装</strong> ，所以正常应该什么都会装就过了。启动之后进入 settings，然后在SDK-Manager部分把缺的这两个包安装了，AS的使命就完成了（我又不在服务器写代码[捂脸]）。</p>
<h1 id="gradle-task"><a href="#gradle-task" class="headerlink" title="gradle task"></a>gradle task</h1><p>按理说到了这里，应该没什么错误了，再开一个build，成功了，但是却没有生成物（Artifacts）。</p>
<p>看输出日志</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">:<span class="built_in">help</span></div><div class="line"></div><div class="line">Welcome to Gradle 2.14.1.</div><div class="line"></div><div class="line">To run a build, run gradle &lt;task&gt; ...</div><div class="line"></div><div class="line">To see a list of available tasks, run gradle tasks</div><div class="line"></div><div class="line">To see a list of <span class="built_in">command</span>-line options, run gradle --help</div><div class="line"></div><div class="line">To see more detail about a task, run gradle <span class="built_in">help</span> --task &lt;task&gt;</div></pre></td></tr></table></figure>
<p>额…光顾着搞SDK了，都没有给gradle指定task。</p>
<p>增加一个参数 <code>BUILD_TYPE</code>，然后把task指定为 <code>clean assemble${BUILD_TYPE} --stacktrace --debug</code> ，收工。（task是顺序执行的，这里是两个task，先clean，然后再assemble，参数是为了输出详细的gradle编译信息，好出问题时分析。）</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 Jenkins 编译APK，在Jenkins所在的Linux (Ubuntu) 服务器配置 Android-sdk。&lt;/p&gt;
&lt;p&gt;惯例踩坑，不是完整教程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://jaycechant.info/tags/Android/"/>
    
      <category term="Jenkins" scheme="https://jaycechant.info/tags/Jenkins/"/>
    
      <category term="Android-sdk" scheme="https://jaycechant.info/tags/Android-sdk/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins JavaMail 配置：JCE 及其他</title>
    <link href="https://jaycechant.info/2017/Jenkins-javamail-config-JCE-etc/"/>
    <id>https://jaycechant.info/2017/Jenkins-javamail-config-JCE-etc/</id>
    <published>2017-01-11T07:02:31.000Z</published>
    <updated>2017-01-11T15:19:23.187Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins 上线一段时间，逐渐完善中。原想 nightly build 缓一缓开启，前两天发现trunk有编译不过的代码导致build fail，心想着要是不早点发现，代码排查也麻烦，如果新版本上线当天发现就更折腾，于是就开了nightly build。</p>
<p>既然开了nightly build，跟手动启动的build你会去关注结果不一样，自动启动的build不一定会记得，如果没有留意到build fail就没有意义了。所以顺便就配置结果邮件了。以下是踩坑记录。JCE部分建议大家留意一下，不知道的话，做security相关开发一不小心就在这上面浪费时间。</p>
<a id="more"></a>
<h1 id="JCE"><a href="#JCE" class="headerlink" title="JCE"></a>JCE</h1><p>邮箱直接用QQ邮箱的SMTP服务，理由有二：</p>
<ol>
<li>自己配置邮件服务器，折腾</li>
<li>折腾完之后，对于这种无名服务器发出来的邮件，还极高概率被扔进垃圾箱，得一个一个通知收件同事设置例外，还是折腾</li>
</ol>
<p>这本没有什么难度，在Jenkins全局配置里，多数一看就知道怎么填：</p>
<ul>
<li>SMTP服务器：smtp.qq.com</li>
<li>使用SMTP认证：√  <ul>
<li>用户名：youraccount@qq.com</li>
<li>密码：这里比较特殊，不是填登录密码，而是在QQ邮箱设置 &gt; 账户 里打开SMTP功能时，会生成一个密码，填这个</li>
</ul>
</li>
<li>使用SSL协议：√ （QQ邮箱要求打开）  </li>
<li>SMTP端口：465</li>
</ul>
<p>发送测试邮件，发现无法连上服务器。报以下错误：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure 	at com.sun.mail.smtp.SMTPTransport.openServer(SMTPTransport.java:1934)</div></pre></td></tr></table></figure>
<p>第一反应，检查Jenkins服务器的网络环境，网络连接、端口检查了一通，没发现问题，只好拿着这个Exception放Google，然后果然就找到了原因：</p>
<p><a href="http://www.cnblogs.com/interdrp/p/5766107.html" target="_blank" rel="external">http://www.cnblogs.com/interdrp/p/5766107.html</a></p>
<p>原文一笔带过，我补充解释一下：</p>
<p>JCE，Java Cryptography Extension，在早期JDK版本中，由于受美国的密码出口条例约束，Java中涉及加解密功能的API被限制出口，所以Java中安全组件被分成了两部分: 不含加密功能的JCA（Java Cryptography Architecture ）和含加密功能的JCE（Java Cryptography Extension）。在JDK1.1-1.3版本期间，JCE属于扩展包，仅供美国和加拿大的用户下载，JDK1.4+版本后，随JDK核心包一起分发。</p>
<p>然而，即使是最新版JDK自带的JCE，仍然是受限的版本，引用unlimited JCE自带的README的内容：</p>
<blockquote>
<p>Due to import control restrictions of some countries, the version of<br>the JCE policy files that are bundled in the Java Runtime Environment,<br>or JRE(TM), 8 environment allow “strong” but limited cryptography to be<br>used. This download bundle (the one including this README file)<br>provides “unlimited strength” policy files which contain no<br>restrictions on cryptographic strengths.</p>
</blockquote>
<p>受某些国家的进口控制约束，随 JDK / JRE 发布的JCE版本的加密算法是受限制的，想摆脱这个限制，就要额外下载unlimited JCE，替换掉 <code>$JRE_HOME/lib/security/</code>下的 local_policy.jar 和 US_export_policy.jar 两个文件。</p>
<p>替换之后，要重启一下tomcat让它重新加载lib。</p>
<p><strong>个人觉得这个问题特别坑！！ 一般人只会怀疑自己的环境配置，或者代码，很少会怀疑到JDK本身上面去。建议大家记住这个坑，以后跟加密有关的错误，例如SSL相关的，可以排查一下是不是JCE的问题。或者干脆现在就去，把开发环境和生产环境的JCE换掉。</strong></p>
<h1 id="管理员邮箱"><a href="#管理员邮箱" class="headerlink" title="管理员邮箱"></a>管理员邮箱</h1><p>换了JCE之后重新测试，这次报以下错误：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">com.sun.mail.smtp.SMTPSendFailedException: 501 mail from address must be same as authorization user</div><div class="line">;</div><div class="line">  nested exception is:</div><div class="line">	com.sun.mail.smtp.SMTPSenderFailedException: 501 mail from address must be same as authorization user</div></pre></td></tr></table></figure>
<p>这倒是个小问题：前面设置管理员邮箱时，我填了我自己的邮箱；但是为了区分哪些是自动发的，哪些是我个人发的邮件，SMTP邮箱填的是团队的邮箱。</p>
<p>Jenkins 会自动把管理员邮箱设为发信人，但是QQ邮箱不允许发信人和登录账号不一致，所以报错。</p>
<p>把管理员邮箱也换成同一个邮箱就好了。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins 上线一段时间，逐渐完善中。原想 nightly build 缓一缓开启，前两天发现trunk有编译不过的代码导致build fail，心想着要是不早点发现，代码排查也麻烦，如果新版本上线当天发现就更折腾，于是就开了nightly build。&lt;/p&gt;
&lt;p&gt;既然开了nightly build，跟手动启动的build你会去关注结果不一样，自动启动的build不一定会记得，如果没有留意到build fail就没有意义了。所以顺便就配置结果邮件了。以下是踩坑记录。JCE部分建议大家留意一下，不知道的话，做security相关开发一不小心就在这上面浪费时间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="https://jaycechant.info/tags/Jenkins/"/>
    
      <category term="trouble" scheme="https://jaycechant.info/tags/trouble/"/>
    
      <category term="JavaMail" scheme="https://jaycechant.info/tags/JavaMail/"/>
    
      <category term="smtp" scheme="https://jaycechant.info/tags/smtp/"/>
    
      <category term="JCE" scheme="https://jaycechant.info/tags/JCE/"/>
    
  </entry>
  
  <entry>
    <title>supervisor 踩坑</title>
    <link href="https://jaycechant.info/2017/supervisor-traps/"/>
    <id>https://jaycechant.info/2017/supervisor-traps/</id>
    <published>2017-01-09T07:02:15.000Z</published>
    <updated>2017-01-09T15:39:21.892Z</updated>
    
    <content type="html"><![CDATA[<p>在对比过几个Git web端管理器之后，在内网部署了gogs。初次运行不讲究，直接</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ su git</div><div class="line">$ ./gogs web</div></pre></td></tr></table></figure>
<p>然而这不是长久之计，一直挂着一个shell不说（虽然我用byobu可以detach），重启还得手动再起来。</p>
<p>之前在 CentOS 7 部署，因为有 systemd ，非常方便，可是 Ubuntu 只有 init ，全部换成 systemd 管理又太折腾了。<br>然后我就留意到 gogs 的 scripts 目录有 supervisor 的配置，于是就尝试用 supervisor 管理。</p>
<p>纯踩坑记录，非详细教程。</p>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>apt 源有，不解释。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install superviosr</div></pre></td></tr></table></figure>
<p>安装完之后，supervisor 自动就启动了。<code>service --status-all</code> 可以看到。</p>
<p>据说如果通过Python安装，需要自己生成配置文件之后启动：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ echo_supervisord_conf &gt; /etc/supervisord.conf</div></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>gogs 的 scripts 目录下已经有了对应的配置，复制到 <code>/etc/supervisor/conf.d/</code>，并把名字改为 <code>gogs.conf</code>即可。</p>
<h1 id="尝试启动"><a href="#尝试启动" class="headerlink" title="尝试启动"></a>尝试启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo supervisorctl start gogs</div><div class="line">gogs: ERROR (no such process)</div></pre></td></tr></table></figure>
<p>原因是，supervisor 找不到 gogs 的配置。刚不是已经添加了配置了吗？生效之前，还要（每次修改配置之后都要）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo supervisorctl reload</div><div class="line">Restarted supervisord</div></pre></td></tr></table></figure>
<p>再来一次</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo supervisorctl start gogs</div><div class="line">unix:///var/run/supervisor.sock no such file</div></pre></td></tr></table></figure>
<p>没有socket文件，我们帮它创建一个</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo touch /var/run/supervisor.sock</div><div class="line">$ sudo chmod 777 /var/run/supervisor.sock</div><div class="line">$ sudo service supervisor restart</div><div class="line">Restarting supervisor: Error: The directory named as part of the path /var/<span class="built_in">log</span>/gogs/stdout.log does not exist.</div></pre></td></tr></table></figure>
<p>这个文件夹不存在，帮它建一个：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo mkdir -p /var/<span class="built_in">log</span>/gogs/</div><div class="line">$ sudo service supervisor restart</div><div class="line">$ sudo supervisorctl start gogs</div><div class="line">gogs: ERROR (no such file)</div></pre></td></tr></table></figure>
<p>查看 <code>/etc/supervisor/conf.d/gogs.conf</code> ，原来配置模板里，gogs的目录路径是随便填的，根据当前实际的路径改过来（记得reload），就好了。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>gogs 在supervisor 的管理下跑起来了，而且下次重启也会自动启动。</p>
<p>我重新看了一次 gogs 的 scripts 目录，忽然发现，它其实是带了 init 配置的……</p>
<p>我折腾这干嘛…… 谁叫我眼瞎[捂脸]</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在对比过几个Git web端管理器之后，在内网部署了gogs。初次运行不讲究，直接&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ su git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ./gogs web&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而这不是长久之计，一直挂着一个shell不说（虽然我用byobu可以detach），重启还得手动再起来。&lt;/p&gt;
&lt;p&gt;之前在 CentOS 7 部署，因为有 systemd ，非常方便，可是 Ubuntu 只有 init ，全部换成 systemd 管理又太折腾了。&lt;br&gt;然后我就留意到 gogs 的 scripts 目录有 supervisor 的配置，于是就尝试用 supervisor 管理。&lt;/p&gt;
&lt;p&gt;纯踩坑记录，非详细教程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="trouble" scheme="https://jaycechant.info/tags/trouble/"/>
    
      <category term="Linux" scheme="https://jaycechant.info/tags/Linux/"/>
    
      <category term="supervisor" scheme="https://jaycechant.info/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>为什么你应该用 Markdown 写文档？</title>
    <link href="https://jaycechant.info/2017/why-you-should-document-with-Markdown/"/>
    <id>https://jaycechant.info/2017/why-you-should-document-with-Markdown/</id>
    <published>2017-01-04T04:13:27.000Z</published>
    <updated>2017-11-06T15:53:40.516Z</updated>
    
    <content type="html"><![CDATA[<p>不记得第几次安利 Markdown 了。</p>
<p>曾发过一篇<a href="../../2012/blog-with-markdown/">《用Markdown写日志》</a>。</p>
<p>还是决定重写一篇：</p>
<ol>
<li>那篇重点在 HowTo ，理由一塌糊涂；这次不讨论语法，只谈为什么。</li>
<li>那篇重点讨论写日志（博客）；这次想讨论 Markdown 串起各种文档的可能性。</li>
<li>四年过去，环境和工具有了变化，像 Typora 、nodePPT 和 Marp 的出现，让 Markdown 有了更多可能，更加易用。 <strong>Typora 让写字有了仪式感和幸福感。</strong> </li>
</ol>
<a id="more"></a>
<h2 id="壹、-为什么写文档"><a href="#壹、-为什么写文档" class="headerlink" title="壹、 为什么写文档"></a>壹、 为什么写文档</h2><h3 id="1-1-从问题开始"><a href="#1-1-从问题开始" class="headerlink" title="1.1 从问题开始"></a>1.1 从问题开始</h3><p><strong>成熟企业</strong> 跟 <strong>初创企业</strong> ，关键差距是什么？</p>
<ul>
<li>设施设备？</li>
<li>钱？</li>
<li>人？</li>
<li>…</li>
</ul>
<hr>
<p>一个领域 <strong>专家</strong> 跟 <strong>新手</strong> 的差距呢？</p>
<ul>
<li>知识储备？</li>
</ul>
<ul>
<li>经验？</li>
<li>人脉？</li>
<li>…</li>
</ul>
<hr>
<p><strong>钱不是</strong> 。</p>
<p>虽然经验告诉我们一般老江湖家底厚，但并非必然。初创企业通过融资可以获得资金，或者保不准创始人是思聪们；成熟企业也有面临资金压力时。</p>
<p>基于类似原因， <strong>人脉不是</strong> ，可以从 <strong>公开途径获取的知识</strong> 也不是。剩下的有些像是，又好像不是…</p>
<p><br></p>
<p>其实，老手 和 新丁 必然的差距，就是 <strong>老手经历多了</strong> ， 积累下来 <strong>那些东西</strong> 。毕竟 新丁 之 <strong>新</strong> ，就是 <strong>圈内（行业 / 领域）待的时间短</strong> ，即使是富二代，有资源摆平其余各种要素，也无法凭空变出没有的经历。</p>
<p>可如何去量化描述 『那些东西』？是经验吗？</p>
<p><br></p>
<p>让我们换一组词：他们之间的差距，在于 <strong>『知识资产』</strong> ，特别是 <strong>『过程资产』</strong> 。</p>
<blockquote>
<p>知识资产（Knowledge assets）</p>
<p>是指企业拥有或控制的、不具有独立实物形态、对生产和服务长期发挥作用并能带来经济效益的知识。</p>
</blockquote>
<p>知识资产 又叫 智力资产。只找到 MBA 智库 的狭义定义，其实个人、集体，都拥有知识资产。</p>
<blockquote>
<p>过程资产（Process assets）</p>
<p>是指一个学习型组织在项目操作过程中所积累的无形资产。</p>
</blockquote>
<p>同样来自 MBA 智库 针对企业管理的狭义定义，这个时候叫做组织过程资产。但个人也有自己的过程资产。</p>
<h3 id="1-2-知识资产-与-过程资产"><a href="#1-2-知识资产-与-过程资产" class="headerlink" title="1.2 知识资产 与 过程资产"></a>1.2 知识资产 与 过程资产</h3><h4 id="知识资产"><a href="#知识资产" class="headerlink" title="知识资产"></a>知识资产</h4><ul>
<li>人力资产（HR）</li>
<li>市场资产</li>
<li>知识产权资产（IP）</li>
<li>基础结构资产<ul>
<li>管理哲学 、 企业文化</li>
<li>IT系统 、 财务结构</li>
<li>…</li>
</ul>
</li>
</ul>
<p>人力资产是人才，市场资产主要以 品牌美誉度 和 企业关系 方式存在。其余知识资产 多数以某种形式的资料——主要是文件、文档的方式——存在、传播 和 传承。</p>
<p><br></p>
<h4 id="过程资产"><a href="#过程资产" class="headerlink" title="过程资产"></a>过程资产</h4><ul>
<li>规章制度、指导方针、规范标准、操作程序、工作流程、行为准则和工具方法等</li>
<li>经验和教训，包括成文档案，也包括不成文的思想</li>
<li>实践中形成的所有文档，包括知识资料库、文档模板、标准化表格、风险清单等</li>
<li>实践中留下的历史信息</li>
<li>…</li>
</ul>
<p>过程资产 首先 也是知识资产。</p>
<p>不过如果说 知识资产 还包含着 可以 <strong>拿来</strong> 的普适部分，那么 过程资产 就更强调实践中的积累。这种积累跟 个人、企业 自身有着高度相关性，一方面不会轻易公开，另一方面，即使公开，也要经过一定程度整理重组，才能为他人所用。</p>
<p>换言之，无法轻易拿来，只能自身积累。</p>
<p><br></p>
<p>譬如说认真学习 某知名企业 公开的工作流程，甚至有机会去参观，成果写入本企业的规章制度，可以认为获得了知识资产。但只有经过自身实践，根据实际调整，变成自己的过程资产，才可以说真正发挥作用。</p>
<p>在这之前，很可能水土不服，画虎不成反类犬。</p>
<p><br></p>
<h3 id="1-3-为什么写文档"><a href="#1-3-为什么写文档" class="headerlink" title="1.3 为什么写文档"></a>1.3 为什么写文档</h3><p>说了这么多，跟文档有关系吗？</p>
<p>有。知识资产 主要以 资料 形式存在，资料 需要文档作为载体。</p>
<p>特别是 过程资产，不能从外部获取，如果没有过目不忘的记忆力，就必须规范地文档化。</p>
<p>换言之，<strong>好好写文档，就是在积累『资产』，积累竞争力。</strong></p>
<h2 id="贰、跟文档打交道"><a href="#贰、跟文档打交道" class="headerlink" title="贰、跟文档打交道"></a>贰、跟文档打交道</h2><h3 id="2-1-『资产』管理"><a href="#2-1-『资产』管理" class="headerlink" title="2.1 『资产』管理"></a>2.1 『资产』管理</h3><p>既然是资产，就要把它管理起来。</p>
<blockquote>
<p>知识管理 =&gt; 信息管理 =&gt; 文档管理</p>
</blockquote>
<p>三个词范围交叉，又不一样。前面范围大，越往后越具体，作为前面的开展手段。前面范围太大，我们聊聊文档的管理（其实范围也很大）。源码作为一种非常特殊的文档，自己形成了一套管理的方法（譬如 Github flow）；下面主要讨论非代码文档。当然你会发现，很多理论和工具正是来自源码管理。</p>
<p>『管理』过程中，我们可能面对以下一些操作：</p>
<p><img src="/images/document-management.png" alt="">  </p>
<ul>
<li>『归档』 和 『检索』 需要文件系统支持，如 Win-7 以后引入库的概念</li>
<li>审批需要 OA 系统的导入</li>
<li>销毁需要安全工具</li>
</ul>
<p>等等。涉及的工具超出了文档的范围，有机会再具体讨论。</p>
<p>这次集中说加粗部分。</p>
<h3 id="2-2-一些烦恼"><a href="#2-2-一些烦恼" class="headerlink" title="2.2 一些烦恼"></a>2.2 一些烦恼</h3><h4 id="记录："><a href="#记录：" class="headerlink" title="记录："></a>记录：</h4><p>不完整、不准确</p>
<p>事件、经过、数据、观点……都必须通过某种记录，变成素材。可以说，记录是获取文档素材的主要途径——如果再考虑到引用而来的素材，其实也来自别人的记录，那么就是唯一的途径。然而除了闭路电视全天候自动化的记录，多数的记录都面临不完整、不准确的问题。</p>
<p><strong>事后的追述，既费力，也不准确。而费力不讨好又会进一步降低记录的意愿。</strong> 随时随地记录，有利于保持内容的 完整 和 有效，也减少事后整理的负担。</p>
<p>这需要工具足够便利，跨平台（包括移动端），快速加载打开，没有使用负担。</p>
<p>事实上，很多人嫌记录麻烦，写文档变成了很痛苦的例行公事。只有在面临考核时，事后回忆 甚至编造一些记录应付了事。我自己就试过月度总结不写，到检查时一口气补几个月；有见过有人没有写 commit message，事后补上。</p>
<h4 id="编辑："><a href="#编辑：" class="headerlink" title="编辑："></a>编辑：</h4><p>缺乏好用的工具；思路总被打断</p>
<p>好的编辑器很重要。除了编辑效率的差别，还有很重要的一点，就是内容和格式同时编辑，会引起思路的打断。</p>
<h4 id="发布："><a href="#发布：" class="headerlink" title="发布："></a>发布：</h4><p>不同场景、不同用途需要不同的格式，明明差不多的内容，却整天要返工。</p>
<h4 id="演示："><a href="#演示：" class="headerlink" title="演示："></a>演示：</h4><p>做 PPT / KeyNote 吃力不讨好。</p>
<h4 id="版本跟踪"><a href="#版本跟踪" class="headerlink" title="版本跟踪"></a>版本跟踪</h4><ul>
<li>非程序员：『版本跟踪』是什么？</li>
<li>程序员：文档还要做版本跟踪？/ 我们已经做了。</li>
</ul>
<p>演示上面，一个是已有的文档不能简单地转换成演示文稿；另一个是，容易在一些花俏的细节上（例如动画）花过多精力，但最终的效果也不好</p>
<p>版本管理 程序员一般是知道的。目前我们多数用SVN，后面有机会跟大家分享一下Git的使用。我们现在的产品文档是已经用SVN管理起来，但严格来说，没有得到很好的管理，因为你没办法像代码一样diff两个版本。因为多数文档是二进制文件，你必须两个版本都获取下来，分别打开用肉眼判断，这是很低效而且容易犯错的。</p>
<h3 id="2-3-贵在坚持"><a href="#2-3-贵在坚持" class="headerlink" title="2.3 贵在坚持"></a>2.3 贵在坚持</h3><p>高中时写代码，曾经问过为什么要写注释和文档这样的蠢话。因为当时写的东西都太简单了。</p>
<p>工作几年，发现无论当时多么刻骨铭心的坑，通过多少个宵，最终都会忘记。只有成文的资料真正属于 自己 和 团队。</p>
<p>工作前几年最可惜的事，就是因为公司繁琐的安保政策加上自己懒，太多经验没有总结记录。一定要有适合自己的工具，保持随时记录的习惯。</p>
<h2 id="叁、为什么是Markdown"><a href="#叁、为什么是Markdown" class="headerlink" title="叁、为什么是Markdown"></a>叁、为什么是Markdown</h2><h3 id="3-1-纯文本的威力"><a href="#3-1-纯文本的威力" class="headerlink" title="3.1 纯文本的威力"></a>3.1 纯文本的威力</h3><blockquote>
<p>Markdown 是一种纯文本标记语言</p>
</blockquote>
<p><em>*注：本章节的标题及部分内容引用自 《The Pragmatic Programmer》——Andrew Hunt &amp; David Thomas</em></p>
<h4 id="什么是纯文本"><a href="#什么是纯文本" class="headerlink" title="什么是纯文本"></a>什么是纯文本</h4><ul>
<li><p>plain text (.txt)</p>
</li>
<li><p>Initialization file (.ini), Properties, YAML, JavaScript Object Notation (.json)</p>
</li>
<li><p>eXtensive Markup Language (.xml), HyperText Markup Language (.html)</p>
</li>
<li><p>各种wiki (.wiki)</p>
</li>
<li><p>Markdown (.md), reStructuredText (.rst)</p>
</li>
<li><p>…</p>
</li>
</ul>
<p><br></p>
<blockquote>
<p><strong>纯文本</strong> 由可打印字符组成，人可以直接阅读和理解其形式。</p>
</blockquote>
<p>举例说，尽管以下内容是可打印字符，却没有意义：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">Field19</span>=<span class="number">467</span>abe</div></pre></td></tr></table></figure>
<p>更好的选择，是让其变得能让人理解：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">DrawingType</span>=UMLActivityDrawing</div></pre></td></tr></table></figure>
<p>关键在于定义后半句：<br>不仅可以直接不借助任何特殊工具查看。而且是 <strong>人（脱离特定上下文也）比较容易理解</strong> 。</p>
<p>项目进行当中，你对项目细节如数家珍，觉得 <code>Field19</code> 非常清晰，<code>467abe</code> 意义也显而易见。但 <strong>上线一年后</strong> 再回来维护呢？一个 <strong>新同事</strong> 接手维护呢？ </p>
<p>（一个题外话：基于类似的理由，代码中应该尽可能避免使用『魔法值』（Magic Number）。）</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>纯文本两个主要缺点：</p>
<ol>
<li>跟压缩的二进制格式相比，纯文本占据 <strong>更多空间</strong></li>
<li>解析处理纯文本，可能需要 <strong>更多运算</strong></li>
</ol>
<p>某些场景下，这两个缺点无法容忍：例如超大量需要压缩存储的数据，或者资源非常紧张的单片机。</p>
<p>然而随着 <strong>存储空间 和 运算能力</strong> 变得越来越廉价，这点缺点跟以下优点比起来越来越微不足道。</p>
<h4 id="文本的威力"><a href="#文本的威力" class="headerlink" title="文本的威力"></a>文本的威力</h4><h5 id="保证不过时"><a href="#保证不过时" class="headerlink" title="保证不过时"></a>保证不过时</h5><blockquote>
<p>人能够阅读的数据形式，以及自述的数据，将比所有其他数据形式和创建它们的应用都活得更长久。</p>
</blockquote>
<p>只要数据还存在，你就有可能使用它。哪怕是创建它的程序不在的时候：有可能是这个程序过时已久；也有可能这个程序刚好在这台电脑，或者你的手机上没有。</p>
<p>记事本打开 .doc （<em>原本是直接贴了两行乱码在这里，但是因为会引起博客的feed解析错误，改为截图</em>）</p>
<p><img src="/images/mass-code-of-doc.png" alt=""></p>
<p>记事本打开 Markdown</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="section">##### 保证不过时</span></div><div class="line"></div><div class="line"><span class="quote">&gt; 人能够阅读的数据形式，以及自述的数据，将比所有其他的数据形式和创建它们的应用都活得更长久。</span></div></pre></td></tr></table></figure>
<ul>
<li>例子1 是我用记事本打开word之后任意选了两行。一个二进制文件，没有找到对应格式的编辑器，勉强打开都是这样的乱码。</li>
<li>例子2 就是前面引用那段话。完全纯文本（基于 Markdown）。电脑或者手机有安装解析软件，你可以看到前面渲染后的效果（分别是 二号标题，段落引用）。即使不巧没有对应工具，同时完全不懂 Markdown 标签，<strong>也丝毫不影响理解</strong> 。</li>
</ul>
<h5 id="杠杆作用"><a href="#杠杆作用" class="headerlink" title="杠杆作用"></a>杠杆作用</h5><blockquote>
<p>提供锋利的『小工具』，各自专注做好一件事。</p>
</blockquote>
<p>这是 Unix 设计哲学。它基于一个公共底层格式：面向行的纯文本文件 实现。每个工具专注做好一件事，然后通过 管道(pipe) 和 纯文本文件 互相打通，变成无所不能的shell脚本。</p>
<p>非技术背景的朋友可能还没反应过来，我换种方式复述一遍：</p>
<p>Unix-like 系统（包括 Unix/Linux/Mac）上的工具，就像一根根看不到内部的管道，每个专注提供一种功能：例如入口放面粉，出口就出来面包（面包机）。</p>
<p>如果你要进小麦出面包，没有；种子变面包，更没有。只有种子到小麦（姑且叫种植机），和小麦到面粉（磨面机）… 等等，都只专注一步。如果你需要 <strong>种子 =&gt; 三明治</strong> ，当然也没有；但你不需要从头发明这个机器，只需要 <strong>将现有的机器，一个接一个连接在一起</strong> 。 之所以这样可行，是因为这些工具都默认接受 『一行行的纯文本』作为输入，同时输出一行行的纯文本；大家按照这个惯例行事，不必额外考虑跟其他工具的兼容——哪怕这些工具的作者互不认识，甚至写出来的时间相差几十年。</p>
<h5 id="还有"><a href="#还有" class="headerlink" title="还有"></a>还有</h5><ol>
<li><p>假如系统崩溃，部分功能受限，如图形界面。（其实不用等系统崩溃，通过shell远程连接就没有GUI）这个时候，纯文本的优点就出来了。</p>
<blockquote>
<p>当系统崩溃时，你可能需要最小环境恢复。</p>
</blockquote>
</li>
<li><p>在不同的系统、不同的环境之间，基于网络的异构通信、自行协商的数据交换，如果需要确保各方能用一个公共标准通信，纯文本就是这个标准（所以我们看到XML，json的流行）。</p>
</li>
<li><p>基于纯文本的版本控制，你可以追踪（diff）每个版本的修改，这才是真正的版本管理。</p>
</li>
</ol>
<p>当一个标准可以串联起一系列工具，那么它就成为了一个支点，允许你用比较小的力气，借用现有的成果，完成复杂的工作。</p>
<p><strong>纯文本就是不同时代、不同技术的最大公约数；就是标准。</strong></p>
<h3 id="3-2-内容-与-样式-的分离"><a href="#3-2-内容-与-样式-的分离" class="headerlink" title="3.2 内容 与 样式 的分离"></a>3.2 内容 与 样式 的分离</h3><h4 id="两顶帽子"><a href="#两顶帽子" class="headerlink" title="两顶帽子"></a>两顶帽子</h4><blockquote>
<p>有两顶帽子，每次只戴其中一顶：</p>
<p>在修改内容时，不要理会显示的样式；</p>
<p>当修改样式时，不要改动内容。</p>
</blockquote>
<p>两顶帽子的原则来自面向对象编程。有接口的两顶帽子、重构的两顶帽子，等等。</p>
<p>强调的是每次关注改变的其中一个方面，隔离互相影响的变化。同时改变多个方面容易犯错，或者打乱思路。</p>
<p>受Word等软件的影响，大家似乎已经把 内容编排 和 样式 混在一起了<br>我举个例子：<br>这一段的标题是一个二级标题，上面这段话，是一段引用；这是内容编排。</p>
<p>具体二级标题、引用文字 应该怎么显示，这是样式。</p>
<p>这是不同的东西：内容在编辑完之后，就相对固定下来了；而样式会因应不同的场景，不同的用途，不同的读者，有不同的需求。</p>
<p>像我现在做演示文稿是一种需要，同样的内容发布到博客是一种需要。演示需要的字号肯定大很多。</p>
<p>甚至我换一个演示环境，投影仪的对比度比显示器低，我又要改动对比度。</p>
<p>他们变化的频率是不一样的，应该隔离开来。样式往往到最后根据场景来定。</p>
<h4 id="Write-Once-Export-Everywhere"><a href="#Write-Once-Export-Everywhere" class="headerlink" title="Write Once, Export Everywhere"></a>Write Once, Export Everywhere</h4><p>Java 当年宣传，号称Write Once, Run everywhere。今天借用一下。</p>
<p>Markdown不仅作为纯文本，在最坏的情况下都能被记事本打开。而且由于它有大量的工具支持，可以转换为各种场景下的文档。</p>
<ul>
<li><a href="http://pandoc.org/" target="_blank" rel="external">pandoc</a> (<a href="https://typora.io/" target="_blank" rel="external">Typora</a> , <a href="">Smark</a>)： HTML, Word, PDF, LaTeX, Epub…</li>
<li><a href="https://yhatt.github.io/marp/" target="_blank" rel="external">Marp</a> ： PDF 演示文稿 </li>
<li><a href="https://github.com/ksky521/nodePPT" target="_blank" rel="external">nodeppt</a> ： HTML5 演示文稿 （特效比Marp炫）</li>
<li><a href="https://hexo.io/" target="_blank" rel="external">hexo</a> ： 静态博客</li>
<li><a href="https://github.com/GitbookIO/gitbook" target="_blank" rel="external">gitbook</a> ：生成电子书和文档的命令行工具，同时官方提供一个<a href="https://www.gitbook.com/editor" target="_blank" rel="external">编辑器</a></li>
<li>Markdown here ：一个原地将 Markdown 转换成 HTML的 浏览器插件</li>
</ul>
<p>pandoc是一个命令行工具，你当然可以敲命令使用；不过方便起见，我会推荐使用一个前端工具，首推Typora。</p>
<p>而当你需要在只支持 HTML 的在线编辑器使用 Markdown 时（譬如公众号后台），Markdown here 是很好的选择。</p>
<h4 id="代码高亮-和-数学环境"><a href="#代码高亮-和-数学环境" class="headerlink" title="代码高亮 和 数学环境"></a>代码高亮 和 数学环境</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello world!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<p>$$x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}$$</p>
<p>这两点，一般人可能没什么需求，但是数学工作者和程序员是很需要的。</p>
<p>以前每次用PPT，往上面贴代码的体验非常差。首先默认的字体一般不是编程用的等宽字体，要手动改。还有tab和空格的对齐，就足够折腾了。还要高亮就只能手动选中改颜色了。</p>
<p>但这里，只要把代码贴上去，高亮是自动完成的。</p>
<p>因为以前讲算法，偶尔有数学推导。Office倒是有公式编辑器，但是很难用，而且修改也不容易。</p>
<p>而这里，只要用Mathjax写公式就可以了。</p>
<p>Mathjax语法相当地直观，这里不详细展开，有需要的话，可以看我之前写的一篇文章：</p>
<p><a href="http://jaycechant.info/2016/intro-to-mathjax/">Introduction to MathJax &amp; some samples</a></p>
<h3 id="3-3-为什么是Markdown"><a href="#3-3-为什么是Markdown" class="headerlink" title="3.3 为什么是Markdown"></a>3.3 为什么是Markdown</h3><p>再问一次这个问题。</p>
<blockquote>
<p>纯文本是好的，内容与样式分离是好的。但那么多纯文本的标记语言可以做到，为什么是 Markdown？</p>
</blockquote>
<p>是的，不一定是Markdown。</p>
<p>除了 Plaintext 太弱、HTML 太繁琐 不值得选择，reStructuredText 和 asciiDoc 都是 Markdown 强有力的对手。只能说目前 Markdown 工具支持更广泛，而且（对我而言）现阶段够用又最简单。未来几年，情况可能会发生变化。</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>Markdown</th>
<th>rst</th>
<th>HTML</th>
</tr>
</thead>
<tbody>
<tr>
<td>标签</td>
<td>约十几种</td>
<td>约十几种</td>
<td>HTML4.1 共89个标签</td>
</tr>
<tr>
<td>标签读写</td>
<td>不解析也能理解读写</td>
<td>大部分不解析也能理解</td>
<td>需要层次嵌套和严谨闭合，复杂冗余</td>
</tr>
<tr>
<td>表达能力</td>
<td>仅覆盖常用格式，较弱；但可以直接写HTML补充，并有较多第三方增强（Mathjx，代码高亮）</td>
<td>支持格式比标准Markdown稍多</td>
<td>最强，整个互联网基本都是构建在HTML之上，前两者多数情况也是转换成HTML</td>
</tr>
<tr>
<td>工具支持</td>
<td>Github等代码托管，各大云笔记</td>
<td>不明</td>
<td>多数工具以HTML实现，但不提供直接编辑</td>
</tr>
<tr>
<td>格式支持</td>
<td>通过pandoc，能直接或间接导出几乎所有文档格式，且有较多编辑器前端可选</td>
<td>通过pandoc，能直接或间接导出几乎所有文档格式</td>
<td>能转成word、PDF等格式，但不能替换样式</td>
</tr>
<tr>
<td>总结</td>
<td>简单，但可拓展性强，支持广泛，工具多且开发活跃。</td>
<td>比Markdown稍复杂和强大，但热度不如Markdown，工具少很多。</td>
<td>严谨精确，适合浏览器解析，不方便一般人读写。</td>
</tr>
</tbody>
</table>
<h3 id="一些栗子"><a href="#一些栗子" class="headerlink" title="一些栗子"></a>一些栗子</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">### 一些栗子 &lt;!-- 二级标题 --&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>糖炒栗子</li>
<li>水煮栗子</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>糖炒栗子</div><div class="line"><span class="bullet">* </span>水煮栗子</div></pre></td></tr></table></figure>
<p><a href="http://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external">维基词条</a></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">维基词条</span>](<span class="link">http://zh.wikipedia.org/wiki/Markdown</span>)</div></pre></td></tr></table></figure>
<h3 id="更多参考"><a href="#更多参考" class="headerlink" title="更多参考"></a>更多参考</h3><p>这次主要是介绍概念，教程不是重点，更多用法技巧：</p>
<ul>
<li><a href="http://jaycechant.info/2012/blog-with-markdown/">用Markdown写日志</a> </li>
<li><a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">Markdown语法官方版</a></li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><del>这个演示文稿（Presentation）完全由 Markdown 写成，使用<a href="https://yhatt.github.io/marp/" target="_blank" rel="external">Marp</a>输出。</del> </p>
<p>同时稍作调整后，还会发表博客、以及其他格式的文档。</p>
<p>如果你细心对比 博客文章 和 演示文稿，你会发现 演示文稿 上少了很多内容，这些内容是讲稿。讲稿以注释形式直接写在演示文稿里，讲的时候是对着注释讲的。</p>
<p>作为文章发表时，不过把 注释符 和 分页符 删掉而已，就是一个查找替换。希望未来有工具自动识别输出场景，把这一步也省略；如果迟迟不出现，我尽量抽空自己实现。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不记得第几次安利 Markdown 了。&lt;/p&gt;
&lt;p&gt;曾发过一篇&lt;a href=&quot;../../2012/blog-with-markdown/&quot;&gt;《用Markdown写日志》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;还是决定重写一篇：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;那篇重点在 HowTo ，理由一塌糊涂；这次不讨论语法，只谈为什么。&lt;/li&gt;
&lt;li&gt;那篇重点讨论写日志（博客）；这次想讨论 Markdown 串起各种文档的可能性。&lt;/li&gt;
&lt;li&gt;四年过去，环境和工具有了变化，像 Typora 、nodePPT 和 Marp 的出现，让 Markdown 有了更多可能，更加易用。 &lt;strong&gt;Typora 让写字有了仪式感和幸福感。&lt;/strong&gt; &lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="https://jaycechant.info/tags/Markdown/"/>
    
      <category term="why" scheme="https://jaycechant.info/tags/why/"/>
    
      <category term="document" scheme="https://jaycechant.info/tags/document/"/>
    
      <category term="presentation" scheme="https://jaycechant.info/tags/presentation/"/>
    
  </entry>
  
  <entry>
    <title>镜像集合</title>
    <link href="https://jaycechant.info/2016/mirrors-collection/"/>
    <id>https://jaycechant.info/2016/mirrors-collection/</id>
    <published>2016-12-31T02:29:12.000Z</published>
    <updated>2017-01-25T04:21:21.999Z</updated>
    
    <content type="html"><![CDATA[<p>在中国做开发者，殊为不易。技术创新多发源欧美，尤其开源的工具；国内巨头现在渐渐有些贡献，不过很多东西还是要取自国外。</p>
<p>好不容易跨过语言关，结果发现还有一道高墙。要么是各种原因被GFW连坐（例如各种Google的服务），要么纯粹因为太远不稳定。以前还能说先用工具慢慢下载到本地安装；现在网络越来越快，所以都流行在线安装，光连得上还不行，太慢也会timeout。国外开发者秒下无感的事情，我们这里可以折腾几天。</p>
<p>解决办法就是镜像了。所以现在配置开发环境，第一步是安装工具，第二步马上就是配置镜像，然后才能好好地下载依赖。所以自己整理一个常用的镜像集合，方便每次配置环境时翻查。</p>
<a id="more"></a>
<p><em>只列我在用或者用过的，没有也不必要把全部列上，旧的不行换新的再更新</em></p>
<h1 id="Ubuntu-软件源"><a href="#Ubuntu-软件源" class="headerlink" title="Ubuntu 软件源"></a>Ubuntu 软件源</h1><p>目前使用163的源：<a href="http://mirrors.163.com/.help/ubuntu.html" target="_blank" rel="external">http://mirrors.163.com/.help/ubuntu.html</a></p>
<p>里面已经有比较详细的说明，挑选对应的发行版本下载就好。以14.04 (trusty) 为例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">~$ <span class="built_in">cd</span> /etc/apt/</div><div class="line">/etc/apt$ wget http://mirrors.163.com/.help/sources.list.trusty</div><div class="line">/etc/apt$ mv sources.list sources.list.bak</div><div class="line">/etc/apt$ mv sources.list.trusty sources.list</div><div class="line">/ect/apt$ apt-get update</div></pre></td></tr></table></figure>
<p>使用阿里云服务器的，可以考虑用阿里云的镜像：<a href="http://mirrors.aliyun.com/help/ubuntu" target="_blank" rel="external">http://mirrors.aliyun.com/help/ubuntu</a></p>
<p>将镜像的地址从 <a href="http://mirrors.aliyun.com" target="_blank" rel="external">http://mirrors.aliyun.com</a> 改为 <a href="http://mirrors.aliyuncs.com" target="_blank" rel="external">http://mirrors.aliyuncs.com</a> 可以走内网流量。</p>
<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><p>推荐淘宝NPM镜像：<a href="https://npm.taobao.org/" target="_blank" rel="external">https://npm.taobao.org/</a></p>
<p>因为除了镜像，他们还提供了定制的cnpm代替npm：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<p>除了敲命令时前面多个c，用法上跟npm没有任何差别。详情可以看官方的说明。</p>
<h1 id="Maven-repository"><a href="#Maven-repository" class="headerlink" title="Maven repository"></a>Maven repository</h1><p>Maven仓库推荐阿里云的中央库：<a href="http://maven.aliyun.com/nexus/" target="_blank" rel="external">http://maven.aliyun.com/nexus/</a></p>
<p>一般的做法是修改Maven的settings.xml：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </div><div class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></div></pre></td></tr></table></figure>
<p>settings.xml 有两个，分别在：</p>
<ul>
<li>$M2_HOME/conf/settings.xml ：全局设置，在maven的安装目录。Windows为 %M2_HOME%，一般要手动设置。</li>
<li>~/.m2/settings.xml ：用户设置，需要自己添加。Linux就是用户目录，Windows一般在 <code>C:\Users\YourName</code>。</li>
</ul>
<p>两个文件如果同时存在，会融合成一个文件；同时存在的设置项，以用户设置为准。</p>
<hr>
<h2 id="在pom设置repository"><a href="#在pom设置repository" class="headerlink" title="在pom设置repository"></a>在pom设置repository</h2><p>但我基本不单独执行<code>mvn</code>，都是在Eclipse里引用，不知道为什么明明在Eclipse设置了settings.xml的位置，但还是不起作用（依然访问官方库）；另外，多人协作的项目，每个人都设置一次镜像也是一个麻烦。</p>
<p>这时最好的办法，就是在项目的pom.xml 设置一下repository：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun-repos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Aliyun Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun-repos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Aliyun Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></div></pre></td></tr></table></figure>
<p>优先级上，项目的设置会覆盖用户的设置。pom是项目文件的一部分，会一起被提交和拉取，项目导入的时候直接就是到镜像去取依赖了。</p>
<h1 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h1><p>网上都在推荐豆瓣的源：<a href="http://www.jianshu.com/p/785bb1f4700d" target="_blank" rel="external">http://www.jianshu.com/p/785bb1f4700d</a></p>
<p>临时使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install ModuleName -i https://pypi.douban.com/simple</div></pre></td></tr></table></figure>
<ul>
<li>使用https安全是没有问题的。但如果碰上https连不上，就要加<code>--trusted-host</code>。</li>
<li>虽然修改了软件源，但<code>pip search</code>命令还是不能用，因为搜索软件使用的协议与安装软件不同。<code>pip search</code>基于xmlrpclib实现，<code>pip install</code>基于urllib2实现。同样地，对<code>pip search</code>设置代理，也是不起作用的。</li>
</ul>
<p>想长久生效，就要修改配置文件：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="section">[global]</span></div><div class="line"><span class="attr">index-url</span> = https://pypi.douban.com/simple</div></pre></td></tr></table></figure>
<p>配置文件的位置，Linux应该是在用户目录下的 <code>~/.pip/pip.conf</code>，如果不存在可以自己创建，pip会默认从这个文件读取配置。Windows的配置可以参考 <a href="http://blog.csdn.net/styshoo/article/details/52865373" target="_blank" rel="external">http://blog.csdn.net/styshoo/article/details/52865373</a> ，跟Linux类似，不过有好几个地方，可以echo系统参数，看哪个存在。</p>
<h1 id="Android-SDK"><a href="#Android-SDK" class="headerlink" title="Android SDK"></a>Android SDK</h1><p><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">AndroidDevTools</a> 上提供的镜像，我都试过，除了Bugly其他都不稳定或者根本连不上（所在地是广州）。因为Bugly要登录，本不想那么麻烦也没有办法了。不过只要用QQ号登录就好，这个估计谁都有。</p>
<p>详细的用法在上面有介绍：<a href="https://dsx.bugly.qq.com/repository/1" target="_blank" rel="external">https://dsx.bugly.qq.com/repository/1</a></p>
<p>简单说就是把</p>
<pre><code>域名 : id.repository.bugly.qq.com
端口 : 80
</code></pre><p>填到SDK Manager 的proxy设置里。登录之后每个人有自己的id。</p>
<h1 id="Jenkins-plugins"><a href="#Jenkins-plugins" class="headerlink" title="Jenkins plugins"></a>Jenkins plugins</h1><p><a href="http://mirrors.jenkins-ci.org/status.html" target="_blank" rel="external">镜像列表</a></p>
<p>我人肉ping测试了一下速度，感觉 <a href="http://mirror.esuni.jp" target="_blank" rel="external">http://mirror.esuni.jp</a> 速度还可以，所以就用了这个。</p>
<p>把</p>
<p><a href="http://mirror.esuni.jp/jenkins/updates/update-center.json" target="_blank" rel="external">http://mirror.esuni.jp/jenkins/updates/update-center.json</a></p>
<p>填到 Jenkins &gt; 插件管理 &gt; 高级 &gt; 升级站点 即可。</p>
<p>偶尔还是有安装失败，这时只好手动下载插件之后上传了。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在中国做开发者，殊为不易。技术创新多发源欧美，尤其开源的工具；国内巨头现在渐渐有些贡献，不过很多东西还是要取自国外。&lt;/p&gt;
&lt;p&gt;好不容易跨过语言关，结果发现还有一道高墙。要么是各种原因被GFW连坐（例如各种Google的服务），要么纯粹因为太远不稳定。以前还能说先用工具慢慢下载到本地安装；现在网络越来越快，所以都流行在线安装，光连得上还不行，太慢也会timeout。国外开发者秒下无感的事情，我们这里可以折腾几天。&lt;/p&gt;
&lt;p&gt;解决办法就是镜像了。所以现在配置开发环境，第一步是安装工具，第二步马上就是配置镜像，然后才能好好地下载依赖。所以自己整理一个常用的镜像集合，方便每次配置环境时翻查。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://jaycechant.info/tags/Android/"/>
    
      <category term="Jenkins" scheme="https://jaycechant.info/tags/Jenkins/"/>
    
      <category term="pip" scheme="https://jaycechant.info/tags/pip/"/>
    
      <category term="mirror" scheme="https://jaycechant.info/tags/mirror/"/>
    
      <category term="Ubuntu" scheme="https://jaycechant.info/tags/Ubuntu/"/>
    
      <category term="aliyun" scheme="https://jaycechant.info/tags/aliyun/"/>
    
      <category term="npm" scheme="https://jaycechant.info/tags/npm/"/>
    
      <category term="maven" scheme="https://jaycechant.info/tags/maven/"/>
    
      <category term="a list" scheme="https://jaycechant.info/tags/a-list/"/>
    
  </entry>
  
  <entry>
    <title>vsftp 503 和 500 错误</title>
    <link href="https://jaycechant.info/2016/vsftp-error-503-and-500/"/>
    <id>https://jaycechant.info/2016/vsftp-error-503-and-500/</id>
    <published>2016-12-29T02:53:19.000Z</published>
    <updated>2017-01-25T04:21:21.984Z</updated>
    
    <content type="html"><![CDATA[<p>想在远程服务器上装一些东西，在yum或者apt源里的自然很容易，但那以外的，shell + wget 总是有许多不便（有些下载需要登录，有些需要梯子……服务器上又希望尽量少不必要的东西），何况偶尔需要和本地交换一些东西，FTP是必要的。之前在 CentOS 7 上相当顺利，这次在Ubuntu 14.04上却不太顺利。</p>
<a id="more"></a>
<h1 id="503"><a href="#503" class="headerlink" title="503"></a>503</h1><p>安装，然后创建了一个用户叫vsftp，设置一个相对简单的密码，禁止匿名登录。</p>
<p>然后在本地用ftp客户端登录：</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">命令:	USER vsftp</div><div class="line">响应:	<span class="number">331</span> Please specify the password.</div><div class="line">命令:	PASS *****</div><div class="line">响应:	<span class="number">530</span> Login incorrect.</div></pre></td></tr></table></figure>
<p>照例放Google，结果搜到一堆解决方法，众说纷纭，不禁让我疑惑中间一部分是碰运气，根本不知道原因，因为我是在Ubuntu上有问题，结果找到这么一个讨论：<a href="http://askubuntu.com/questions/413677/vsftpd-530-login-incorrect" target="_blank" rel="external">http://askubuntu.com/questions/413677/vsftpd-530-login-incorrect</a></p>
<p>提问者的情况跟我完全一致，而最高票的答案（将pam_service_name 从 vsftp 改为 ftp）也多次出现在各个搜索结果里，看来是可以解决问题的。不过我留了个心眼，继续看底下的评论：</p>
<blockquote>
<p>You are disabling default access control via PAM, because default “ftp” has no rules. The default <code>pam_service_name=vsftp</code> uses the file <code>/etc/pam.d/vsftpd</code>. This file by default requires FTP users to have a shell listed in <code>/etc/shells</code> and requires them <strong>not</strong> to be listed in <code>/etc/ftpusers</code>.</p>
</blockquote>
<p>一看，果然如此，pam.d/ 下只有vsftp的配置，你改名当然绕过了，但是就失去保护了。</p>
<p>查看 <code>/et/ftpusers</code>，vsftp 并没有在里面。再查看 <code>/etc/passwd</code>，vsftp 没有指定shell。于是我就将它的shell指定为<code>/usr/sbin/nologin</code> （不允许真正登录shell操作），并且添加到 <code>/etc/shells</code>。再试，却又报了另一个错误。</p>
<h1 id="500"><a href="#500" class="headerlink" title="500"></a>500</h1><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">命令:	USER vsftp</div><div class="line">响应:	<span class="number">331</span> Please specify the password.</div><div class="line">命令:	PASS *****</div><div class="line">响应:	<span class="number">500</span> OOPS: cannot change directory:/home/vsftp</div></pre></td></tr></table></figure>
<p>又是先放Google，又是一堆众说纷纭。然后这个回答提醒了我：<a href="http://blog.arithm.com/2009/06/15/defeating-vsftp-error-500-oops-cannot-change-directorysomedirectory/" target="_blank" rel="external">http://blog.arithm.com/2009/06/15/defeating-vsftp-error-500-oops-cannot-change-directorysomedirectory/</a></p>
<p>简单说就是：你搞那么多幺蛾子之前，有先最基本的检查一下目录的权限吗？</p>
<p>一看，目录根本还没创建 T_T 。因为vsftp 不能执行shell，所以用sudo 给它创建了目录，在chown 给 vsftp。</p>
<p>这回FTP客户端真的可以登录了。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想在远程服务器上装一些东西，在yum或者apt源里的自然很容易，但那以外的，shell + wget 总是有许多不便（有些下载需要登录，有些需要梯子……服务器上又希望尽量少不必要的东西），何况偶尔需要和本地交换一些东西，FTP是必要的。之前在 CentOS 7 上相当顺利，这次在Ubuntu 14.04上却不太顺利。&lt;/p&gt;
    
    </summary>
    
    
      <category term="trouble" scheme="https://jaycechant.info/tags/trouble/"/>
    
      <category term="Ubuntu" scheme="https://jaycechant.info/tags/Ubuntu/"/>
    
      <category term="vsftp" scheme="https://jaycechant.info/tags/vsftp/"/>
    
  </entry>
  
  <entry>
    <title>升级 pip 时的一个坑</title>
    <link href="https://jaycechant.info/2016/trap-while-upgrading-pip/"/>
    <id>https://jaycechant.info/2016/trap-while-upgrading-pip/</id>
    <published>2016-12-29T02:50:03.000Z</published>
    <updated>2017-01-09T15:37:05.189Z</updated>
    
    <content type="html"><![CDATA[<p>升级 pip 过程中踩了个坑。其实之前也升级过不过很巧合绕过去了。这次踩到做个记录。</p>
<a id="more"></a>
<p>事情是这样的，我需要写一个爬虫，所以就安装了bs4（喔，漂亮的肥皂）。然后安装后pip提示我新版本出来了。作为一个『不更新不舒服斯基』，我顺手就 <code>pip install --upgrade pip</code> 了。其实它提示的命令是 <code>python -m pip install --upgrade pip</code> 的，但在Scripts加入了系统路径的情况下（比较新的版本，安装的时候自动就帮你添加了）， 直接pip 不是一样吗。然后就出现了下面这样的情况。</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">JayceChant</span>&gt;<span class="title">pip</span> <span class="title">install</span> <span class="title">beautifulsoup4</span></span></div><div class="line"><span class="title">Collecting</span> <span class="title">beautifulsoup4</span></div><div class="line">  <span class="title">Downloading</span> <span class="title">beautifulsoup4</span>-4.5.1-<span class="title">py3</span>-<span class="title">none</span>-<span class="title">any.whl</span> (83<span class="title">kB</span>)</div><div class="line">    100% |████████████████████████████████| 92<span class="title">kB</span> 93<span class="title">kB</span>/<span class="title">s</span></div><div class="line"><span class="title">Installing</span> <span class="title">collected</span> <span class="title">packages</span>: <span class="title">beautifulsoup4</span></div><div class="line"><span class="title">Successfully</span> <span class="title">installed</span> <span class="title">beautifulsoup4</span>-4.5.1</div><div class="line"><span class="title">You</span> <span class="title">are</span> <span class="title">using</span> <span class="title">pip</span> <span class="title">version</span> 8.1.1, <span class="title">however</span> <span class="title">version</span> 9.0.1 <span class="title">is</span> <span class="title">available</span>.</div><div class="line"><span class="title">You</span> <span class="title">should</span> <span class="title">consider</span> <span class="title">upgrading</span> <span class="title">via</span> <span class="title">the</span> '<span class="title">python</span> -<span class="title">m</span> <span class="title">pip</span> <span class="title">install</span> --<span class="title">upgrade</span> <span class="title">pip</span>' <span class="title">command</span>.</div><div class="line"></div><div class="line"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">JayceChant</span>&gt;<span class="title">pip</span> <span class="title">install</span> --<span class="title">upgrade</span> <span class="title">pip</span></div><div class="line"><span class="title">Collecting</span> <span class="title">pip</span></div><div class="line">  <span class="title">Downloading</span> <span class="title">pip</span>-9.0.1-<span class="title">py2.py3</span>-<span class="title">none</span>-<span class="title">any.whl</span> (1.3<span class="title">MB</span>)</div><div class="line">    100% |████████████████████████████████| 1.3<span class="title">MB</span> 6.4<span class="title">kB</span>/<span class="title">s</span></div><div class="line"><span class="title">Installing</span> <span class="title">collected</span> <span class="title">packages</span>: <span class="title">pip</span></div><div class="line">  <span class="title">Found</span> <span class="title">existing</span> <span class="title">installation</span>: <span class="title">pip</span> 8.1.1</div><div class="line">    <span class="title">Uninstalling</span> <span class="title">pip</span>-8.1.1:</div><div class="line"><span class="title">Exception</span>:</div><div class="line"><span class="title">Traceback</span> (<span class="title">most</span> <span class="title">recent</span> <span class="title">call</span> <span class="title">last</span>):</div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">shutil.py</span>", <span class="title">line</span> 538, <span class="title">in</span> <span class="title">move</span></div><div class="line">    <span class="title">os.rename</span>(<span class="title">src</span>, <span class="title">real_dst</span>)</div><div class="line"><span class="title">OSError</span>: [<span class="title">WinError</span> 17] 系统无法将文件移到不同的磁盘驱动器。: '<span class="title">d</span>:\\<span class="title">dev</span>\\<span class="title">python35</span>\\<span class="title">scripts</span>\\<span class="title">pip.exe</span>' -&gt; '<span class="title">C</span>:\\<span class="title">Users</span>\\<span class="title">JAYCEC</span>~1\\<span class="title">AppData</span>\\<span class="title">Local</span>\\<span class="title">Temp</span>\\<span class="title">pip</span>-<span class="title">wgmxmz1x</span>-<span class="title">u</span></div><div class="line"><span class="title">ninstall</span>\\<span class="title">dev</span>\\<span class="title">python35</span>\\<span class="title">scripts</span>\\<span class="title">pip.exe</span>'</div><div class="line"></div><div class="line"><span class="title">During</span> <span class="title">handling</span> <span class="title">of</span> <span class="title">the</span> <span class="title">above</span> <span class="title">exception</span>, <span class="title">another</span> <span class="title">exception</span> <span class="title">occurred</span>:</div><div class="line"></div><div class="line"><span class="title">Traceback</span> (<span class="title">most</span> <span class="title">recent</span> <span class="title">call</span> <span class="title">last</span>):</div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">pip</span>\<span class="title">basecommand.py</span>", <span class="title">line</span> 209, <span class="title">in</span> <span class="title">main</span></div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">pip</span>\<span class="title">commands</span>\<span class="title">install.py</span>", <span class="title">line</span> 317, <span class="title">in</span> <span class="title">run</span></div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">pip</span>\<span class="title">req</span>\<span class="title">req_set.py</span>", <span class="title">line</span> 726, <span class="title">in</span> <span class="title">install</span></div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">pip</span>\<span class="title">req</span>\<span class="title">req_install.py</span>", <span class="title">line</span> 746, <span class="title">in</span> <span class="title">uninstall</span></div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">pip</span>\<span class="title">req</span>\<span class="title">req_uninstall.py</span>", <span class="title">line</span> 115, <span class="title">in</span> <span class="title">remove</span></div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">pip</span>\<span class="title">utils</span>\__init__.py", <span class="title">line</span> 267, <span class="title">in</span> <span class="title">renames</span></div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">shutil.py</span>", <span class="title">line</span> 553, <span class="title">in</span> <span class="title">move</span></div><div class="line">    <span class="title">os.unlink</span>(<span class="title">src</span>)</div><div class="line"><span class="title">PermissionError</span>: [<span class="title">WinError</span> 5] 拒绝访问。: '<span class="title">d</span>:\\<span class="title">dev</span>\\<span class="title">python35</span>\\<span class="title">scripts</span>\\<span class="title">pip.exe</span>'</div><div class="line"></div><div class="line"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">JayceChant</span>&gt;<span class="title">pip</span> <span class="title">install</span> --<span class="title">upgrade</span> <span class="title">pip</span></div><div class="line"><span class="title">Traceback</span> (<span class="title">most</span> <span class="title">recent</span> <span class="title">call</span> <span class="title">last</span>):</div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">runpy.py</span>", <span class="title">line</span> 184, <span class="title">in</span> _run_module_as_main</div><div class="line">    "__main__", <span class="title">mod_spec</span>)</div><div class="line">  <span class="title">File</span> "<span class="title">d</span>:\<span class="title">dev</span>\<span class="title">python35</span>\<span class="title">lib</span>\<span class="title">runpy.py</span>", <span class="title">line</span> 85, <span class="title">in</span> _run_code</div><div class="line">    <span class="title">exec</span>(<span class="title">code</span>, <span class="title">run_globals</span>)</div><div class="line">  <span class="title">File</span> "<span class="title">D</span>:\<span class="title">Dev</span>\<span class="title">Python35</span>\<span class="title">Scripts</span>\<span class="title">pip.exe</span>\__main__.py", <span class="title">line</span> 5, <span class="title">in</span> &lt;<span class="title">module</span>&gt;</div><div class="line"><span class="title">ImportError</span>: <span class="title">No</span> <span class="title">module</span> <span class="title">named</span> '<span class="title">pip</span>'</div></pre></td></tr></table></figure>
<p>翻译一下：</p>
<ol>
<li>因为 pip.exe 正在运行，所以无法将新的pip.exe覆盖上去</li>
<li>因为没权限，另外一个错误产生了</li>
<li>升级失败想再来一次？不好意思，旧版本已经卸载了，根本找不到</li>
</ol>
<p>我去，直接蒙圈了，就随手更新一下，直接就把pip弄没了。我还得手动安装一次pip？虽然不难，但折腾啊。</p>
<p>Google一下，发现有人提供issue了：<a href="https://github.com/pypa/pip/issues/3804" target="_blank" rel="external">https://github.com/pypa/pip/issues/3804</a></p>
<p>我把关键的信息搬运一下（大意汇总 + 翻译，不一一对应）：</p>
<blockquote>
<p>pip.exe 正在运行，所以无法替换对应的文件，与其说是错误，不如说是系统限制。</p>
<p>以系统管理员运行，用 python -m pip install –upgrade pip 更新就可以了。</p>
</blockquote>
<p>（pip.exe 实际上指向pip-script.py，然后里面再加载pip模块并运行，实际效果就跟 <code>python -m pip install --upgrade pip</code> 一样。但不一样的是，前者运行锁定了pip.exe，而后者实际上只运行了 python.exe。）</p>
<p>然后什么都没做，这个issue就作为<a href="https://github.com/pypa/pip/issues/1299" target="_blank" rel="external">https://github.com/pypa/pip/issues/1299</a> 的 duplicated issue 被 closed了。</p>
<p>有兴趣可以看1299下面的讨论，太长我就不翻了。</p>
<p>还好还有 easy_install，<code>easy_install pip</code>，恢复正常。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;升级 pip 过程中踩了个坑。其实之前也升级过不过很巧合绕过去了。这次踩到做个记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://jaycechant.info/tags/Python/"/>
    
      <category term="pip" scheme="https://jaycechant.info/tags/pip/"/>
    
      <category term="trouble" scheme="https://jaycechant.info/tags/trouble/"/>
    
  </entry>
  
</feed>
