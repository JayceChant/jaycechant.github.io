<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>存档Save&amp;Load</title>
  <subtitle>存档意味着放下包袱，搞砸了不过回来读档</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jaycechant.info/"/>
  <updated>2020-01-22T10:10:38.811Z</updated>
  <id>https://jaycechant.info/</id>
  
  <author>
    <name>Jayce Sigit Chant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang 1.13 - module VS package</title>
    <link href="https://jaycechant.info/2020/golang-1-13-module-VS-package/"/>
    <id>https://jaycechant.info/2020/golang-1-13-module-VS-package/</id>
    <published>2020-01-20T08:50:37.000Z</published>
    <updated>2020-01-22T10:10:38.811Z</updated>
    
    <content type="html"><![CDATA[<p>在写 《<a href="https://jaycechant.info/2020/setup-golang-env-for-1-13-and-above/">配置 1.13+ 的 golang 环境</a>》时，花了大量篇幅解释 module 的概念，还有 module 与 package 之间的联系。眼看字数翻了一番，干脆把这部分另起一篇。</p>
<a id="more"></a>
<h2 id="module-与-package"><a href="#module-与-package" class="headerlink" title="module 与 package"></a>module 与 package</h2><h3 id="0x0-module-不是-package"><a href="#0x0-module-不是-package" class="headerlink" title="0x0 module 不是 package"></a>0x0 module 不是 package</h3><p>是的，他们不是同一个概念！！module（模块）是新引入的概念，一个 module 是 零到多个 package（包）的组合，不要把他们混为一谈。</p>
<table>
<thead>
<tr>
<th></th>
<th>package</th>
<th>module</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>本质</strong></td>
<td>一个目录下所有 go 源码的集合（不包括子目录，那是另一个 package）</td>
<td>同一个根目录下所有包的集合（包括子目录）</td>
</tr>
<tr>
<td><strong>共享</strong></td>
<td>代码 <strong>共享命名空间（包名）</strong>，包内可以 <strong>直接互相调用</strong>（包括小写开头的 unexported members）</td>
<td>同一个 module 下的 package <strong>共享 module path 作为 package path 的前缀</strong>，module 内可以 <strong>直接互相 import</strong></td>
</tr>
<tr>
<td><strong>单位</strong></td>
<td>（代码开头）<strong>import 的单位</strong></td>
<td>（go.mod）<strong>require 的单位</strong></td>
</tr>
</tbody>
</table>
<p><strong>package</strong>  具体体现为一个目录下所有 go 源码的集合（不包括子目录，那是另一个 package），它们 <strong>共享命名空间（包名）</strong>，包内可以 <strong>直接互相调用</strong>（包括小写开头的 unexported members）。package 是 <strong>import 的单位</strong> ，import 语句写在每一个 go 源码文件的开头。<br>包名跟目录名 <strong>可以一样也可以不一样</strong>。虽然允许不一样，但是大家习惯性认为目录就是包名；为了避免大家还要去查包名， <strong>没什么特别理由建议保持一致</strong>。<br>例如，<code>import path/to/pkg_dir</code> 中的 pkg_dir 是目录名，<code>package pkg</code> 和 <code>pkg.MyFunc()</code> 里的 pkg 是包名。</p>
<p><strong>module</strong> 则是同一个根目录下所有包的集合（包括子目录），它们 <strong>共享 module path 作为 package path 的前缀</strong>，module 内可以 <strong>直接互相 import</strong>。module 是 <strong>require 的单位</strong> ，require 语句在 go.mod 里。</p>
<h3 id="0x1-GOPATH-vendor-时代"><a href="#0x1-GOPATH-vendor-时代" class="headerlink" title="0x1 GOPATH + vendor 时代"></a>0x1 GOPATH + vendor 时代</h3><blockquote>
<p>这段解释 GOPATH 的机制，是为了对比，加深理解。</p>
<p>如果你不想了解已经被抛弃的 GOPATH ，可以直接跳过看 0x2 部分。</p>
</blockquote>
<p>在依赖 GOPATH 的时候，import 的查找范围如下：</p>
<ol>
<li><code>$GOROOT/pkg</code> 查找 <strong>内置包</strong></li>
<li><del>查找 <strong>相对路径</strong> 的包</del></li>
<li>项目根目录下的 vendor 目录查找 <strong>第三方包</strong></li>
<li><code>$GOPATH/src</code> 查找下载的 <strong>第三方包</strong> 和 <strong>本地包</strong>，如果不存在，尝试 <code>go get</code></li>
</ol>
<p>重点解释 2 和 4。</p>
<h4 id="相对路径-import？别用！"><a href="#相对路径-import？别用！" class="headerlink" title="相对路径 import？别用！"></a>相对路径 import？别用！</h4><p>假定有项目 A ，底下有两个包，分别为 A/alpha 和 A/beta。</p>
<p>为了方便，A/alpha 包使用相对路径引入 A/beta：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"../beta"</span></div></pre></td></tr></table></figure>
<p>如果 A 不在 GOPATH 里开发，换言之 A 不会被别的项目引用，那么是可以正常编译执行的。</p>
<p>可是如果 A 在 GOPATH 里开发，那么编译时会报错：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">can<span class="string">'t load package: local import "../beta" in non-local package</span></div></pre></td></tr></table></figure>
<p>这是因为 go 使用全局递归 import，来确保每个用到的包都只 import 一次。（题外话，也因此，go 不允许循环 import，会死循环。）</p>
<p>假定有另一个项目 B，底下的 main 包引入了 A/alpha，那么就会触发以下 import 顺序：</p>
<ul>
<li>import “A/alpha”，递归 import “A/alpha” import 的包<ul>
<li>import “../beta”，（到这里会出错，因为 B 项目下找不到 “../beta”）</li>
</ul>
</li>
<li>运行 “A/alpha” 的 init()，然后 import 完成</li>
</ul>
<p>如果你觉得解释太啰嗦，记住 <strong>别用相对路径</strong> 就完了。</p>
<h4 id="一切靠-GOPATH"><a href="#一切靠-GOPATH" class="headerlink" title="一切靠 GOPATH"></a>一切靠 GOPATH</h4><p>既然相对路径会有各种问题，那么本地包的导入，就只剩下第 4 种 - GOPATH 一条路了。</p>
<p>这就导致了包管理高度依赖 GOPATH：</p>
<ul>
<li>为了本地开发的包 <strong>能被其它包引用</strong>，开发得在 GOPATH 下进行。</li>
<li>不仅引用其他项目包要经 GOPATH，<strong>连项目内的包互相引用</strong> ，也得经过 GOPATH。（实际上这时不存在 <strong>项目</strong> 的概念，即使共享一个项目根目录，还是不同的包。）</li>
<li>项目目录不能改名，一改，项目内外的引用全得改。（事实上，如果你要把项目托管到源码仓库，或者更换托管地址，项目目录是一定会改的。）</li>
</ul>
<p>这么打个比方，李明 爸爸叫 李雷，妈妈叫 韩梅梅，他们一家住 广东省广州市黄埔区。但是很奇怪，他们家互相称呼都得叫全名，而且是带地址那种。譬如 妈妈 喊老伴和儿子吃饭，就得喊『广东省 / 广州市 / 黄埔区 / VK花园10-204 / 李雷』和『广东省 / 广州市 / 黄埔区 / VK花园10-204 / 李明』。更诡异的是，如果他们过年回老家了，譬如说 长沙，然后妈妈忘记了改称呼，还按前面叫，明明都在一屋（项目）里，但他们俩都不知道在喊自己了。</p>
<p>根本原因，在于 import 中只有全局，没有本地（项目 / 模块）概念。全局以下就直接是包，包和包之间没有联系，哪怕我们在一个项目里，目录相邻。</p>
<p>如果你写过 Java，对比一下就发现，Java 的 classpath 默认为 <strong>当前目录</strong>；这个当前目录，是以执行 javac 的位置算的，其实就是项目的根目录。所以同一个项目下的包，用<strong>相对根目录的路径</strong> 就能 import，不管项目整体放哪、项目目录有没有改名。</p>
<h3 id="0x2-引入-module"><a href="#0x2-引入-module" class="headerlink" title="0x2 引入 module"></a>0x2 引入 module</h3><p>module 模式设为 on，背后主要是两个变化：<strong>引入 module （和 module path），放弃 GOPATH （和 vendor）</strong> 。</p>
<p>这个 module 就是介于 global 和 package 之间的概念，是 一系列的 package 集合。这个概念让在一个 module 里的 package 们产生了联系：整体管理， 互相可见。</p>
<h4 id="module-path-和-package-path"><a href="#module-path-和-package-path" class="headerlink" title="module path 和 package path"></a>module path 和 package path</h4><p>package path 具体来说，就是 import 后面那串路径；module path 则对应 require。</p>
<p>在使用上，package path 似乎没有任何变化，其实它的组成有了重要的变化：</p>
<h5 id="GOPATH-模式"><a href="#GOPATH-模式" class="headerlink" title="GOPATH 模式"></a>GOPATH 模式</h5><p>从 <code>$GOPATH/src</code> 起完整的路径。  </p>
<p>例如 <code>$GOPATH/src/github.com/jay/mymod/midware/router</code> 的 package path 是 <code>github.com/jay/mymod/midware/router</code> ，其它包（包括同一个项目<code>github.com/jay/mymod</code> 下的其它包）需要 import 这个路径。  </p>
<p>路径上的 <strong>任何变化</strong> 都要体现在 import 路径里，如果移出 GOPATH 则 <strong>直接找不到</strong> 。（是的，明明引用的包就在旁边目录都找不到。）</p>
<h5 id="module-模式"><a href="#module-模式" class="headerlink" title="module 模式"></a>module 模式</h5><p>module path + module 内的相对路径。（如果 package 在 module 根目录，也就是跟 go.mod 一个目录，当且仅当这种情况 module path 等于 package path。）  </p>
<p>例如 module path 是 <code>github.com/jay/mymod</code> ，module 内的 <code>midware/router</code>  的 package path 是 <code>github.com/jay/mymod/midware/router</code> ，其它包（包括同一个module <code>github.com/jay/mymod</code> 下的其它包）需要 import 这个路径。  </p>
<p>是不是感觉其实没啥差别，只是把路径截成了两段，把前面那段叫 module path。[苦笑]</p>
<p>差别在于：</p>
<ul>
<li>module path 是一个在 go.mod 内的声明，<strong>不需要是真实的路径</strong>。你的 module 可以放在任何地方开发，不需要放在 GOPATH 地下，路径里也不须包含  <code>github.com/jay/mymod</code> ！</li>
<li>基于这点，只要 go.mod 声明不改，<strong>挪位置，根目录重名，都不影响</strong> module 内 package 互相引用！</li>
</ul>
<h4 id="module-间引用"><a href="#module-间引用" class="headerlink" title="module 间引用"></a>module 间引用</h4><p>等等，这些便利都只是 module 内而已，那 module 之间的引用呢？</p>
<p>再来对比一下：</p>
<h5 id="GOPATH-模式-1"><a href="#GOPATH-模式-1" class="headerlink" title="GOPATH 模式"></a>GOPATH 模式</h5><p><strong>项目托管地址、本地存放路径、import 路径</strong> （的开头） 三者一致。  </p>
<p>仍然以上面的项目为例，三个都是 <code>github.com/jay/mymod</code> 。<br>具体到 托管地址是 <code>https://github.com/jay/mymod</code> ，<br>本地存放地址（无论手动新建项目，还是 go get 自动放）是 <code>$GOPATH/src/github.com/jay/mymod</code> ，<br>import 则是 <code>import &quot;github.com/jay/mymod/midware/router&quot;</code> （mymod 下面其中一个 package）。</p>
<h5 id="module-模式-1"><a href="#module-模式-1" class="headerlink" title="module 模式"></a>module 模式</h5><p>在上述三者基础上，加上 go.mod 声明的 module path 一致。   </p>
<p>也就是在 module 初始化时，执行 <code>go mod init github.com/jay/mymod</code> ，生成的 go.mod 里第一行就是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">module github.com/jay/mymod</div></pre></td></tr></table></figure>
<p>托管地址、import 路径都跟 GOPATH 一样。差别是本地存放路径：<code>$HOME/go/pkg/mod/github.com/jay/mymod</code> 。（<code>$HOME/go/pkg/mod</code> 叫 mod cache 目录）</p>
<p><br></p>
<p>看了这个对比，module 模式多了一个 go.mod 的声明要保持一致，存放路径还变长了，是不是又感觉根本没简化，还变复杂了。[苦笑]x2</p>
<p>关键在于，go.mod 里提供了一个关键字 <code>replace</code>。</p>
<h4 id="go-mod-里的-replace"><a href="#go-mod-里的-replace" class="headerlink" title="go.mod 里的 replace"></a>go.mod 里的 replace</h4><p>我们来设想一下 <strong>开发的不同阶段</strong> ：</p>
<ol>
<li><p>前期，<strong>一个人开发原型</strong> 。只有 module 内引用，爱放哪放哪。</p>
</li>
<li><p>继续前期，原型 <strong>新增了一个 mymod2</strong> ，而且 <strong>引用原来的 mymod</strong> ，有了 module 间引用，此时你有 <strong>两个选择</strong>：</p>
<ol>
<li><p><strong>继续随便放</strong> ，譬如 <code>~/mymod/</code> ，然后在 mymod2 根目录执行 <code>go mod edit -replace=github.com/jay/mymod@v=~/mymod@v</code> ，<code>@v</code> 是可选的。  </p>
<p> <code>go mod edit -replace=github.com/jay/mymod=~/mymod</code> 就是所有版本都替换。你也可以指定版本如 <code>@v1.0.1</code> 。</p>
</li>
<li><p>把 mymod 按照 module path  <strong>托管到对应地址</strong> ，mymod2 就会从托管服务下载 mymod 自动存放到 <code>$HOME/go/pkg/mod/github.com/jay/mymod@vX.Y.Z</code> 。下载过程是自动的，存放位置自动跟 “托管地址+版本” 映射，并不需要人工干预。  </p>
<p> <strong>需要注意</strong> 的是，mymod2 引用的是托管的代码，<code>~/mymod/</code> 下的最新修改如果没有push 到托管，是访问不到的。  </p>
<p> 如果 mymod2 后续也要发布或者跟其他开发者协作，<strong>建议一开始就选择这种方式</strong> 提供引用。否则按 2.1 处理，mymod2 在别人的环境无法获取 mymod 的依赖。</p>
</li>
</ol>
</li>
<li><p>中期，<strong>其他开发者加入</strong> 。为了其他开发者可以正常地访问依赖，需要把所有用到的 module 按 module path 放到托管服务上 。（同 2.2）</p>
<p> 托管服务可以是公共的，也可以是私有的。如果是私有的，需要配置 ssh 以达到免密访问。（ssh 配置不展开。）</p>
<p> 考虑到迟早需要发布到托管，最好初始化时就考虑 <strong>把托管地址作为 module path</strong> 。</p>
</li>
<li><p>后期，<strong>持续开发和维护</strong>。也许是 公共转私有（或者反过来，开源），又或者项目改名，或者某个公共托管撂挑子不干了——总之，有些 module 挪位置了。譬如说 <code>https://github.com/jay/mymod</code> 挪到 <code>https://bitbucket.com/jay/mymod</code>。  </p>
<p> 这时 replace 再次发挥作用，在所有引用这个 module 的 module 的根目录执行 <code>go mod edit -replace=github.com/jay/mymod=bitbucket.com/jay/mymod</code> ，那些 import 语句就不用一个一个修改了。  （原理同 2.1 ，只是映射的是 托管地址，不是本地，所以这个修改写入 go.mod 并提交之后， <strong>对其他开发者也能生效</strong> 。）</p>
<p> 不过 mymod 本身，除非你只挪托管不修改 go.mod 的 module path 声明（意味着 mymod 只作为依赖存在，自身没有 main 包需要编译执行），否则 mymod 内部的 import 语句还是得改为新的 module path。</p>
</li>
</ol>
<p><strong>需要注意</strong> 的是，replace <strong>只对当前 module 直接引用的依赖起作用</strong> ，对于间接引用不起作用。如果 mod1 引用 mod2，然后 mod2 引用 mod3；当 mod3 改动地址时，在 mod1 里 replace mod3 的地址，只会对 mod1 直接引用 mod3 起作用； mod2 对 mod3 的引用必须在 mod2 里改。</p>
<p>如果 mod2 是第三方的 module，而它引用的同样是第三方的 mod3 挪了位置之后，mod2 没有及时更新，那么可能你只能 fork 一个 mod2 自行修改了。</p>
<p>这个问题据说可以通过 <strong>自建 goproxy</strong> 来指定重定向解决。我还没到需要用到的时候，将来踩了自建 goproxy 的坑再回来写。</p>
<h3 id="0x3-semver-语义化版本"><a href="#0x3-semver-语义化版本" class="headerlink" title="0x3 semver 语义化版本"></a>0x3 semver 语义化版本</h3><p>要理解 go modules  的运作，还有一个是不得不提的，就是 Semantic Version - 语义化版本，缩写 semver。</p>
<p>关于 semver 是什么，请看 《<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="external">语义化版本 2.0</a>》。</p>
<p>详细的解释，大家自己看官方文档，这里只强调格式：主版本号.次版本号.修订号</p>
<ol>
<li>主版本号：当你做了 <strong>不兼容</strong> 的 API 修改 (<strong>breaking changes</strong>)，</li>
<li>次版本号：当你做了 <strong>向下兼容</strong> 的功能性新增 (<strong>compatible features</strong>)，</li>
<li>修订号：当你做了 <strong>向下兼容的问题修正</strong> (<strong>compatible hotfixs</strong>)。</li>
</ol>
<p>譬如说当前版本号是 v1.2.3 ，在此基础上：</p>
<ul>
<li>fix 了个 bug，没有影响兼容性，v1.2.4</li>
<li>新增 / 改善了功能，依然没有影响兼容性，v1.3.0</li>
<li>任何影响兼容性的修改，无论是 fix bug （这 bug 得多严重），还是 API 签名（名字 or 参数）改动，或者干脆的删掉了 deprecated API，反正调用方会出错，必须跟着修改，v2.0.0</li>
</ul>
<p>一个特例是，主版本号为 0 的版本，被认为是初步开发的 <strong>不稳定版本</strong> ，可以不遵循兼容性的原则。</p>
<p>理解了这些，下面的一些做法就比较好理解了。</p>
<h4 id="导入兼容性原则"><a href="#导入兼容性原则" class="headerlink" title="导入兼容性原则"></a>导入兼容性原则</h4><p>一个 module 一定是 <strong>向下兼容</strong> 的。（又叫向后兼容 backwards compatible，指 newer 的版本兼容 older 的版本）反过来说，如果不兼容，会被视作 <strong>不同的 module</strong> 。</p>
<p>具体操作上，就是 2 以上的主版本号，会加入 module path，使得 <strong>module 声明、导入路径（包括 require 和 import）、缓存路径</strong> 都发生变化，从而被识别为不同的 module。唯独不变的是 托管地址，靠 tag 就可以区分，没有必要每个主版本新建一个项目。还是以 <code>github.com/jay/mymod</code> 为例：</p>
<table>
<thead>
<tr>
<th><strong>主版本号</strong></th>
<th>0 或 1</th>
<th>2 （3 或以上以此类推）</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>module 声明</strong></td>
<td>module github.com/jay/mymod</td>
<td>module github.com/jay/mymod/v2</td>
</tr>
<tr>
<td><strong>require 列表</strong></td>
<td>github.com/jay/mymod v1.0.1</td>
<td>github.com/jay/mymod/v2 v2.0.2</td>
</tr>
<tr>
<td><strong>import 语句</strong></td>
<td>import “github.com/jay/mymod/midware/router”</td>
<td>import “github.com/jay/mymod/v2/midware/router”</td>
</tr>
</tbody>
</table>
<h4 id="选择最新版本"><a href="#选择最新版本" class="headerlink" title="选择最新版本"></a>选择最新版本</h4><p>在同一个主版本下，如果在添加依赖时你没有指定版本（也就是你没有手动 <code>go get github.com/jay/mymod@v1.0.1</code> ，或者只是指定了大版本 <code>go get github.com/jay/mymod@v1</code> 没有指定次版本），那么第一次获取依赖时，go 会自动 <strong>获取最新的版本</strong> 并将版本信息写入 go.mod。</p>
<p>在这之后，除非你手动更新，否则 go 会一直使用 go.mod 记录的版本，不会自动更新。</p>
<h4 id="最小版本选择"><a href="#最小版本选择" class="headerlink" title="最小版本选择"></a>最小版本选择</h4><p>依赖包括 <strong>直接依赖 和 间接依赖</strong>。mod1 依赖了 mod2，然后 mod2 又依赖了 mod3， mod2 是直接依赖， mod3 是间接依赖。间接依赖在 go.mod 里以 <code>//indirect</code> 结尾。</p>
<p>执行 <code>go mod graph</code> 可以输出所有 module 之间的依赖关系。如果项目稍大，内容会很长，长到超出 bash / cmd 的缓冲那种，建议重定向一个文件再搜索。或者 <code>go mod why &lt;package path&gt;</code> 查询某个 package 被谁依赖。</p>
<p>因为有 直接依赖 和 间接依赖，而且对某个 module 的间接依赖可能不止一处，就有可能出现依赖的版本不一致。这种不一致又分两种情况：</p>
<ul>
<li><p>主版本号不同：这个好办，参见上一个小节，主版本号不同直接被认为是不同 module，你依赖你的，我依赖我的，并行不悖。</p>
</li>
<li><p>主版本号相同：选择所有依赖里，<strong>最大的版本号</strong>。  </p>
<p>  例如 同时依赖 v1.0.1、v1.0.2、v1.1.3，那么选择 v1.1.3。因为同一个主版本下是向下兼容的，依赖 v1.0.1 和 v1.0.2 的代码，调用 v1.1.3 也是可以的；反过来说，v1.1.3 里可能增加了新功能，依赖它的地方再去调用老版本，很有可能会报错。  </p>
</li>
</ul>
<h4 id="伪版本"><a href="#伪版本" class="headerlink" title="伪版本"></a>伪版本</h4><p>go module 允许通过 commit-hash 指定版本 （可以通过 hash 前缀指定，有规定最小长度，但我忘了，这是不推荐的做法），但在获取时会自动跟 tag 比对，一旦命中会自动转换成 semver。</p>
<p>如果 module 完全没有打 tag，或者指定的 hash 不命中 tag，go 会生成一个伪版本号来记录，格式是 <code>vX.0.0-yyyymmddhhmmss-12位hash</code>。</p>
<h4 id="incompatible"><a href="#incompatible" class="headerlink" title="+incompatible"></a>+incompatible</h4><p>在 go.mod 里可以看见有些依赖后面带着一个 <code>+incompatible</code> 。这个标记的意思是，依赖的版本在 2 以上，但是这个 module 自身没有使用 module 模式（也就是根目录没有 go.mod），所以无法通过在路径添加版本来区分主版本。</p>
<p>更多版本选择的原理，请参考 《<a href="https://research.swtch.com/vgo-mvs" target="_blank" rel="external">Minimal Version Selection</a>》。</p>
<h2 id="延伸：可重现构建"><a href="#延伸：可重现构建" class="headerlink" title="延伸：可重现构建"></a>延伸：可重现构建</h2><p>Java 从 ant、Maven 到 gradle，Python distutils、setuptools 到 pip，js 的 npm 和 yarn，go 经历了 vgo、glide、dep 到 内置 modules，再加上一系列 VCS 和 托管服务（目前是 git 和 github 统一了江湖），各种构建物仓库。</p>
<p>大家做了那么多工作，设计这么复杂的机制，本质上都是为了一个目的：<strong>构建过程可重复，构建产物可重现</strong> 。</p>
<p>在软件个人英雄主义的时代，这不成问题的，代码是大牛一个人开发的，构建所需要的代码和工具，都在大牛的电脑上。稍往后，多几个人加入，也是在一个公司、一个研究机构里，ftp 共享一下就完事了，最多搭建一个内部的 VCS 服务。</p>
<p>但是在软件开发网络大协作的年代，这就变成了一个工程难题。分布在世界各地，素未谋面的一群人一起开发，很多问题就会涌现。特别是开源的年代，即使是小公司的项目，一个学生的作业，也极少会从零开始开发，你不可避免地会引用其他人的工作成果。</p>
<p>哪怕只是和别人合作过一个简单的项目，你都大概率遇到过『你的代码在我这里 编译不过 / 运行报错。』『不可能，我本地一点问题都没有，是测试过才提交的。』这种对话。</p>
<p>上述那么多的 工具 和 机制，是为了保证分散各处的开发者（可能还有测试、运维团队），能够做到共享 <strong>一致的环境、一致的配置、一致的代码版本，一致的依赖，一致的构建脚本，重现一致的构建过程，得到一致的构建产物</strong> 。</p>
<p>话题很大，不是三言两语能够说清的，就到此为止。提那么一下，是希望帮助理解，为什么把事情搞得那么复杂。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="external">协议</a>的中文摘要。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写 《&lt;a href=&quot;https://jaycechant.info/2020/setup-golang-env-for-1-13-and-above/&quot;&gt;配置 1.13+ 的 golang 环境&lt;/a&gt;》时，花了大量篇幅解释 module 的概念，还有 module 与 package 之间的联系。眼看字数翻了一番，干脆把这部分另起一篇。&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://jaycechant.info/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>配置 1.13+ 的 golang 环境</title>
    <link href="https://jaycechant.info/2020/setup-golang-env-for-1-13-and-above/"/>
    <id>https://jaycechant.info/2020/setup-golang-env-for-1-13-and-above/</id>
    <published>2020-01-20T08:46:44.000Z</published>
    <updated>2020-01-21T15:44:20.688Z</updated>
    
    <content type="html"><![CDATA[<p>以前写过《<a href="https://jaycechant.info/2018/setup-golang-env/">配置 Golang 开发环境</a>》（go &lt; 1.13, win64）。然后 1.13 是一个重大变更，大到需要原有的依赖管理要做迁移的程度（《<a href="https://jaycechant.info/2019/golang-1-13-from-dep-to-mod/">golang 1.13 - 依赖管理从 dep 到 mod 踩坑</a>》）。</p>
<p>1.13 让原来的配置方式有了变化，撇开语言特性不谈，仅说和配置相关的，最大的变化，是 go module 的转正，和 GOPATH 和 vendor 的边缘化（1.13 仍然给你选择的余地，但是推荐选择 module，停用 GOPATH 和 vendor）。</p>
<p>那么如果你从 1.13 之后才刚刚开始接触 go， 那么前面两篇文章对你来说并不友好。</p>
<p>所以我找到了理由又水一篇。</p>
<a id="more"></a>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>之前的文章讲的 Win64 环境的配置，正好新版本重写，这次写 Linux 环境下。</p>
<h3 id="0x00-下载解压"><a href="#0x00-下载解压" class="headerlink" title="0x00 下载解压"></a>0x00 下载解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 为免你无脑复制黏贴，强迫你走一趟流程，也确保你下载最新版本，这不是有效的下载链接，请自行到官网找最新版本，替换掉版本号 x.y.z</span></div><div class="line">~ wget https://dl.google.com/go/gox.y.z.linux-amd64.tar.gz</div></pre></td></tr></table></figure>
<p>找下载链接请到官网 golang.org/dl ，如果国内不能访问，请到官方镜像站 golang.google.cn/dl 。</p>
<p>然后解压</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 记得改文件名里的 x.y.z</span></div><div class="line">~ tar -zxvf gox.y.z.linux-amd64.tar.gz</div><div class="line">mv -t /opt/ go</div></pre></td></tr></table></figure>
<p>个人习惯放到 /opt/ 下。</p>
<h3 id="0x01-系统环境变量"><a href="#0x01-系统环境变量" class="headerlink" title="0x01 系统环境变量"></a>0x01 系统环境变量</h3><p>然后将可执行文件加入系统路径。</p>
<p>在 <code>/etc/profile</code> 末尾加上，保存之后记得 source 一下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># manually added</span></div><div class="line">GOROOT=/opt/go</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin:<span class="variable">$HOME</span>/go/bin</div></pre></td></tr></table></figure>
<p>我是想全局生效所以丢这里，如果你只是想当前账户生效，可以加在 <code>~/.bashrc</code>。</p>
<p>惯例地检查一下是否配置正确</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~ go version</div><div class="line">go version go1.13.6 linux/amd64</div></pre></td></tr></table></figure>
<p>如果不能正确执行 <code>go version</code> ，把当前版本输出，请回头检查哪里出错。</p>
<p>跟老版本不同的是，只要把 go 本身的可执行路径 和 go bin 的安装路径加入 PATH 就可以了，剩下的 go env 自行管理了。</p>
<h3 id="0x02-go-env"><a href="#0x02-go-env" class="headerlink" title="0x02 go env"></a>0x02 go env</h3><p>执行 <code>go env</code>，就会看到 go 内置的环境变量，以及部分默认值</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">go env</div><div class="line">GO111MODULE=<span class="string">""</span></div><div class="line">GOARCH=<span class="string">"amd64"</span></div><div class="line">GOBIN=<span class="string">""</span></div><div class="line">GOCACHE=<span class="string">"/home/jaycechant/.cache/go-build"</span></div><div class="line">GOENV=<span class="string">"/home/jaycechant/.config/go/env"</span></div><div class="line">GOEXE=<span class="string">""</span></div><div class="line">GOFLAGS=<span class="string">""</span></div><div class="line">GOHOSTARCH=<span class="string">"amd64"</span></div><div class="line">GOHOSTOS=<span class="string">"linux"</span></div><div class="line">GONOPROXY=<span class="string">""</span></div><div class="line">GONOSUMDB=<span class="string">""</span></div><div class="line">GOOS=<span class="string">"linux"</span></div><div class="line">GOPATH=<span class="string">"/home/jaycechant/go"</span></div><div class="line">GOPRIVATE=<span class="string">""</span></div><div class="line">GOPROXY=<span class="string">"https://proxy.golang.org,direct"</span></div><div class="line">GOROOT=<span class="string">"/opt/go"</span></div><div class="line">GOSUMDB=<span class="string">"sum.golang.org"</span></div><div class="line">GOTMPDIR=<span class="string">""</span></div><div class="line">GOTOOLDIR=<span class="string">"/opt/go/pkg/tool/linux_amd64"</span></div><div class="line">GCCGO=<span class="string">"gccgo"</span></div><div class="line">AR=<span class="string">"ar"</span></div><div class="line">CC=<span class="string">"gcc"</span></div><div class="line">CXX=<span class="string">"g++"</span></div><div class="line">CGO_ENABLED=<span class="string">"1"</span></div><div class="line">GOMOD=<span class="string">""</span></div><div class="line">CGO_CFLAGS=<span class="string">"-g -O2"</span></div><div class="line">CGO_CPPFLAGS=<span class="string">""</span></div><div class="line">CGO_CXXFLAGS=<span class="string">"-g -O2"</span></div><div class="line">CGO_FFLAGS=<span class="string">"-g -O2"</span></div><div class="line">CGO_LDFLAGS=<span class="string">"-g -O2"</span></div><div class="line">PKG_CONFIG=<span class="string">"pkg-config"</span></div><div class="line">GOGCCFLAGS=<span class="string">"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build089244508=/tmp/go-build -gno-record-gcc-switches"</span></div></pre></td></tr></table></figure>
<h4 id="必改"><a href="#必改" class="headerlink" title="必改"></a>必改</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~ go env -w GO111MODULE=on</div><div class="line">~ go env -w GOPROXY=https://goproxy.cn,direct</div></pre></td></tr></table></figure>
<p><strong>GO111MODULE</strong> : </p>
<ul>
<li>auto : 自 1.11 实验性加入之后就是默认值。auto 意味着由工具链自动判断是否启用 go modules。在 1.13 以前的启用条件是『项目根目录有 go.mod 且项目不在 GOPATH 内』，1.13+ 去掉了 『不在 GOPATH 内的限制』，也就是只要有 go.mod 就会启用。</li>
<li>on : 如果你觉得上面这段话太长懒得看，或者害怕以后启用条件还会变，那么 1.13 已经准备好全面启用 go modules，直接设为 on 就好了。设为 on 之后无条件启用 go modules。</li>
<li>off :  关闭 go modules，回到 GOPATH 时代。</li>
</ul>
<p><strong>GOPROXY</strong> :</p>
<p>国内环境必备，原因你懂的。甚至可以说这是新版本为中国开发者做出的最大改进之一也不为过。在 dep 的时代是靠自建的代理熬过来的，那么不会代理的朋友就很麻烦了。改用镜像就友好太多了。</p>
<p>目前国内最早最好的代理是 七牛云提供的 <code>https://goproxy.cn</code> 。如果团队内部还有搭建私有代理，可以用 <code>,</code> 隔开，go 会依次尝试。最后记得加上 <code>direct</code> ，让镜像上找不到的依赖回源查找。（包括但不限于 镜像还没同步，私有仓库 等情况）</p>
<p>目前自建代理的开源方案貌似有以下几个。由于我暂时没有自建代理的需要，没有实测，请自行对比选择。</p>
<ul>
<li><a href="https://github.com/goproxyio/goproxy" target="_blank" rel="external">https://github.com/goproxyio/goproxy</a></li>
<li><a href="https://github.com/gomods/athens" target="_blank" rel="external">https://github.com/gomods/athens</a></li>
<li><a href="https://github.com/goproxy/goproxy" target="_blank" rel="external">https://github.com/goproxy/goproxy</a></li>
</ul>
<h4 id="推荐改"><a href="#推荐改" class="headerlink" title="推荐改"></a>推荐改</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~ go env -w GOBIN=<span class="variable">$HOME</span>/go/bin</div></pre></td></tr></table></figure>
<p><strong>GOBIN</strong> 如果没有设置，默认值为 <code>$GOPATH/bin</code> ，是通过 <code>go get</code> 或 <code>go install</code> 安装的可执行文件的存放目录。不设并不影响使用，但考虑到 GOPATH 正在被边缘化，未来不知道哪个版本就取消了，所以建议还是单独设置一下比较好。我为了保持使用习惯，设置了跟默认相同的目录（因为 GOPATH 默认值是 <code>$HOME/go</code>），区别只是这个值不依赖 GOPATH 的值。</p>
<p>值得 <strong>提醒</strong> 的是，这个目录也需要加入系统 PATH ，并且我已经在 系统环境变量 里加入（最后一个），如果你根据自己的习惯修改了 GOBIN 的位置，那么 0x01 里的配置也得相应修改。</p>
<p>更多的变量，推荐参考 《<a href="https://mp.weixin.qq.com/s/AsdCDodxZFxs2SkhSwOvpg" target="_blank" rel="external">干货满满的 Go Modules 和 goproxy.cn</a>》。</p>
<h3 id="0x03-cgo-和-build-tool"><a href="#0x03-cgo-和-build-tool" class="headerlink" title="0x03 cgo 和 build tool"></a>0x03 cgo 和 build tool</h3><p>go 语言的 cgo 特性允许 C 语言 和 go 语言互调，达到 <strong>复用已有的 C/C++ 庞大代码资源</strong> 的目的；又或者用 C 编写程序的一部分以达到某些 底层语言才能达到的目标。而要使用 cgo 特性，就需要有 C/C++ 的构建工具链 <strong>gcc</strong> 。</p>
<p>另一方面，随着项目规模变大，你会逐渐需要一个 <strong>构建工具</strong> （build tools）帮你管理构建细节，就像 ant / maven / gradle 之于 Java。由于 go 本身的构建比较简单（或者说 go 的构建规则比较清晰，自带的 build 命令够用），又有了现成的依赖管理（之前的 vgo / glide / dep，现在官方的 go modules），官方并没有一个专用的构建工具。这部分，因为依赖管理已有，管理额外的构建细节， <strong>Makefile (make) 足矣</strong> 。</p>
<p>gcc 和 make 在多数 Linux 发行版是自带的，你可以通过  <code>gcc -v</code> 和 <code>make -v</code> 来确认安装的版本。即使没有，视乎不同的包管理器，也就是一两句命令的事。Windows 下稍微麻烦一些，但仍然有解决方案，我在《<a href="https://jaycechant.info/2018/setup-golang-env/">配置 Golang 开发环境</a>》#2. gcc 和 make 部分有提及，go 的重大升级不影响这部分内容依然有效。</p>
<h3 id="0x04-安装-VCS"><a href="#0x04-安装-VCS" class="headerlink" title="0x04 安装 VCS"></a>0x04 安装 VCS</h3><p>在使用 go get 命令之前，需要安装依赖托管服务对应的 VCS （Version Control System）。go get 会根据依赖所托管的网站反馈的信息，调用对应的工具 （git / hg / svn）拉取依赖。</p>
<p>就我的个人实践而言，绝大多数的第三方依赖都是基于 git 发布的（或者说直接就是放在 github 上），所以 <strong>直接安装 git 就好</strong> ，后面遇到基于其他工具的依赖，再安装不迟。</p>
<p>由于 git 本身就是一个大话题，基本的安装使用教程不难搜到，有时间时会另起文章讨论，这里只是提醒安装，不再展开。</p>
<h3 id="0x05-开始一个项目"><a href="#0x05-开始一个项目" class="headerlink" title="0x05 开始一个项目"></a>0x05 开始一个项目</h3><p>终于把环境都配置好了，然后就可以开始第一个 go 的项目了。由于 go modules 不再依赖 GOPATH，所以项目可以放在任何地方——这个 『任何』，是指可以不是 GOPATH ，但是要是习惯了，继续放在 <code>$GOPATH/src</code> 也没问题。</p>
<p>好了，不管放在哪，现在新建一个项目的根目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~ mkdir testproj</div><div class="line">~ <span class="built_in">cd</span> testproj</div></pre></td></tr></table></figure>
<p>然后执行 <code>go mod init &lt;module_path&gt;</code> ，生成 go.mod ，这个项目就算初始化完了，接下来就该敲代码了。随着开发的进行，还会自动生成 go.sum 文件，记录依赖的校验信息。注意 go.sum <strong>不是 lock 文件</strong> ，重现构建的信息已经包含在 go.mod 里，go.sum <strong>属于 checksum 文件</strong> ，用来 <strong>确保下载的依赖没有被篡改</strong> 。 go.mod 和 go.sum 需要一起提交<strong>参与版本控制</strong> 。关于 <code>go mod</code> 的详细用法，可以直接 <code>go help mod</code> 获取帮助信息，不展开。</p>
<p>关于 module path 的内容，以及 module 与 package 之间的关系，原本是在这篇文章里接着继续写；结果发现这部分内容让字数足足翻了一番。为了避免让本文又臭又长，就另起了一篇文章，请看《<a href="https://jaycechant.info/2020/golang-1-13-module-VS-package/">golang 1.13 - module VS package</a>》。</p>
<p>go 语言开发不是（篇幅上也不可能是）本文的话题，另起系列展开。</p>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>在写这篇文章时，留意到 gradle 的一个插件 <strong>gogradle</strong>，可以为 gradle 添加对 go 的支持。由于我没有使用过这个插件，所以不好评价；不过基于以下理由，我认为除非有什么困难只有它能解决，不然 make 足以完成绝大多数的任务，不推荐尝试：</p>
<ul>
<li>go 除了某些特性（如 cgo）编译时依赖某些二进制工具（如 gcc，二进制是区别于基于虚拟机的工具），基本是一个完全自给自足的语言，环境配置简单且基本一劳永逸，编译结果可以单执行文件零依赖部署，在某些情况下简直是杀手级的特性。（想想 C/C++ 以外多少语言能做到）而 gradle 是基于 groovy （一种 JVM 上的脚本语言），等于 <strong>给 go 的开发环境引入了 JVM 依赖</strong> 。即使我作为一个长期写 Java 的人，环境里一定有 JVM，仍然觉得这种依赖是别扭的。</li>
<li>gogradle 官方文档自荐的理由，是 make 学习曲线陡峭，和 make 基于 bash 的跨平台性不好。make 和 gradle 的学习曲线见仁见智，但是由于 go 自带的 build 已经完成了构建的大多数工作（包括依赖推导和文件新旧比较），也不需要处理依赖管理，make 的 <strong>工作任务非常轻</strong> ， 不会涉及太复杂的规则编写。至于跨平台，引入 MinGW-w64 已经可以解决大多数的问题。</li>
<li>go 1.13 自带 go modules 作为依赖管理，大方向是 <strong>淡化 GOPATH 和 vendor</strong>；而 gogradle 受 glide 启发，自带依赖管理，自称相当于 glide + make，依然使用 GOPATH 和 vendor，这 <strong>跟官方的发展方向冲突</strong> 。这可能是最关键的一点，如果你习惯了 gradle 的工作方式，有一天这种工作方式可能跟官方的最新版本不兼容。</li>
</ul>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="external">协议</a>的中文摘要。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前写过《&lt;a href=&quot;https://jaycechant.info/2018/setup-golang-env/&quot;&gt;配置 Golang 开发环境&lt;/a&gt;》（go &amp;lt; 1.13, win64）。然后 1.13 是一个重大变更，大到需要原有的依赖管理要做迁移的程度（《&lt;a href=&quot;https://jaycechant.info/2019/golang-1-13-from-dep-to-mod/&quot;&gt;golang 1.13 - 依赖管理从 dep 到 mod 踩坑&lt;/a&gt;》）。&lt;/p&gt;
&lt;p&gt;1.13 让原来的配置方式有了变化，撇开语言特性不谈，仅说和配置相关的，最大的变化，是 go module 的转正，和 GOPATH 和 vendor 的边缘化（1.13 仍然给你选择的余地，但是推荐选择 module，停用 GOPATH 和 vendor）。&lt;/p&gt;
&lt;p&gt;那么如果你从 1.13 之后才刚刚开始接触 go， 那么前面两篇文章对你来说并不友好。&lt;/p&gt;
&lt;p&gt;所以我找到了理由又水一篇。&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://jaycechant.info/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>S/L 大法 —— 平凡人的做事方法</title>
    <link href="https://jaycechant.info/2020/save-load-a-solution-for-ordinary-people/"/>
    <id>https://jaycechant.info/2020/save-load-a-solution-for-ordinary-people/</id>
    <published>2020-01-01T16:41:47.000Z</published>
    <updated>2020-01-02T15:38:01.467Z</updated>
    
    <content type="html"><![CDATA[<p>博客和公众号改名了，改成了同一个。</p>
<p>这事儿值得说一下。</p>
<a id="more"></a>
<h2 id="壹"><a href="#壹" class="headerlink" title="壹"></a>壹</h2><p>最早在网上写字儿，得从 06 年 QQ 空间算起。中二少年，为赋新词强说愁。</p>
<p>在其他少年努力花钱让 Q-ZONE 更炫时，我想办法让它不那么晃眼，别抢文字的风头。后来百度空间出来了，支持自定义样式（CSS）。不花钱，风格却有更大自由度，于是逐渐挪了过来。高中为此专门自学 CSS 。大学时的师兄据说因为我会 CSS 把我招进 团委网络部，又是一段经历；可惜后面一直做后端，基本再也没有做前端 。</p>
<p>然后专门开了一个新的百度空间叫『片言断章』放那段时间酸腐的 诗词，开了一个新浪博客写游戏，在辩论队搞了一个网易群博 …… 毕业前搞了一个 Octopress 。</p>
<p>然后微博来了，没那么多人写博客了；再往后是微信，然后公众号。潮流一波一波来了又走，每次都是狂欢；而我，别说写出个名堂，那点字数，对自己都没法交代。对了，后来我也开了公众号。</p>
<h2 id="贰"><a href="#贰" class="headerlink" title="贰"></a>贰</h2><p>Octopress 托管在 Github pages 上，后来生成工具换成了 Hexo （插一句，如果你现在弄的话，推荐 Hugo），绑了自己的域名 <a href="https://jaycechant.info">https://jaycechant.info</a> 。在主动关了 Q-ZONE，百度空间 服务被下线之后，这里是写字最多的地儿了。因为源码在自己手，别说 Github 很难关门，就算它关了 pages 服务，静态页面放哪不行，这儿写的东西，能一直留住。</p>
<p>这个内容最多的博客，叫 『Jayce 的技术博客』，直白得没有解释的需要。之所以这么叫，除了当初想名字时偷懒，可能还存在一点人设幻想，希望读者有清晰的主题预期，好吸引同好：这里 Geek 风写技术，那里文艺风写诗（彼时『片言断章』还在），这个语言活泼写游戏 …… 当然，事实证明想得太多，都是挖坑不填。</p>
<p>应该先尝试写好一个博客。如果有一天，某个主题的文章已经多到和原来的博客格格不入，让读者发生困扰了，这时还有余力，就可以考虑新开一个，相关主题都挪过去。文章没几篇，既没有形成自己的风格，也没有读者群体，瞎操心。过早优化 都是瞎折腾。</p>
<p>不过就算是专注于写技术，这名字也没提供任何信息量。</p>
<h2 id="叁"><a href="#叁" class="headerlink" title="叁"></a>叁</h2><p>公众号的名字叫 『JayceIO』。 Jayce 是我名字，IO 是 Input / Ouput ，原意是 『以知识的输出促进输入』。当然，也可以事后诸葛地说，IO 像 1 和 0 ，IO 是致敬 Google I/O 的 『Innovation in Open』（开放中创新）。</p>
<p>公众号上只有 6 篇文章，而且都是旧文，没有一篇是专为公众号写的；就这样，排版就费了老大的劲，在 10 天冲刺拿到了原创认证之后，就泄了气，一停更就是一年。</p>
<p>写得这么少，懒，时间管理又差，当然是首要原因，得认。公众号出于它自身的考虑，功能做了很多限制，也给新手制造了一些难度。</p>
<h2 id="肆"><a href="#肆" class="headerlink" title="肆"></a>肆</h2><p>如果早些年，发现自己这么不争气，大概会给自己定一系列目标，列个详细计划，自灌几碗鸡汤，打几针鸡血。短期内狂飙一波，然后无法坚持，慢慢松懈，甚至比原来更糟。不仅写博客这样，很多事情都是这样运动式反复 —— <strong>码字只是困境的一个缩影。</strong></p>
<p>这些年过去，开始跟自己和解，不再跟人性作对。不再简单地强迫自己，开始去思考：<strong>做这件事初衷是什么？ 为什么没能做下去？ 阻力来自外部还是内部？ 是内心不愿意，还是害怕些什么？</strong></p>
<p>问初衷，是看这件事在当下是否依然有价值。</p>
<p>阻力来自外部，那就想办法绕过它，降低它；绕不过，降不了，就跟价值比较一下，是否值得，是不是时机不对。</p>
<p>这些都相对容易理清。难测的是心魔。</p>
<p>如果潜意识不想做这件事，或者害怕些什么，靠鸡血也许可以勉力『坚持』着；但这种坚持，需要消耗额外的注意力，去不断提醒自己。时间已经够宝贵了，注意力则是比时间更宝贵的资源，人没办法一直保持清醒，而即使是清醒时也未必能一直保持专注。有一天你太累了，或者突如其来的意外打乱了计划，那脆弱的『坚持』就会不堪一击。</p>
<p>如果是喜欢做一件事，本身是不需要坚持的。想想那些在被窝里打灯看小说的日子，想想年少时半夜翻墙去游戏厅、去网吧。</p>
<h2 id="伍"><a href="#伍" class="headerlink" title="伍"></a>伍</h2><p>玩过单机游戏的大概会知道 S/L 大法。</p>
<p>S/L 是 Save &amp; Load 的缩写，就是存档 / 读档大法。在艰难的关卡、BOSS 之前存个档，如果输了或者结果不好，读档再来。甚至在一些随机事件之前存档，譬如一个抽奖事件，本来只有 1% 的机会可以得到最好的奖品，用了 S/L 之后，只要你愿意耗，理论上一定能拿到。有些游戏一个选择能影响后面很久远的结果，那就存很多个档，不覆盖旧档；发现选错了，总能读到一个做选择之前的。</p>
<p>做到这种程度，在游戏设计者眼里，大概算是作弊了（所以才会有些游戏只许存一个档，而且重要事件过后自动保存覆盖）。努力提升游玩水平，一口气通关的体验多好。如果不慎进了糟糕的剧情分支，那就重头再来嘛，设计者鼓励你多体验不同故事线。</p>
<p>可我游戏水平不高，又没有那么多时间一次次重头再来，只好用这种办法，尽量往希望体验的游戏结局靠拢。</p>
<h2 id="陆"><a href="#陆" class="headerlink" title="陆"></a>陆</h2><p>生活与游戏有相似的地方。</p>
<p>我当然希望自己是个天选之子（难道你不曾想过？）。我也说过『长大要当科学家』，也曾烦恼过将来长大了应该报清华还是北大。新手村太容易，让我以为可以 一命、无伤、全成就收集、满分 拿到 Best Ending 。</p>
<p>然而世界服从正态分布，大多数人都是普通人，很快就卡关了。这时偷瞄一下周围的人，却有人遥遥领先，甚至已经通关——还很轻松的样子。</p>
<p>你身边也总能找到这些人，他站在了你无法想像路径的悬崖峭壁之上。</p>
<p>不，我没有强调悬崖的高度，我强调的是险，是无路可达。再高的山，只要给了路线，给了阶梯，山顶就是可以想像的，无论是笨鸟先飞，还是愚公移山。可他好像省略了过程，直接出现在无路峭壁顶上。你会想， <strong>这种事情，我大概是做不来的。</strong> 我只会走，又不会飞。 <strong>大概是天赋的差异。</strong></p>
<h2 id="柒"><a href="#柒" class="headerlink" title="柒"></a>柒</h2><p>有些事情，我到了后来才慢慢懂得。</p>
<p>那些惊世的画作，看 X 光扫描，原来也是打了草稿，反复纠结，反复修改。</p>
<p>那些浑然天成，没有半分修改余地的句子，等到公布作者原稿，原来也是在你我都能买到的普通稿纸上，涂涂抹抹出来的。</p>
<p>那些功能无比强大的开源软件，如果你愿意翻看提交历史，原来也是这么一行一行改了又改，偶尔重写把某块推倒重来，从很可能只是原作者的一时兴起，变成了今天的庞然大物。</p>
<p>……</p>
<p><strong>他们从来就不是突然出现在崖顶。只是走过的路，他们反反复复试错的痕迹，被隐去了。</strong></p>
<p>大多数人无意隐藏这点，只是他们没有机会说起，你也没有机会问，没有近距离去看。</p>
<p>这是生活中的 S/L 大法。</p>
<h2 id="捌"><a href="#捌" class="headerlink" title="捌"></a>捌</h2><p><strong>Q: 写博客初衷是什么？</strong></p>
<p>A: <strong>记录</strong>。<br>后来可能逐渐冒出诸如 与人交流、博得名气 等等越来越不靠谱的想法。<br>但最初，只是想记录走过的路，给未来的自己，提供一个坐标。<br>这个出发点，现在仍然具有意义。（或者说，随着儿子的出生，更有意义了！）</p>
<p><strong>Q: 为什么没能写下去？阻力在外部还是内部？</strong></p>
<p>A: 初期遇到困难，容易归结为外因。譬如说工作忙，譬如说工具不好用。但当把这些外因都改善乃至解决掉之后，事情仍然僵持，我就知道原因不在外部，起码不是关键。</p>
<p><strong>Q: 内心在抗拒记录吗？还是在害怕什么？</strong></p>
<p>我不抗拒记录。在回顾过去的时候，还往往遗憾当时做的记录太少。<br>准确地说，我在焦虑。</p>
<p>我在害怕自己写得不够好。明明只是写给自己看的记录，却过早萌生了杂念。明明并没有什么读者，却总觉得有眼睛在看着我，有着作者的包袱。</p>
<h2 id="玖"><a href="#玖" class="headerlink" title="玖"></a>玖</h2><p>我是一个缺乏安全感的人，总是感觉只有这一次尝试机会，而我很可能会把事情搞砸。于是总是处在一种『做好万无一失准备』的状态中——仿佛只要不轻易地开始，就没有人可以宣布我失败。</p>
<p>具体到生活中，就会表现为 完美主义、强迫症、拖延症。出门前要数几次随身物品；在重要事件前很可能会失眠；会梦到人生中经历过的人生节点，然后在梦里把它搞砸了——最常见的是考试，醒来之后庆幸自己不用重新经历。</p>
<p>具体到码字上，明明还在写，却忍不住冒出想象中读者的评价，去打断作为作者的思路。害怕『半成品』展现在他人面前，害怕会因此自我降低标准，或者让大家觉得你水平不过如此；但另一方面，也不知道『成品』该是什么样子，如果成果一直漂浮不落地，就如同从来没有过成果，大家、以及未来的自己，也无从去判断，没有记录，也就没有了进步的基线（Baseline）。</p>
<p>公众号的规则（每天只能发一篇，发了之后不允许修改）强化了只有一次机会的恐惧。这也是为什么虽然还是很少， Github pages 还是有几十篇水文，而公众号发旧文勉强坚持到拿到原创认证就放弃了。</p>
<p><strong>码字不过是烦恼的一个缩影。</strong></p>
<p>从不开始确实躲开了失败——但机会有其时效，成功的可能也随之流逝。</p>
<p>我并非一开始就想明白这些，而是过去的十多年，经历了一些事情，发现自己有轻微的强迫症，而且很容易焦虑。<br>中间经历过各种与自己、与父母、与爱人的对话，有过冲突、不解、歇斯底里，从对抗、到尝试接纳、和解。其中滋味，不足为外人道，只道天凉好个秋。特别感谢一直陪伴我多年的女友——现在是妻子和孩子他妈，在最艰难的时候，都没有放弃过我。</p>
<h2 id="拾"><a href="#拾" class="headerlink" title="拾"></a>拾</h2><p>与其简单粗暴地当自己的暴君，下达永远不可能完成的 KPI，不如好好跟自己谈谈，对症下药。 </p>
<ul>
<li>尽量在固定时间抽空写一小段，先不要求多少，养成习惯。</li>
<li>用 Markdown 写原稿，用排版插件自动排版，不搞花里胡哨，不增加排版负担。</li>
<li>既然原稿是纯文本，版本控制必须有，写乱了甚至全删了都可以读档重来。</li>
<li>先发 Github pages 再转到公众号，给自己修订的机会。</li>
<li><strong>改名</strong>。</li>
</ul>
<p>既然害怕搞砸，与其跟自己对抗，不如在技术手段上让自己不会搞砸——起码不可能全部搞砸。S/L 大法任意折腾的资本，在于那个存档。感谢 git ，起码在电子文档上，给了我们 S/L 大法的利器。</p>
<p>技术上做到了，名字也很重要。<strong>名不正则言不顺，言不顺则事不成。</strong> 有句话说，命名是程序员最头疼的两件事之一（变量、函数、类 等等，都要命名）。我认为这不是一句玩笑——命名是概念模型的外在体现，命名不对，意味着还没想透彻。</p>
<p>我花了一些时间梳理想法，也和朋友讨论过。一开始想就叫 『S/L 大法』，但是在很多地方，斜杠都是一个麻烦。最后定了现在的名字 『存档 Save &amp; Load』。</p>
<ul>
<li><p>首先明确了博客的性质， <strong>这是我的一份存档</strong> ，是回头看时的路标。不再以内容区分。无论是技术上的记录，让我不用解决重复的问题；还是生活记录和感悟，让我日后记得。在存档的意义上，并无差别。</p>
</li>
<li><p>其次用博客名提醒自己， <strong>做事有存档，搞砸了不过回到上一个存档</strong> ，不是清零重来，不必焦虑。</p>
</li>
<li><p>第三层意思，是希望以此为契机，摸索出一套易于遵循的做事方法，让像我这样资质平庸而又焦虑的人，减轻注意力负担——包括但不限于码字和写代码——姑且称之为『S/L 法』。以目前我的理解，可能会以纯文本文档记录 + 版本控制 作为技术基础，日后可以尝试梳理这方面的内容。</p>
</li>
</ul>
<p>既然我在这个问题上纠结过思考过， <strong>以蚌之痛，育彼珍珠</strong> ，能结出一些成果当然最好。 不过第三点只是一个延伸，是更长远的事情，留个可能性，不强求。没什么野心，不要想太多，单纯的记录，反而更有可能做好。</p>
<p>希望以博客为起点，我能在做不同的事情上，掌握（各种意义上）存档的技巧，出错了读档重来。时间和注意力放在『新关卡』的尝试上，胜过耗在对清零的恐惧上。既然时间不多，能前进一点是一点。</p>
<hr>
<p>P.S. 此文发端于 2019 年 3 月 5 日博客改名前，结果后面因为 赶项目、娃早产、家里装修，一直拖到现在。如果你读完了，你会知道，我并不责备自己，而是感激自己还能继续写完——用正面情绪激励，而非用负面情绪惩罚。我并非思路清晰了，才开始落笔；恰恰是行文至此，思路才算逐渐清晰，后续不排除继续修改，或另起一文。</p>
<p>P.S. 2 再次感谢我的爱人一直以来的理解和陪伴。她其实是个容易不耐烦的暴脾气，正因如此，在那些艰难时刻超乎寻常人的耐心，显得更加难能可贵。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-禁止演绎” 4.0 (CC BY-NC-ND 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-禁止演绎” 4.0 (CC BY-NC-ND 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，原文引用（不可发布基于本作品的二次创作），不得用于商业用途。谢谢合作。<br>请点击查看<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">协议</a>的中文摘要。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客和公众号改名了，改成了同一个。&lt;/p&gt;
&lt;p&gt;这事儿值得说一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://jaycechant.info/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>golang 1.13 - 依赖管理从 dep 到 mod 踩坑</title>
    <link href="https://jaycechant.info/2019/golang-1-13-from-dep-to-mod/"/>
    <id>https://jaycechant.info/2019/golang-1-13-from-dep-to-mod/</id>
    <published>2019-10-16T16:37:07.000Z</published>
    <updated>2020-01-07T16:47:44.091Z</updated>
    
    <content type="html"><![CDATA[<p>接触 golang 很晚，实际用来开发大概在 1.9 左右，所以我的主要印象是在 1.9 、 1.10 上的，依赖管理经过一些尝试之后，选择了 『官方』（后来实际被抛弃了）的 dep（<a href="https://jaycechant.info/2018/glide-from-start-up-to-give-up/">《golang 依赖管理：glide 从入门到放弃》</a>）。<br><!-- https://mp.weixin.qq.com/s/dWDfu_9sV5WSkF9h27E4uA --></p>
<p>后来 1.11、1.12 推出了 module （亦即 go mod 命令），考虑到尚不稳定又有切换成本，就继续留守在 vendor 目录上。</p>
<p>2019 年 9月终于 1.13 出来了，做了几个比较大的改动，同时 module 也终于转正，所以我终于下定决心迁移到 1.13，并改用 mod 做依赖管理。</p>
<a id="more"></a>
<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>迁移过程主要参考了<a href="https://mp.weixin.qq.com/s/AsdCDodxZFxs2SkhSwOvpg" target="_blank" rel="external">《干货满满的 Go Modules 和 goproxy.cn》</a>（实操主要是 <strong>#快速迁移项目至 Go Modules</strong> 部分），讲得非常清楚，也推荐大家参考，一些细节就不再赘述，只强调我踩坑的地方。</p>
<p>简单来说是这么个过程：</p>
<ul>
<li><p>卸载原有的 go，并下载安装 1.13 版本。  </p>
<p>  官网 golang.org 因为是谷歌的服务器，也在屏蔽之列，部分同学可能连访问这个都有困难，其实国内有官方的镜像站 golang.google.cn 。</p>
</li>
<li><p>用 <code>go env -w</code> 重新设置你的环境变量 。  </p>
<p>  注意 go env 的内容保存在 <code>$HOME/.config/go/env</code> ，不会覆盖原来的系统环境变量。在读取环境变量时， go env 的值优先。为了避免后续增加判断环境变量的负担，建议 go env 里有的、只有 go 会读取的环境变量，在系统环境变量里删除。  </p>
<p>  因为国情特殊，一定要设置 GOPROXY。</p>
</li>
<li><p>针对依赖工具和项目情况迁移（以下主要讲这部分的坑）。因为我之前用的是 dep，下面全部是关于从 dep 的迁移。</p>
</li>
</ul>
<p>特别提一下一个细节，在安装好的 1.13 下获取 <code>mod</code> 子命令的帮助，下面有一段提醒：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;go <span class="built_in">help</span> mod</div><div class="line">Go mod provides access to operations on modules.</div><div class="line"></div><div class="line">Note that support <span class="keyword">for</span> modules is built into all the go commands,</div><div class="line">not just <span class="string">'go mod'</span>. For example, day-to-day adding, removing, upgrading,</div><div class="line">and downgrading of dependencies should be <span class="keyword">done</span> using <span class="string">'go get'</span>.</div><div class="line">See <span class="string">'go help modules'</span> <span class="keyword">for</span> an overview of module functionality.</div></pre></td></tr></table></figure>
<p>大意渣翻：</p>
<blockquote>
<p>注意对 modules 的支持已经内建在所有 go 子命令内，而不仅仅是 ‘go mod’ 。</p>
<p>举例说，每天添加、移除、升级、降级依赖，都应该使用 ‘go get’ 完成。</p>
</blockquote>
<p>也就是说所有跟依赖管理相关的命令，譬如 <code>go get</code> ，都是用新逻辑在处理。</p>
<h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><h3 id="坑01：GOPROXY-特定情况不起效"><a href="#坑01：GOPROXY-特定情况不起效" class="headerlink" title="坑01：GOPROXY 特定情况不起效"></a>坑01：GOPROXY 特定情况不起效</h3><p>本来直接在项目根目录敲 <code>go mod init &lt;mod_path&gt;</code> ，是可以自动从 <code>Gopkg.toml</code> 和 <code>Gopkg.lock</code> 导入依赖信息，自动完成迁移的。但是在国内直接这样做是会出错的，部分包获取超时（留意 <code>golang.org/x/</code> 开头的包）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt;go mod init myapp</div><div class="line">go: creating new go.mod: module myapp</div><div class="line">go: copying requirements from Gopkg.lock</div><div class="line">go: converting Gopkg.lock: <span class="built_in">stat</span> github.com/360EntSecGroup-Skylar/excelize@v2.0.0: github.com/360EntSecGroup-Skylar/excelize@v2.0.0: invalid version: module contains a go.mod file, so major version must be compatible: should be v0 or v1, not v2</div><div class="line">go: converting Gopkg.lock: <span class="built_in">stat</span> golang.org/x/text@v0.3.0: unrecognized import path <span class="string">"golang.org/x/text"</span> (https fetch: Get https://golang.org/x/text?go-get=1: dial tcp 216.239.37.1:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time,</div><div class="line">or established connection failed because connected host has failed to respond.)</div><div class="line">go: converting Gopkg.lock: <span class="built_in">stat</span> gopkg.in/russross/blackfriday.v2@d3b5b032dc8e8927d31a5071b56e14c89f045135: gopkg.in/russross/blackfriday.v2@v2.0.1: invalid version: go.mod has non-....v2 module path <span class="string">"github.com/russross/blackfriday/v2"</span> at revision v2.0.1</div><div class="line">go: converting Gopkg.lock: <span class="built_in">stat</span> golang.org/x/net@9b4f9f5ad5197c79fd623a3638e70d8b26cef344: unrecognized import path <span class="string">"golang.org/x/net"</span> (https fetch: Get https://golang.org/x/net?go-get=1: dial tcp 216.239.37.1:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.)</div><div class="line">go: converting Gopkg.lock: <span class="built_in">stat</span> golang.org/x/image@61b8692d9a5c9886248d7f96e0ba50ad77baab4c: unrecog</div><div class="line">nized import path <span class="string">"golang.org/x/image"</span> (https fetch: Get https://golang.org/x/image?go-get=1: dial tcp 216.239.37.1:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.)</div></pre></td></tr></table></figure>
<p>这其实是一个 bug，init 导入依赖部分没有引用 GOPROXY。已经有人向官方提交了 issue，只是修复不知道要等到哪个版本合入。当前可以创建一个空白的 <code>go.mod</code> 然后执行 <code>go mod tidy</code> 来绕过。</p>
<p>go.mod 只需要包含 module path 和 go 版本即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">module myapp</div><div class="line"></div><div class="line">go 1.13</div></pre></td></tr></table></figure>
<h3 id="坑02：import-和-module-path-不一致"><a href="#坑02：import-和-module-path-不一致" class="headerlink" title="坑02：import 和 module path 不一致"></a>坑02：import 和 module path 不一致</h3><p>增加了 go.mod 之后，执行 <code>go mod tidy</code> ：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;go mod tidy</div><div class="line">go: finding github.com/mojocn/base64Captcha latest</div><div class="line">......</div><div class="line">go: myapp/model/data imports</div><div class="line">        github.com/go-xorm/core: github.com/go-xorm/core@v0.6.3: parsing go.mod:</div><div class="line">        module declares its path as: xorm.io/core</div><div class="line">                but was required as: github.com/go-xorm/core</div></pre></td></tr></table></figure>
<p>这个好解决，把项目里对这个 module 的引用，都指向它声明的路径即可。</p>
<p>下面梳理一下出错的原因：</p>
<p><code>xorm.io/core</code> 这个 module，同时在 github.com 和 xorm.io 都有提供访问。</p>
<p>在使用 dep 的时候，从哪个路径 import，都是可行的。当我从 <code>github.com/go-xorm/core</code> import 时，dep 就从 github 下载，并保存到 <code>vendor/github.com/go-xorm/core</code> 下。到编译的时候，到 vendor 下对应的路径去找。也就是无论选哪个，<strong>下载、保存、import 的路径，三者是对应的就行</strong>。</p>
<p>但是 mod 会读取 module 的 go.mod，它自称是 <code>xorm.io/core</code> ，那么从 github import 就是非法的。也就是现在要 <strong>加上跟 module 自身 go.mod 声明的路径一致</strong>。（当然，现在保存不在 vendor 目录了，而是在 <code>$HOME/go/pkg/mod/</code> 底下，从原来每个项目存一份，变成每个 module 的每个版本，全局只存一份。）</p>
<p>退一步讲，如果将来 xorm.io 因为某些原因不再提供访问，而 github 那份还在，可以在 go.mod 通过 replace 关键字将下载地址指向 github，但其余的路径，依然要跟声明的路径保持一致（主要是 import 路径，下载保存是自动的，并不需要人工干预）。</p>
<h3 id="坑03：最新版本-module-不兼容"><a href="#坑03：最新版本-module-不兼容" class="headerlink" title="坑03：最新版本 module 不兼容"></a>坑03：最新版本 module 不兼容</h3><p>好了，依赖的分析和获取终于不报错了，<code>go.mod</code> 和 <code>go.sum</code> 也成功生成了。接下来让我们编译一下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;make build</div><div class="line">go build -ldflags <span class="string">'-s -w'</span></div><div class="line">go: finding gopkg.in/yaml.v2 v2.2.2</div><div class="line">// 省略若干行...</div><div class="line"><span class="comment"># myapp/model/data</span></div><div class="line">model\data\csv.go:59:6: xng.QuoteStr undefined (<span class="built_in">type</span> *xorm.Engine has no field or method QuoteStr)</div><div class="line">model\data\csv.go:61:6: xng.QuoteStr undefined (<span class="built_in">type</span> *xorm.Engine has no field or method QuoteStr)</div><div class="line">make: *** [Makefile:28: build] Error 2</div></pre></td></tr></table></figure>
<p><code>Engine.QuoteStr()</code> 是一个返回当前数据库引擎使用的引号的方法，我当时特意使用这个方法，用来同时兼容不同的数据库，避免额外的判断。所以我确定这个方法是存在的。</p>
<p>这很容易想到是版本兼容性的问题。查看 <code>go.mod</code> 里的是 v0.7.9，再翻看 <code>Gopkg.toml</code> 之前用的是 v.0.7.1 。坑爹的是，新版本居然删掉了这个方法。</p>
<p>这里稍微提一下 <strong>版本号的问题</strong> 。go mod 强制使用 SemVer（如果不知道什么是 SemVer，看这篇 <a href="https://semver.org/lang/zh-CN/" target="_blank" rel="external">语义化版本 2.0</a>），默认大版本没有改动的话，一定是兼容修改。所以会自动获取当前大版本下最新的版本，并不会参考 <code>Gopkg.toml</code> 的版本。不过话说回来， 即使按照 SemVer 的语义，也没办法埋怨 xorm 的团队，1.0 之前的版本默认为不稳定版本，没有义务保持兼容。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;go mod edit -require=github.com/go-xorm/xorm@v0.7.1</div></pre></td></tr></table></figure>
<p>这样就可以指定依赖的版本。如果你觉得敲命令太麻烦，直接手动改 go.mod 也可以。一般不推荐直接改，因为你的修改会在下次更新时被覆盖，唯独版本信息是会保留的。</p>
<p>改完再 tidy 一次。</p>
<h3 id="坑04：module-path-不统一"><a href="#坑04：module-path-不统一" class="headerlink" title="坑04：module path 不统一"></a>坑04：module path 不统一</h3><p>再编译一次：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;make build</div><div class="line">go build -ldflags <span class="string">'-s -w'</span></div><div class="line">go: finding github.com/go-xorm/xorm v0.7.1</div><div class="line">// 省略若干行...</div><div class="line"><span class="comment"># myapp/model/data</span></div><div class="line">model\data\engine.go:117:17: cannot use level (<span class="built_in">type</span> <span class="string">"xorm.io/core"</span>.LogLevel) as <span class="built_in">type</span> <span class="string">"github.com/go-</span></div><div class="line">xorm/core".LogLevel <span class="keyword">in</span> argument to xng.SetLogLevel</div><div class="line">make: *** [Makefile:28: build] Error 2</div></pre></td></tr></table></figure>
<p>还是 xorm 的错误。还记得我们在 坑02 中的修改吗，在 go mod 底下，要统一按照声明路径去 import。</p>
<p>因为 坑03 ，xorm 改回了跟我代码兼容的 v0.7.1 ，那与之关联的 core 呢？跟上面类似地，看前后的配置，之前用的 v0.6.0 ，现在的是 v0.7.2 。<strong>关键的一点是</strong>，在 2019 年 6 月，在这两个版本之间的 v0.6.3，module path 从 <code>github.com/go-xorm/core</code> 改成了 <code>xorm.io/core</code> ， xorm 对它的引用在那个时间也做了相应的修改。</p>
<p>为了跟 v0.7.1 的 xorm 兼容，必须使用 &lt; v0.6.3 的 core —— 实际上直接使用 v0.6.0 是最保险的。因为回退到了修改 module path 之前的版本，所以 坑02 的修改白改了，回退掉。</p>
<p>当然记录 坑02 仍然有意义，它提醒我 <strong>有时声明的 module path 未必和仓库地址一致</strong> 。</p>
<p>跟上面类似，core 包改回对应的 v0.6.0 ，重新 tidy。</p>
<h3 id="坑05：主版本号变更"><a href="#坑05：主版本号变更" class="headerlink" title="坑05：主版本号变更"></a>坑05：主版本号变更</h3><p>再一次编译：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;make build</div><div class="line">go build -ldflags <span class="string">'-s -w'</span></div><div class="line"><span class="comment"># myapp/api</span></div><div class="line">api\survey.go:189:9: assignment mismatch: 2 variables but ex.GetCellValue returns 1 values</div><div class="line">// 省略若干相似的错误...</div><div class="line">api\survey.go:216:9: too many errors</div><div class="line">make: *** [Makefile:28: build] Error 2</div></pre></td></tr></table></figure>
<p>依然是版本的兼容问题。</p>
<p>不过这次的错误跟前面的比，是反过来的：我的代码引用的是最新的 v2 代码，这在原来 dep 下是不需要区分包名的。但在 mod 里，大于 1 的大版本是需要体现在路径里的。</p>
<p>在 module 眼里，<strong>主版本号不同，相当于两个不同的 module</strong>。 这是因为根据 SemVer 的约定，大版本号的改变，意味着引入了 breaking changes。那么如果很不巧地，代码 直接 / 间接 依赖同一个包的不同大版本时，mod 是可以同时导入的，就不会存在依赖上的冲突。</p>
<p>把 import 里 <code>github.com/360EntSecGroup-Skylar/excelize</code> 改为 <code>github.com/360EntSecGroup-Skylar/excelize/v2</code> ，重新 tidy，这次编译就不再报错了，编译的结果也是可以正常运行的。到此，我踩的坑已经全部记录完毕。</p>
<p>临了 Mark 一篇文章 <a href="https://www.cnblogs.com/apocelipes/p/10295096.html" target="_blank" rel="external">《再探go modules：使用与细节》</a>。这篇文章对于 go mod 的一些细节做了分析，虽然发表于 1.12 发布前，但是现在来看仍然有效。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接触 golang 很晚，实际用来开发大概在 1.9 左右，所以我的主要印象是在 1.9 、 1.10 上的，依赖管理经过一些尝试之后，选择了 『官方』（后来实际被抛弃了）的 dep（&lt;a href=&quot;https://jaycechant.info/2018/glide-from-start-up-to-give-up/&quot;&gt;《golang 依赖管理：glide 从入门到放弃》&lt;/a&gt;）。&lt;br&gt;&lt;!-- https://mp.weixin.qq.com/s/dWDfu_9sV5WSkF9h27E4uA --&gt;&lt;/p&gt;
&lt;p&gt;后来 1.11、1.12 推出了 module （亦即 go mod 命令），考虑到尚不稳定又有切换成本，就继续留守在 vendor 目录上。&lt;/p&gt;
&lt;p&gt;2019 年 9月终于 1.13 出来了，做了几个比较大的改动，同时 module 也终于转正，所以我终于下定决心迁移到 1.13，并改用 mod 做依赖管理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://jaycechant.info/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang 预置 json 包的值覆盖测试</title>
    <link href="https://jaycechant.info/2019/golang-json-overlaying/"/>
    <id>https://jaycechant.info/2019/golang-json-overlaying/</id>
    <published>2019-05-19T16:45:38.000Z</published>
    <updated>2019-05-20T16:02:48.506Z</updated>
    
    <content type="html"><![CDATA[<p>json 作为一种可读性高、跨平台的序列化手段，常用在持久化和网络间传输。一般情况下，只需考虑是否按照作者的意图序列化和反序列化；反序列化的目标一般是一个 <strong>空白的对象</strong>，供写入得到的值。</p>
<p>但有一些特殊情况，还要考虑反序列化过程中，值的覆盖性：用到的字段非常多，给每个都赋值很麻烦，所以提供一套默认值（注意默认值不一定是 0 值），只要 json 中没有指定，就转而使用默认值。这在 jQuery 中只需要使用 <code>$.extend(default, opts1, opts2...)</code>；而如果想递归合并，则只需要把 <code>true</code> 作为第一个参数。</p>
<a id="more"></a>
<p>这一般出现在用 json 写配置文件，还有传递运行参数时，要求调用方即使默认值也要写上非常麻烦；而通过检测读到的是否 0 值再设置默认值则更麻烦，而且不合理（因为没法区分缺省值还是设置值，在 go 中除非全部使用指针）。所以，如果可以以初始化了默认值的对象作为反序列化的目标，将 json 中有指定的值覆盖上去，就是最好的选择。</p>
<p>json 在 go 中只是字符串，不像在 js 中有原生身份可以直接合并，所以在 Unmarshal 时能顺便进行覆盖是最好的了。前面我做了一些简单的测试，发现在 go 中这个思路可行，所以就这样实现了；但随着实现深入，特别是我为调用方编写文档时，我才意识到准确的覆盖对应的值，并不简单。（指定的值有覆盖，不指定的值保留默认，slice 和 map 的 value 可以准确覆盖到正确的 index / key）</p>
<p>话不多说，直接先跑，然后看输出结合源码分析：</p>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">    <span class="comment">//json "github.com/json-iterator/go"</span></div><div class="line">    <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Inner <span class="keyword">struct</span> &#123;</div><div class="line">    A <span class="keyword">int</span></div><div class="line">    B <span class="keyword">float64</span></div><div class="line">    C <span class="keyword">bool</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Mid <span class="keyword">struct</span> &#123;</div><div class="line">    I  Inner</div><div class="line">    Ip *Inner</div><div class="line">    D  <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Outer <span class="keyword">struct</span> &#123;</div><div class="line">    Inner</div><div class="line">    M    Mid</div><div class="line">    Mp   *Mid</div><div class="line">    Mids <span class="keyword">map</span>[<span class="keyword">int</span>]*Mid</div><div class="line">    Ins []*Inner</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    o := &amp;Outer &#123;</div><div class="line">        Inner: Inner &#123;</div><div class="line">            A: <span class="number">111</span>, <span class="comment">// 按同名 field 覆盖，不影响其他 field</span></div><div class="line">            B: <span class="number">222.22</span>,</div><div class="line">            C: <span class="literal">true</span>,</div><div class="line">        &#125;,</div><div class="line">        M: Mid &#123;</div><div class="line">            I: Inner &#123;</div><div class="line">                A: <span class="number">111</span>, <span class="comment">// 嵌套的 struct 也是按 field 覆盖</span></div><div class="line">                C: <span class="literal">true</span>,</div><div class="line">            &#125;,</div><div class="line">        &#125;,</div><div class="line">        Mp: &amp;Mid &#123;</div><div class="line">            I: Inner &#123;</div><div class="line">                A: <span class="number">111</span>, <span class="comment">// 指针指向的 struct 内部 field 同理</span></div><div class="line">                C: <span class="literal">true</span>,</div><div class="line">            &#125;,</div><div class="line">        &#125;,</div><div class="line">        Mids: <span class="keyword">map</span>[<span class="keyword">int</span>]*Mid &#123;</div><div class="line">            <span class="number">0</span>: &amp;Mid&#123; <span class="comment">// map elem 被整体覆盖</span></div><div class="line">                I: Inner &#123;</div><div class="line">                    C: <span class="literal">true</span>, <span class="comment">// 被覆盖为默认值</span></div><div class="line">                &#125;,</div><div class="line">                Ip: &amp;Inner &#123;</div><div class="line">                    B: <span class="number">333</span>, <span class="comment">// 被覆盖为默认值</span></div><div class="line">                &#125;,</div><div class="line">                D: <span class="number">444</span>, <span class="comment">// 被覆盖为默认值</span></div><div class="line">            &#125;,</div><div class="line">            <span class="number">1</span>: &amp;Mid&#123; <span class="comment">// 但是不影响 map 的其他 elem，值被完整保留</span></div><div class="line">                I: Inner &#123;</div><div class="line">                    A: <span class="number">555</span>,</div><div class="line">                &#125;,</div><div class="line">            &#125;,</div><div class="line">        &#125;,</div><div class="line">        Ins: []*Inner &#123;</div><div class="line">            &amp;Inner &#123; <span class="comment">// slice elem 内部被按 field 覆盖</span></div><div class="line">                A: <span class="number">666</span>,</div><div class="line">                B: <span class="number">77.7</span>,</div><div class="line">            &#125;,</div><div class="line">            &amp;Inner &#123; <span class="comment">// 同上</span></div><div class="line">                A: <span class="number">888</span>,</div><div class="line">                B: <span class="number">99.9</span>,</div><div class="line">            &#125;,</div><div class="line">            &amp;Inner &#123; <span class="comment">// 但其他 elem 反而丢失了</span></div><div class="line">                A: <span class="number">1010</span>,</div><div class="line">                B: <span class="number">11.11</span>,</div><div class="line">            &#125;,</div><div class="line">        &#125;,</div><div class="line">    &#125;</div><div class="line">    b, _ := json.Marshal(o)</div><div class="line">    fmt.Println(<span class="string">"baseline:"</span>, <span class="keyword">string</span>(b))</div><div class="line">    </div><div class="line">    bv := []<span class="keyword">byte</span>(<span class="string">`</span></div><div class="line">&#123;</div><div class="line">    "A": 123,</div><div class="line">    "M": &#123;</div><div class="line">        "I": &#123;</div><div class="line">            "B": 222</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    "Mp": &#123;</div><div class="line">        "I": &#123;</div><div class="line">            "B": 222</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    "Mids": &#123;</div><div class="line">        "0": &#123;</div><div class="line">            "I": &#123;</div><div class="line">                "A": 234</div><div class="line">            &#125;,</div><div class="line">            "Ip": &#123;</div><div class="line">                "A": 777</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    "Ins": [</div><div class="line">        &#123;</div><div class="line">            "A": 456</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            "B": 765</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line">`)</div><div class="line">    json.Unmarshal(bv, o)</div><div class="line">    b, _ = json.Marshal(o)</div><div class="line">    fmt.Println(<span class="string">"overlay:"</span>, <span class="keyword">string</span>(b))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果</p>
<p>（重点看在 json string 里没有指定的值是否会被覆盖，以及 slice 、map 里其他成员的情况。为了更方便地看，我把对比的结果用注释写在了测试代码里。）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">baseline: &#123;<span class="string">"A"</span>:111,<span class="string">"B"</span>:222.22,<span class="string">"C"</span>:<span class="literal">true</span>,<span class="string">"M"</span>:&#123;<span class="string">"I"</span>:&#123;<span class="string">"A"</span>:111,<span class="string">"B"</span>:0,<span class="string">"C"</span>:<span class="literal">true</span>&#125;,<span class="string">"Ip"</span>:null,<span class="string">"D"</span>:0&#125;,<span class="string">"Mp"</span>:&#123;<span class="string">"I"</span>:&#123;<span class="string">"A"</span>:111,<span class="string">"B"</span>:0,<span class="string">"C"</span>:<span class="literal">true</span>&#125;,<span class="string">"Ip"</span>:null,<span class="string">"D"</span>:0&#125;,<span class="string">"Mids"</span>:&#123;<span class="string">"0"</span>:&#123;<span class="string">"I"</span>:&#123;<span class="string">"A"</span>:0,<span class="string">"B"</span>:0,<span class="string">"C"</span>:<span class="literal">true</span>&#125;,<span class="string">"Ip"</span>:&#123;<span class="string">"A"</span>:0,<span class="string">"B"</span>:333,<span class="string">"C"</span>:<span class="literal">false</span>&#125;,<span class="string">"D"</span>:444&#125;,<span class="string">"1"</span>:&#123;<span class="string">"I"</span>:&#123;<span class="string">"A"</span>:555,<span class="string">"B"</span>:0,<span class="string">"C"</span>:<span class="literal">false</span>&#125;,<span class="string">"Ip"</span>:null,<span class="string">"D"</span>:0&#125;&#125;,<span class="string">"Ins"</span>:[&#123;<span class="string">"A"</span>:666,<span class="string">"B"</span>:77.7,<span class="string">"C"</span>:<span class="literal">false</span>&#125;,&#123;<span class="string">"A"</span>:888,<span class="string">"B"</span>:99.9,<span class="string">"C"</span>:<span class="literal">false</span>&#125;,&#123;<span class="string">"A"</span>:1010,<span class="string">"B"</span>:11.11,<span class="string">"C"</span>:<span class="literal">false</span>&#125;]&#125;</div><div class="line">overlay: &#123;<span class="string">"A"</span>:123,<span class="string">"B"</span>:222.22,<span class="string">"C"</span>:<span class="literal">true</span>,<span class="string">"M"</span>:&#123;<span class="string">"I"</span>:&#123;<span class="string">"A"</span>:111,<span class="string">"B"</span>:222,<span class="string">"C"</span>:<span class="literal">true</span>&#125;,<span class="string">"Ip"</span>:null,<span class="string">"D"</span>:0&#125;,<span class="string">"Mp"</span>:&#123;<span class="string">"I"</span>:&#123;<span class="string">"A"</span>:111,<span class="string">"B"</span>:222,<span class="string">"C"</span>:<span class="literal">true</span>&#125;,<span class="string">"Ip"</span>:null,<span class="string">"D"</span>:0&#125;,<span class="string">"Mids"</span>:&#123;<span class="string">"0"</span>:&#123;<span class="string">"I"</span>:&#123;<span class="string">"A"</span>:234,<span class="string">"B"</span>:0,<span class="string">"C"</span>:<span class="literal">false</span>&#125;,<span class="string">"Ip"</span>:&#123;<span class="string">"A"</span>:777,<span class="string">"B"</span>:0,<span class="string">"C"</span>:<span class="literal">false</span>&#125;,<span class="string">"D"</span>:0&#125;,<span class="string">"1"</span>:&#123;<span class="string">"I"</span>:&#123;<span class="string">"A"</span>:555,<span class="string">"B"</span>:0,<span class="string">"C"</span>:<span class="literal">false</span>&#125;,<span class="string">"Ip"</span>:null,<span class="string">"D"</span>:0&#125;&#125;,<span class="string">"Ins"</span>:[&#123;<span class="string">"A"</span>:456,<span class="string">"B"</span>:77.7,<span class="string">"C"</span>:<span class="literal">false</span>&#125;,&#123;<span class="string">"A"</span>:888,<span class="string">"B"</span>:765,<span class="string">"C"</span>:<span class="literal">false</span>&#125;]&#125;</div></pre></td></tr></table></figure>
<h3 id="结合源码分析"><a href="#结合源码分析" class="headerlink" title="结合源码分析"></a>结合源码分析</h3><p>下面结合 <code>encoding/json/decode.go</code> 的源码，大概梳理一下结论：</p>
<h4 id="1-struct-内的基本类型-field"><a href="#1-struct-内的基本类型-field" class="headerlink" title="1. struct 内的基本类型 field"></a>1. struct 内的基本类型 field</h4><p>（struct 对应 json 中的 object，以 {} 包裹；基本类型对应 json 中的 字面量 literal，内容是一个数字或者字符串）</p>
<p>值按同名覆盖，没有指定的的 field 保留原值；这条即使是 嵌套的 struct 内部的 field 也成立，包括匿名嵌套，还有指针指向的 struct 的 field。</p>
<h4 id="2-slice-类型"><a href="#2-slice-类型" class="headerlink" title="2. slice 类型"></a>2. slice 类型</h4><p>（对应 json 中的 array，以 [] 包裹）</p>
<p>slice elem 按 index 一一对应， struct 内部 field 同规则 1；但是 slice 会调整长度跟 json 保持一致： json 多出的会添加，反之原 slice 多出的会因为长度调整被丢弃。从源码看，如果是 array，因为长度无法调整，json 数量比较少的话不会丢弃原 array 的内容；反之 json 多出的内容会被丢弃。不过很少使用 array，没有实际测试。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// array consumes an array from d.data[d.off-1:], decoding into the value v.</span></div><div class="line"><span class="comment">// the first byte of the array ('[') has been read already.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *decodeState)</span> <span class="title">array</span><span class="params">(v reflect.Value)</span></span> &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">		<span class="comment">// Get element of array, growing if necessary.</span></div><div class="line">		<span class="keyword">if</span> v.Kind() == reflect.Slice &#123;</div><div class="line">			<span class="comment">// Grow slice if necessary</span></div><div class="line">			<span class="keyword">if</span> i &gt;= v.Cap() &#123;</div><div class="line">				newcap := v.Cap() + v.Cap()/<span class="number">2</span></div><div class="line">				<span class="keyword">if</span> newcap &lt; <span class="number">4</span> &#123;</div><div class="line">					newcap = <span class="number">4</span></div><div class="line">				&#125;</div><div class="line">				newv := reflect.MakeSlice(v.Type(), v.Len(), newcap)</div><div class="line">				reflect.Copy(newv, v)</div><div class="line">				v.Set(newv)</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> i &gt;= v.Len() &#123;</div><div class="line">				v.SetLen(i + <span class="number">1</span>)</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> i &lt; v.Len() &#123;</div><div class="line">			<span class="comment">// Decode into element.</span></div><div class="line">			d.value(v.Index(i))</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// Ran out of fixed array: skip.</span></div><div class="line">			d.value(reflect.Value&#123;&#125;)</div><div class="line">		&#125;</div><div class="line">		i++</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="comment">// ...</span></div></pre></td></tr></table></figure>
<h4 id="3-map-类型"><a href="#3-map-类型" class="headerlink" title="3. map 类型"></a>3. map 类型</h4><p>（对应 json 中的 object，以 {} 包裹）</p>
<p>json 中指定的 key 会整个 elem 被覆盖；没有指定的 key 则完整保留。</p>
<p>其中最主要的差别是 struct filed 和 map elem 之间：虽然在 json 中同样以 object 表示，但 struct 设置时，获得的是 field 的 pointer，如果 field 本身也是一个 struct，那么就会递归处理，一直到最里层的基本类型才被覆盖；而 map elem 是直接覆盖， <strong>如果这个 map elem 本身是一个 struct，那么它原有的数据就会丢失</strong> 。</p>
<p>由于 map 和 struct 都对应 object，所以它们的代码是在一起的：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// object consumes an object from d.data[d.off-1:], decoding into the value v.</span></div><div class="line"><span class="comment">// the first byte ('&#123;') of the object has been read already.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *decodeState)</span> <span class="title">object</span><span class="params">(v reflect.Value)</span></span> &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">var</span> mapElem reflect.Value</div><div class="line"></div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="comment">// Figure out field corresponding to key.</span></div><div class="line">		<span class="keyword">var</span> subv reflect.Value</div><div class="line">		destring := <span class="literal">false</span> <span class="comment">// whether the value is wrapped in a string to be decoded first</span></div><div class="line"></div><div class="line">		<span class="keyword">if</span> v.Kind() == reflect.Map &#123;</div><div class="line">			elemType := v.Type().Elem()</div><div class="line">			<span class="keyword">if</span> !mapElem.IsValid() &#123;</div><div class="line">				mapElem = reflect.New(elemType).Elem()</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				mapElem.Set(reflect.Zero(elemType))</div><div class="line">			&#125;</div><div class="line">            <span class="comment">// 如果是 map，subv 指向一个新初始化的 elem</span></div><div class="line">			subv = mapElem</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">            <span class="comment">// ...</span></div><div class="line">            subv = v</div><div class="line">            <span class="comment">// ...</span></div><div class="line">            <span class="comment">// ...</span></div><div class="line">            <span class="comment">// 如果是 struct，则得到对应 field 的指针</span></div><div class="line">            subv = subv.Field(i)</div><div class="line">            <span class="comment">// ...</span></div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="comment">// 解析下一层并把内容放到 subv，如果是 map，subv 指向一个空白的对象</span></div><div class="line">        &#123;</div><div class="line">            d.value(subv)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Write value back to map;</span></div><div class="line">		<span class="comment">// if using struct, subv points into struct already.</span></div><div class="line">		<span class="keyword">if</span> v.Kind() == reflect.Map &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">            <span class="comment">// ...</span></div><div class="line">            <span class="comment">// 把 subv 设置到对应的 key，该 key 对应的原有的数据全部丢失</span></div><div class="line">            <span class="comment">// struct 没有这步，因为 subv 直接就是指向 field 的指针</span></div><div class="line">            v.SetMapIndex(kv, subv)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="comment">// ...</span></div></pre></td></tr></table></figure>
<p>为什么 slice 可以直接 <code>d.value(v.Index(i))</code> 把对应的 elem 递归交给下一层去合并， 而 map 却不能直接 <code>d.value(v.MapIndex(key))</code> ，而是在这一层直接把 elem 给覆盖掉了？ 是因为什么原因做不到，还是出于什么考虑不这样实现？时间关系，我还没找到答案，这里先留一个问号。</p>
<h3 id="初步结论"><a href="#初步结论" class="headerlink" title="初步结论"></a>初步结论</h3><p>为了达到『指定值覆盖，缺省值保留』的效果：</p>
<ul>
<li>如果需要嵌套 struct，内层 struct 最好作为一个 field 存在，指针还是对象都可以；</li>
<li>如果是一组确定数量的 struct，最好以 array 的方式定义，并且确保 index 正确；缺省的 struct 传参时可以用空 objecct <code>{}</code> 占位以确保顺序对应；</li>
<li>如果是一组数量不确定的 struct，则要权衡 slice 和 map 的利弊：<ul>
<li>slice 内的 struct 可以正常合并，但是 slice 比 json 多出的 elem 会被丢弃；如果 json 的数量比默认数量少，则不仅中间的缺省 struct 要用 <code>{}</code> 占位，后续缺省的 struct 也得占位——这需要默认值的数量是确定的；</li>
<li>map 刚好反过来，没有指定的 key 也不会被删除，但是指定了的 key 对应的 value 是直接覆盖，不能合并。</li>
</ul>
</li>
</ul>
<h3 id="流行的第三方库：jsoniter"><a href="#流行的第三方库：jsoniter" class="headerlink" title="流行的第三方库：jsoniter"></a>流行的第三方库：jsoniter</h3><p>再看当下比较流行的第三方库 jsoniter 。同样的代码，只是单纯的把 <code>&quot;encoding/json&quot;</code> 换成 <code>json &quot;github.com/json-iterator/go&quot;</code> ，再看结果，是完全一样的，说明在覆盖性的兼容上，jsoniter 是兼容官方库的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">baseline: &#123;<span class="string">"A"</span>:111,<span class="string">"B"</span>:222.22,<span class="string">"C"</span>:<span class="literal">true</span>,<span class="string">"M"</span>:&#123;<span class="string">"I"</span>:&#123;<span class="string">"A"</span>:111,<span class="string">"B"</span>:0,<span class="string">"C"</span>:<span class="literal">true</span>&#125;,<span class="string">"Ip"</span>:null,<span class="string">"D"</span>:0&#125;,<span class="string">"Mp"</span>:&#123;<span class="string">"I"</span>:&#123;<span class="string">"A"</span>:111,<span class="string">"B"</span>:0,<span class="string">"C"</span>:<span class="literal">true</span>&#125;,<span class="string">"Ip"</span>:null,<span class="string">"D"</span>:0&#125;,<span class="string">"Mids"</span>:&#123;<span class="string">"0"</span>:&#123;<span class="string">"I"</span>:&#123;<span class="string">"A"</span>:0,<span class="string">"B"</span>:0,<span class="string">"C"</span>:<span class="literal">true</span>&#125;,<span class="string">"Ip"</span>:&#123;<span class="string">"A"</span>:0,<span class="string">"B"</span>:333,<span class="string">"C"</span>:<span class="literal">false</span>&#125;,<span class="string">"D"</span>:444&#125;,<span class="string">"1"</span>:&#123;<span class="string">"I"</span>:&#123;<span class="string">"A"</span>:555,<span class="string">"B"</span>:0,<span class="string">"C"</span>:<span class="literal">false</span>&#125;,<span class="string">"Ip"</span>:null,<span class="string">"D"</span>:0&#125;&#125;,<span class="string">"Ins"</span>:[&#123;<span class="string">"A"</span>:666,<span class="string">"B"</span>:77.7,<span class="string">"C"</span>:<span class="literal">false</span>&#125;,&#123;<span class="string">"A"</span>:888,<span class="string">"B"</span>:99.9,<span class="string">"C"</span>:<span class="literal">false</span>&#125;,&#123;<span class="string">"A"</span>:1010,<span class="string">"B"</span>:11.11,<span class="string">"C"</span>:<span class="literal">false</span>&#125;]&#125;</div><div class="line">overlay: &#123;<span class="string">"A"</span>:123,<span class="string">"B"</span>:222.22,<span class="string">"C"</span>:<span class="literal">true</span>,<span class="string">"M"</span>:&#123;<span class="string">"I"</span>:&#123;<span class="string">"A"</span>:111,<span class="string">"B"</span>:222,<span class="string">"C"</span>:<span class="literal">true</span>&#125;,<span class="string">"Ip"</span>:null,<span class="string">"D"</span>:0&#125;,<span class="string">"Mp"</span>:&#123;<span class="string">"I"</span>:&#123;<span class="string">"A"</span>:111,<span class="string">"B"</span>:222,<span class="string">"C"</span>:<span class="literal">true</span>&#125;,<span class="string">"Ip"</span>:null,<span class="string">"D"</span>:0&#125;,<span class="string">"Mids"</span>:&#123;<span class="string">"0"</span>:&#123;<span class="string">"I"</span>:&#123;<span class="string">"A"</span>:234,<span class="string">"B"</span>:0,<span class="string">"C"</span>:<span class="literal">false</span>&#125;,<span class="string">"Ip"</span>:&#123;<span class="string">"A"</span>:777,<span class="string">"B"</span>:0,<span class="string">"C"</span>:<span class="literal">false</span>&#125;,<span class="string">"D"</span>:0&#125;,<span class="string">"1"</span>:&#123;<span class="string">"I"</span>:&#123;<span class="string">"A"</span>:555,<span class="string">"B"</span>:0,<span class="string">"C"</span>:<span class="literal">false</span>&#125;,<span class="string">"Ip"</span>:null,<span class="string">"D"</span>:0&#125;&#125;,<span class="string">"Ins"</span>:[&#123;<span class="string">"A"</span>:456,<span class="string">"B"</span>:77.7,<span class="string">"C"</span>:<span class="literal">false</span>&#125;,&#123;<span class="string">"A"</span>:888,<span class="string">"B"</span>:765,<span class="string">"C"</span>:<span class="literal">false</span>&#125;]&#125;</div></pre></td></tr></table></figure>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;json 作为一种可读性高、跨平台的序列化手段，常用在持久化和网络间传输。一般情况下，只需考虑是否按照作者的意图序列化和反序列化；反序列化的目标一般是一个 &lt;strong&gt;空白的对象&lt;/strong&gt;，供写入得到的值。&lt;/p&gt;
&lt;p&gt;但有一些特殊情况，还要考虑反序列化过程中，值的覆盖性：用到的字段非常多，给每个都赋值很麻烦，所以提供一套默认值（注意默认值不一定是 0 值），只要 json 中没有指定，就转而使用默认值。这在 jQuery 中只需要使用 &lt;code&gt;$.extend(default, opts1, opts2...)&lt;/code&gt;；而如果想递归合并，则只需要把 &lt;code&gt;true&lt;/code&gt; 作为第一个参数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://jaycechant.info/tags/golang/"/>
    
      <category term="json" scheme="https://jaycechant.info/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>golang-string 和 bytes 之间的 unsafe 转换</title>
    <link href="https://jaycechant.info/2019/golang-unsafe-cast-between-string-and-bytes/"/>
    <id>https://jaycechant.info/2019/golang-unsafe-cast-between-string-and-bytes/</id>
    <published>2019-04-30T09:52:12.000Z</published>
    <updated>2019-05-01T08:28:00.203Z</updated>
    
    <content type="html"><![CDATA[<p>最近写一个 golang 的工具包时，涉及到反复在 string 和 []byte 之间来回转换。这给了我一个机会了解转换时底层发生的事情。</p>
<h3 id="结论先行"><a href="#结论先行" class="headerlink" title="结论先行"></a>结论先行</h3><ul>
<li>string 和 []byte 互转都涉及底层数据复制；可以通过 unsafe 强制转换绕过复制提高性能。</li>
<li>string 类型的底层数组可能放在常量区（字面量初始化）也可能动态分配；无论哪一种，当以 string 类型出现时底层数据都是不可修改的（避免影响其他引用），string 的修改实际上是指向重新生成的底层数组。</li>
<li>当以 []byte 类型出现时，可以修改具体某一个 byte 的值；不过如果是从指向常量区的 string 通过 unsafe 转换而来，尝试修改时会产生不可恢复的 runtime error。</li>
<li>这也是为什么这个包叫 unsafe：绕过类型检查强行转换，绕过了底层数据复制，提高性能同时也失去了检查和复制的保护，需要调用方自行确认不会出错。</li>
<li><code>+</code> 连接会复制内存，<code>strings.Split()</code> 直接在原串做切片…具体不同实现要以源码为准。</li>
<li>即使 string 是动态分配的内容，也不建议修改对应的 []byte，可能会引起引用同一块内容的其他 string 的异常—— 除非你能确保没有别的地方引用它。</li>
<li>实际调用中碰到了 对 A 串做 unsafe 转换，结果完全无关的 B 串出现切片时数组越界；A 串改为普通转换就好了。暂时没能找到原因，保险起见放弃使用 unsafe，改为用 <code>json.RawMessage</code> 多封装一层。本次研究权当学习了。</li>
</ul>
<a id="more"></a>
<h3 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h3><p>具体来说，是一个缓存相关的封装包：把对象 <code>json.Marshal()</code> 之后得到的 []byte 放到缓存；或者反过来，取出 []byte 交给 <code>json.Unmarshal()</code> 。无论正反方向的调用，输入输出都是 []byte，本没有 string 的事。</p>
<p>偏偏这中间为了实现某些功能，需要往 marshal 之后的 json 字符串上追加（存的时候）或提取（读的时候）某些信息。追加还好办，可以把追加的内容一起变成 []byte 之后 <code>append()</code> ；但提取需要基于字符串的语义，不得不先转成 string，解析完再转回来。</p>
<p>我对这中间的开销产生了兴趣。</p>
<h3 id="unsafe"><a href="#unsafe" class="headerlink" title="unsafe"></a>unsafe</h3><p>写 demo 对比地址之后，可以确定每次转换，string 和 []byte 的地址都有变化。</p>
<p>但是这只能确定 string 和 slice ([]byte 的 slice) 的结构体发生了复制，结构体指向的底层 byte array 是否有发生复制无从得知。</p>
<p>通过查阅网上的讨论以及源码，进一步确认，底层的 array 也发生的复制。既然发生了深复制，那么一定是有额外开销的，只是多和少的差别。</p>
<p>通过 <code>unsafe</code> 包，可以强制直接转换来绕过复制的开销。实际上 <code>strings.Builder</code> 就是这样做的。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> myunsafe</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"unsafe"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">BytesToString</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="title">string</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> *(*<span class="keyword">string</span>)(unsafe.Pointer(&amp;b))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">StringToBytes</span><span class="params">(s <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> *(*[]<span class="keyword">byte</span>)(unsafe.Pointer(&amp;s))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h3><p>那究竟两种转换方式差别有多大呢？</p>
<p>跑一个 Benchmark：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> myunsafe_test</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	. <span class="string">"myunsafe"</span></div><div class="line">	<span class="string">"testing"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> (</div><div class="line">	strs = []<span class="keyword">string</span>&#123;</div><div class="line">		<span class="string">"a"</span>,</div><div class="line">		<span class="string">"abc"</span>,</div><div class="line">		<span class="string">"some words"</span>,</div><div class="line">		<span class="string">"loooooooooooooonger"</span>,</div><div class="line">		<span class="string">"Characters with 1234567890 +-*/ and !@#$%^&amp;()="</span>,</div><div class="line">		<span class="string">`a multi-line long text, here is line one.</span></div><div class="line">line two.</div><div class="line">line three.</div><div class="line">some other texts:</div><div class="line">1234567890-=!@#$%^&amp;*()_+</div><div class="line">abcdefghijklmnopqrstuvwxyz</div><div class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZ    `,</div><div class="line">	&#125;</div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkCast</span><span class="params">(b *testing.B)</span></span> &#123;</div><div class="line">	n := <span class="built_in">len</span>(strs)</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</div><div class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n; j++ &#123;</div><div class="line">			b := []<span class="keyword">byte</span>(strs[j])</div><div class="line">			_ = <span class="keyword">string</span>(b)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkUnsafeCast</span><span class="params">(b *testing.B)</span></span> &#123;</div><div class="line">	n := <span class="built_in">len</span>(strs)</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</div><div class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n; j++ &#123;</div><div class="line">			b := StringToBytes(strs[j])</div><div class="line">			_ = BytesToString(b)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试结果对比如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">go <span class="built_in">test</span> -test.bench=.* -benchmem -run=none </div><div class="line">goos: windows</div><div class="line">goarch: amd64</div><div class="line">pkg: myunsafe</div><div class="line">BenchmarkCast-8         	 5000000	       281 ns/op	     448 B/op	       4 allocs/op</div><div class="line">BenchmarkUnsafeCast-8   	200000000	         8.81 ns/op	       0 B/op	       0 allocs/op</div><div class="line">PASS</div><div class="line">ok  	myunsafe	4.996s</div></pre></td></tr></table></figure>
<p>我用不同数据测过几次，上面只是其中一次。用较短的字符串测试时，大概是 20 倍的差距；当字符串越来越长，差距越来越明显。所以当反复转换较长的字符创时，可以考虑用 unsafe。</p>
<h3 id="字面量常量"><a href="#字面量常量" class="headerlink" title="字面量常量"></a>字面量常量</h3><p>网友提到这个转换只能对动态生成的字符串用，但是我上面的测试用了字面量常量，却没有报错呢？</p>
<p>有什么办法可以让它报错呢？我想差别是在于读和写。上面虽然对字面量常量做了 unsafe 转换，但是转换之后得到的结果并没有尝试写入。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	. <span class="string">"myunsafe"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	s := <span class="string">"a"</span></div><div class="line">	b := StringToBytes(s)</div><div class="line">	fmt.Println(b, <span class="keyword">string</span>(b))</div><div class="line">	b[<span class="number">0</span>] = <span class="number">0x42</span> <span class="comment">// ascii for B</span></div><div class="line">	fmt.Println(b, <span class="keyword">string</span>(b))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>果然报错了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[97] a</div><div class="line">unexpected fault address 0x4bb9ac</div><div class="line">fatal error: fault</div><div class="line">[signal 0xc0000005 code=0x1 addr=0x4bb9ac pc=0x48b615]</div></pre></td></tr></table></figure>
<p>改为动态生成的字符串看看。怎么生成？可以用 <code>strings.Builder</code> 。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	. <span class="string">"myunsafe"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	sb := strings.Builder&#123;&#125;</div><div class="line">    sb.WriteString(<span class="string">"a"</span>)</div><div class="line">	s := sb.String()</div><div class="line">	b := StringToBytes(s)</div><div class="line">	fmt.Println(b, <span class="keyword">string</span>(b))</div><div class="line">	b[<span class="number">0</span>] = <span class="number">0x42</span> <span class="comment">// ascii for B</span></div><div class="line">	fmt.Println(b, <span class="keyword">string</span>(b))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这回就不报错了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[97] a</div><div class="line">[66] B</div></pre></td></tr></table></figure>
<h3 id="其他情况"><a href="#其他情况" class="headerlink" title="其他情况"></a>其他情况</h3><h4 id="concat-运算符"><a href="#concat-运算符" class="headerlink" title="concat 运算符 +"></a>concat 运算符 +</h4><p>如果一个字符串是通过连接符 <code>+</code> 得到的呢？</p>
<p>它的实现在 <code>src/runtime/string.go</code> 里，可以看到做了内存复制。所以无论连接前的字符串是动态分配的还是字符串常量，连接之后得到的结果都是动态分配的。</p>
<h4 id="strings-Split"><a href="#strings-Split" class="headerlink" title="strings.Split()"></a>strings.Split()</h4><p>类似的，如果字符串是分解得到的子串呢？</p>
<p>同样可以看源码，Split 实际上并没有生成字符串，而是在原串的基础上做了切片。所以修改是否会报错，视乎原串是常量还是动态分配的内存。</p>
<p>其他情况就不一一尝试了。总的来说，各种情况都有，需要看源码核实。不过确认是动态分配的串也只是避免 runtime error 造成程序中断而已；但即使不报错，也应该避免修改 unsafe 转换得到的 []byte，这会导致其他指向同一地址的 string 有意外的结果—— <strong>除非你确定这是对底层 array 唯一的引用</strong> 。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><p><a href="https://sheepbao.github.io/post/golang_byte_slice_and_string/" target="_blank" rel="external">golang string和[]byte的对比</a></p>
</li>
<li><p><a href="https://ninokop.github.io/2017/10/25/Go-Slice%E4%B8%8EString%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E5%92%8C%E5%AE%9E%E7%8E%B0" target="_blank" rel="external">Go Slice与String内存布局和实现</a></p>
</li>
<li><p><a href="https://liudanking.com/performance/golang-strings-builder-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">Golang strings.Builder 原理解析</a></p>
</li>
</ul>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近写一个 golang 的工具包时，涉及到反复在 string 和 []byte 之间来回转换。这给了我一个机会了解转换时底层发生的事情。&lt;/p&gt;
&lt;h3 id=&quot;结论先行&quot;&gt;&lt;a href=&quot;#结论先行&quot; class=&quot;headerlink&quot; title=&quot;结论先行&quot;&gt;&lt;/a&gt;结论先行&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;string 和 []byte 互转都涉及底层数据复制；可以通过 unsafe 强制转换绕过复制提高性能。&lt;/li&gt;
&lt;li&gt;string 类型的底层数组可能放在常量区（字面量初始化）也可能动态分配；无论哪一种，当以 string 类型出现时底层数据都是不可修改的（避免影响其他引用），string 的修改实际上是指向重新生成的底层数组。&lt;/li&gt;
&lt;li&gt;当以 []byte 类型出现时，可以修改具体某一个 byte 的值；不过如果是从指向常量区的 string 通过 unsafe 转换而来，尝试修改时会产生不可恢复的 runtime error。&lt;/li&gt;
&lt;li&gt;这也是为什么这个包叫 unsafe：绕过类型检查强行转换，绕过了底层数据复制，提高性能同时也失去了检查和复制的保护，需要调用方自行确认不会出错。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt; 连接会复制内存，&lt;code&gt;strings.Split()&lt;/code&gt; 直接在原串做切片…具体不同实现要以源码为准。&lt;/li&gt;
&lt;li&gt;即使 string 是动态分配的内容，也不建议修改对应的 []byte，可能会引起引用同一块内容的其他 string 的异常—— 除非你能确保没有别的地方引用它。&lt;/li&gt;
&lt;li&gt;实际调用中碰到了 对 A 串做 unsafe 转换，结果完全无关的 B 串出现切片时数组越界；A 串改为普通转换就好了。暂时没能找到原因，保险起见放弃使用 unsafe，改为用 &lt;code&gt;json.RawMessage&lt;/code&gt; 多封装一层。本次研究权当学习了。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://jaycechant.info/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>为什么不要用 pip 安装 conda</title>
    <link href="https://jaycechant.info/2019/why-not-install-conda-with-pip/"/>
    <id>https://jaycechant.info/2019/why-not-install-conda-with-pip/</id>
    <published>2019-01-15T14:37:08.000Z</published>
    <updated>2019-01-23T06:47:37.346Z</updated>
    
    <content type="html"><![CDATA[<p>几乎所有人都直接安装 Anaconda。但它不过是 conda 包管理器 + 预置一系列常用 sci&amp;math 包。</p>
<p>如果我有环境洁癖，只允许存在一个 Python 环境，我可以 <code>pip install conda</code> ，再逐个 <code>conda install xyz</code> 安装那些 conda 下的包吗？</p>
<a id="more"></a>
<hr>
<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>接触 Python 有好些年了，用得不算多，主要做辅助的脚本工具，更像瑞士军刀，不是主力武器。而我的工作偏开发，所以 Anaconda 有所耳闻，并未直接使用。直到有数据分析的需求。</p>
<p>快速浏览相关的介绍和对比，大概得出这么一些信息：</p>
<ul>
<li>conda 是个包管理器</li>
<li>Python + conda = Miniconda</li>
<li>Minconda + 一系列预置的 sci&amp;math 的包 = Anaconda</li>
</ul>
<p>大概讨论这个的都是偏 Science 和 Data Analysis 的社区，大家都觉得直接安装 Anaconda 是标准操作，哪怕你已经安装了 Python。至于为什么不能在 Python 上安装 conda，几乎没有提及。</p>
<p>所以我想试一下。虽然我明知道直接安装会省事很多，但我要知道为什么。</p>
<h2 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h2><p>直接上手试：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">pip install conda <span class="comment"># 前面试过一次，所以有 cache</span></div><div class="line">Collecting conda</div><div class="line">  Using cached https://files.pythonhosted.org/packages/74/4e/c533c3136427be62c38cc0e038cabf167bb54489c2ced2f6df903c456861/conda-4.3.16.tar.gz</div><div class="line">Collecting pycosat&gt;=0.6.1 (from conda)</div><div class="line">  Using cached https://files.pythonhosted.org/packages/c0/fd/e38d68774c0a345b0090d608a90f1fbf423970d812f7ec7aef9ac024e648/pycosat-0.6.3.zip</div><div class="line">Collecting requests&gt;=2.12.4 (from conda)</div><div class="line">  Using cached https://files.pythonhosted.org/packages/7d/e3/20f3d364d6c8e5d2353c72a67778eb189176f08e873c9900e10c0287b84b/requests-2.21.0-py2.py3-none-any.whl</div><div class="line">Collecting ruamel.yaml&gt;=0.11.14 (from conda)</div><div class="line">  Using cached https://files.pythonhosted.org/packages/d3/6b/7d085479a131c16fd910f22172ca7cecf5e5c8ec0b508abf543a54a3b4b0/ruamel.yaml-0.15.85-cp36-cp36m-win_amd64.whl</div><div class="line">Collecting menuinst (from conda)</div><div class="line">  Could not find a version that satisfies the requirement menuinst (from conda) (from versions: )No matching distribution found <span class="keyword">for</span> menuinst (from conda)</div></pre></td></tr></table></figure>
<p>找不到 conda 依赖的 menuinst。</p>
<p>Google 之，得到 <a href="https://stackoverflow.com/questions/43397018/could-not-find-a-version-that-satisfies-conda-for-python-3" target="_blank" rel="external">https://stackoverflow.com/questions/43397018/could-not-find-a-version-that-satisfies-conda-for-python-3</a> 的方案：安装 4.2.7 版本的 conda ，再用 conda 升级它自己：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pip install auxlib</div><div class="line"><span class="comment"># 省略输出</span></div><div class="line">pip install conda==4.2.7</div><div class="line"><span class="comment"># 这次提醒缺少 VSC++ 套件......</span></div></pre></td></tr></table></figure>
<p>咦，有点不对劲。我明明是想用 conda 管理二进制依赖，好不用自己安装各种非 Python 的编译环境来着。</p>
<p>没事，我在答案里还发现了 conda 的安装包：<a href="https://www.continuum.io/downloads#windows" target="_blank" rel="external">https://www.continuum.io/downloads#windows</a></p>
<p>结果点进去……Error522。嗯，也许最新版的下载地址变了，我直接在 <a href="https://continuum.io" target="_blank" rel="external">https://continuum.io</a> 找。</p>
<p>一点，地址变成 <a href="https://www.anaconda.com/" target="_blank" rel="external">https://www.anaconda.com/</a> 了。</p>
<h2 id="OK-Anaconda"><a href="#OK-Anaconda" class="headerlink" title="OK, Anaconda"></a>OK, Anaconda</h2><p>根据网上资料，这 continuum 就是开发 conda 的公司。可能由于 Anaconda 成为了最知名的产品，公司直接改名 Anaconda Inc. 了……</p>
<p>我找了半天，没有直接提供 conda 的安装包。最多安装 Miniconda，但是还是不可避免多出一个 Python 环境。</p>
<p>既然我并非真的闲得想手动安装一个一个常用依赖，只是想知道 Why，我最终安装了 Anaconda，并且多了一个 Anaconda 专用的 Python 3.7 （未加入 PATH）。以后一般 Python 的应用开发，使用 原来的 Python 3.6，Anaconda 相关的在 Anaconda Prompt 下操作。以上。</p>
<h2 id="some-tips"><a href="#some-tips" class="headerlink" title="some tips"></a>some tips</h2><p>pip 与 conda 并非竞争对手——他们的工作有部分重叠，但更多面向不同的需求：</p>
<ul>
<li>pip 面向纯 Python 环境，从源码安装，是 Python 官方包管理器</li>
<li>conda 来自 Python 不止于 Python，是为 PyData 社区解决各种非 Python 的二进制依赖</li>
</ul>
<p>本质上，这是一个二难质问：如果你愿意折腾用 pip 安装 conda ，你就没有必要安装 conda；既然你需要 conda 为你解决二进制依赖，你就不能用 pip 安装——因为 conda 本身也有一系列二进制依赖。</p>
<p>后续操作：（如果有必要，我考虑另起一篇展开说）</p>
<ul>
<li>安装 Anaconda （官方已经不提供二进制的 conda 安装包），既然这样，不再折腾</li>
<li>当前版本（2018.12）已带 Jupyter</li>
<li>添加清华 channels</li>
<li>conda 安装 nbextensions</li>
<li>修改 notebook 默认位置<ul>
<li>快捷方式改参数</li>
<li>配置文件改 <code>jupyter notebook --generate-config</code></li>
</ul>
</li>
</ul>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几乎所有人都直接安装 Anaconda。但它不过是 conda 包管理器 + 预置一系列常用 sci&amp;amp;math 包。&lt;/p&gt;
&lt;p&gt;如果我有环境洁癖，只允许存在一个 Python 环境，我可以 &lt;code&gt;pip install conda&lt;/code&gt; ，再逐个 &lt;code&gt;conda install xyz&lt;/code&gt; 安装那些 conda 下的包吗？&lt;/p&gt;
    
    </summary>
    
    
      <category term="pip" scheme="https://jaycechant.info/tags/pip/"/>
    
      <category term="Anaconda" scheme="https://jaycechant.info/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>配置 Golang 开发环境</title>
    <link href="https://jaycechant.info/2018/setup-golang-env/"/>
    <id>https://jaycechant.info/2018/setup-golang-env/</id>
    <published>2018-11-06T16:53:09.000Z</published>
    <updated>2020-01-12T13:06:31.432Z</updated>
    
    <content type="html"><![CDATA[<p>为想尝试 Go 的朋友开个头，介绍环境的配置。语言的优缺点不在此展开。</p>
<p>因身边多数使用 Win64 环境，以下无特殊说明均以 Win64 为例，日后有需要再补充其他平台部分。</p>
<a id="more"></a>
<h2 id="1-Go"><a href="#1-Go" class="headerlink" title="1. Go"></a>1. Go</h2><ul>
<li>下载：<a href="https://golang.org/dl/" target="_blank" rel="external">https://golang.org/dl/</a> （out of wall）</li>
<li>版本：1.9+，一般下载最新版本即可</li>
</ul>
<h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><p>访问官网下载页面，获取对应版本。不过如果你不懂得翻-墙，会发现访问不了官网，因为它在 Google 的服务器上。这点请自行解决。不过经过 PuTTY 和 iOS SDK 第三方下载被植入木马的事件，劝各位还是努力到官网下载。</p>
<p>Win64 的安装文件一般为 <code>go1.xx.y.windows-amd64.msi</code> ，下载好后安装，路径默认或自定义，没有强制要求，不要出现中文和空格，尽量短一些即可。个人路径供参考： <code>D:\Dev\Go</code> 。</p>
<h3 id="1-2-环境变量"><a href="#1-2-环境变量" class="headerlink" title="1.2 环境变量"></a>1.2 环境变量</h3><p>安装后设置环境变量，指定 官方工具包（及内置库） 和 工作目录。</p>
<p>以下设置均在：<code>我的电脑（Win10 此电脑） &gt; 右键菜单 &gt; 属性 &gt; 高级系统设置 &gt; 环境变量</code> ， 如果变量存在就确认内容，不存在就新建。</p>
<h4 id="1-2-1-GOROOT"><a href="#1-2-1-GOROOT" class="headerlink" title="1.2.1 GOROOT"></a>1.2.1 GOROOT</h4><p>指定 Go 的安装目录，并以此确定工具包和内置库的位置。确保 <code>GOROOT</code> 指向 Go 的安装目录 （例： <code>D:\Dev\Go</code>）。</p>
<h4 id="1-2-2-GOPATH"><a href="#1-2-2-GOPATH" class="headerlink" title="1.2.2 GOPATH"></a>1.2.2 GOPATH</h4><p>指定 Go 的 workspace（工作目录）。<code>GOPATH</code> 允许指定多个 workspace，中间以 <code>;</code> 隔开（跟 <code>PATH</code> 类似，其他平台下的分隔符是 <code>:</code>）。可以在任意一个 workspace 下开发，但是 <code>go get</code> 和 <code>go install</code> 的包只会放在第一个目录。当引用包的时候，会先查找 <code>%GOROOT%\pkg</code> 的语言内置包，再顺序查找每个 workspace 的 <code>src</code> 目录，找到就结束。</p>
<p>一般情况下，推荐设置两个 workspace ： 第一个存放下载的第三方依赖包，第二个存放本地开发的代码，分开避免混淆。例：<code>C:\Users\Jayce\go;E:\workspace\go</code> 。</p>
<h4 id="1-2-3-PATH"><a href="#1-2-3-PATH" class="headerlink" title="1.2.3 PATH"></a>1.2.3 PATH</h4><p><code>PATH</code> 是系统自带的执行路径，所以我们不能覆盖它，只能在后面追加。需要将<strong>GOROOT 的 bin 目录</strong> 和 <strong>第一个 workspace 的 bin 目录加入 PATH</strong> ，以调用 官方工具包 和 安装的第三方工具。其中如果你检查 GOROOT 的时候发现 GOROOT 已经配置好了，有可能 <code>%GOROOT%\bin</code> 也已经添加了，你可以复制到记事本里检查一下。</p>
<p>假定两个都没有添加，那么以上述 <code>GOPATH</code> 的配置为例，则是 <code>原来的PATH内容;%GOROOT%\bin;C:\Users\Jayce\go\bin</code></p>
<p><strong>注：Win10 对 PATH 的管理进行了优化，不再是一长串用 <code>;</code> 分隔的路径，而是一个路径的列表，追加时只需新建子项即可。</strong></p>
<h3 id="1-3-验证"><a href="#1-3-验证" class="headerlink" title="1.3 验证"></a>1.3 验证</h3><p>打开 cmd，然后按如下操作</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看安装版本</span></div><div class="line">go version</div><div class="line"><span class="comment"># 正常应该显示你安装的版本</span></div><div class="line"><span class="comment"># 找不到指令请检查安装  GOROOT 的安装目录是否正确 / PATH 里是否包含了 %GOROOT%\bin</span></div><div class="line">go version go1.<span class="number">10.1</span> windows/amd64</div></pre></td></tr></table></figure>
<h2 id="2-gcc-和-make"><a href="#2-gcc-和-make" class="headerlink" title="2. gcc 和 make"></a>2. gcc 和 make</h2><p>有时部分依赖包以 C 开发，需要用到 gcc 编译；另外，为简化编译流程，项目规模增大后会逐渐交由 make 管理编译。两个工具在 Linux 下一般自带，或通过系统的包管理很轻易地安装，Windows 下则要安装 MinGW-w64 。注意必须是 <strong>MinGW-w64</strong> 。MinGW 不兼容 64 位系统，同时长期不更新；而 w64 可以同时兼容 32 和 64 位。</p>
<ul>
<li>下载：<a href="https://sourceforge.net/projects/mingw-w64/" target="_blank" rel="external">https://sourceforge.net/projects/mingw-w64/</a></li>
</ul>
<h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><p>下载得到的是安装器，在选择版本后，会自动下载对应版本并安装。建议不要改动任何选项，只需要确保 Architecture 对应你的计算机即可（Win64 选 x86_64）。</p>
<p>安装路径依然没有强制要求，无中文和空格，尽量短即可。参考：<code>D:\Dev\mingw-w64</code> 。</p>
<h3 id="2-2-创建-make-的软链接"><a href="#2-2-创建-make-的软链接" class="headerlink" title="2.2 创建 make 的软链接"></a>2.2 创建 make 的软链接</h3><p>安装完后进入 安装目录的 bin 目录，可以看到大量的工具，其中有 <code>gcc.exe</code>  和 <code>mingw32-make.exe</code> ，没有 <code>make.exe</code> 。其实 <code>mingw32-make.exe</code> 就是，但是用这个名字调用太长，也不利于其他工具用默认的名字调用，所以我们要创建一个名字叫 <code>make.exe</code> 的软链。</p>
<p>首先用管理员权限打开 cmd （右键菜单 &gt; 用管理员权限打开），然后按如下操作：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 请修改路径对应你的安装目录</span></div><div class="line">C:\Windows\system32&gt;cd /d D:\Dev\mingw-w64\bin</div><div class="line"></div><div class="line">D:\Dev\mingw-w64\bin&gt;mklink make.exe mingw32-make.exe</div><div class="line">为 make.exe &lt;&lt;===&gt;&gt; mingw32-make.exe 创建的符号链接</div></pre></td></tr></table></figure>
<p><strong>建议创建软链之后就关掉管理员权限的 cmd，避免因权限过高造成不可恢复的误操作。后续操作在普通权限下执行即可。</strong></p>
<p>完成后你会看到 bin 目录下多了一个 <code>make.exe</code> 文件，然后执行 <code>dir make.exe</code> ，会看到</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">D:\Dev\mingw-w64\bin&gt;dir make.exe</div><div class="line"><span class="number">2018</span>/<span class="number">10</span>/<span class="number">04</span>  <span class="number">18</span>:<span class="number">17</span>    &lt;SYMLINK&gt;      make.exe [mingw32-make.exe]</div></pre></td></tr></table></figure>
<h3 id="2-3-PATH-环境变量"><a href="#2-3-PATH-环境变量" class="headerlink" title="2.3 PATH 环境变量"></a>2.3 PATH 环境变量</h3><p>跟 Go 安装类似的， bin 目录也要追加到 PATH 目录的最后，详细可以参考 1.2.3 Go 的 PATH 环境变量部分。</p>
<p><strong>特别强调：mingw-w64 下面还有一套 mingw32，添加到 PATH 的是根目录的 bin，不是 mingw32 下面的！！</strong></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mingw-w64</div><div class="line">├── bin <span class="comment"># 64位系统认准这个！！</span></div><div class="line">├── mingw32</div><div class="line">│   ├── bin <span class="comment"># 不是这个</span></div><div class="line">......</div></pre></td></tr></table></figure>
<h3 id="2-4-验证"><a href="#2-4-验证" class="headerlink" title="2.4 验证"></a>2.4 验证</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gcc --version</div><div class="line"><span class="comment"># 正常会输出 gcc 的版本，64位：x86_64, 32位：i686; 注意区分</span></div><div class="line">make -v</div><div class="line"><span class="comment"># 能调用就行，不需要留意位数</span></div></pre></td></tr></table></figure>
<h2 id="3-项目包管理及编译"><a href="#3-项目包管理及编译" class="headerlink" title="3. 项目包管理及编译"></a>3. 项目包管理及编译</h2><h3 id="3-0-预备知识：Go-的目录结构与包管理"><a href="#3-0-预备知识：Go-的目录结构与包管理" class="headerlink" title="3.0 预备知识：Go 的目录结构与包管理"></a>3.0 预备知识：Go 的目录结构与包管理</h3><p>每个 workspace 下都有三个指定用途的目录，用到的时候如果不存在，会自动创建：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">├── bin <span class="comment"># 存放 install 之后的可执行文件</span></div><div class="line">├── pkg <span class="comment"># 存放编译之后链接之前的中间文件</span></div><div class="line">└── src <span class="comment"># 存放 包 的源文件</span></div></pre></td></tr></table></figure>
<p>其中 <code>go get</code> 获得的 src 和 <code>go install</code> 获得的 bin ，会放在第一个 workspace 中，所以建议至少添加两个 workspace，并在第二个进行本地开发，避免混淆。</p>
<p>Go 语言引用包时，需要在代码开头 import 对应包的路径（非包名，虽然路径的最后一层目录往往跟包名一样，但也可以不一样）：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"../local/relative/path"</span> <span class="comment">// 相对路径。不纳入 workspace 的小项目允许。正规项目需要纳入，会报错！！</span></div><div class="line">    <span class="string">"github.com/urface/cli"</span> <span class="comment">// 全局路径。</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p>全局路径的 import </p>
<ol>
<li>先在 <code>%GOROOT%\pkg</code> 查找内置的包（已编译，所以引用 pkg）</li>
<li>再在每个 workspace 的 src 目录查找</li>
<li>在 1.6 版本后新增了项目根目录下的 vendor 目录，可以通过依赖管理工具拷贝特定版本的依赖，方便锁定依赖的版本，并随项目源码一起提交。</li>
</ol>
<p>使用了 local import 的包，不能被别的包 import，所以在正式项目中基本是禁止使用的。那么需要被引用的包只能存放在 src 或者 vendor 中。</p>
<p>跟 Java 相比最大的差别就是， <strong>项目的根目录不在 import 的搜索范围内</strong> 。Java 项目内的包，包名（跟路径对应）不包括项目名，从根目录下开始算；Go 没有项目本地包的概念，都是全局 import，包路径从 src 下开始算，所以项目<strong>根目录名</strong>也是包路径的一部分。由此得出结论：</p>
<ul>
<li>Go 项目必须在 workspace 的 src 目录下开发</li>
<li>根目录 <strong>名字确定后就不能随意更改</strong> ，否则项目内的互相 import 都得改</li>
</ul>
<h3 id="3-1-包管理"><a href="#3-1-包管理" class="headerlink" title="3.1 包管理"></a>3.1 包管理</h3><p>有了上述知识准备，接下来的内容就容易理解了。</p>
<ul>
<li>git clone 必须在 （第二个） workspace 的 src 目录进行 （后续要新建项目同理）。</li>
<li>项目名（例：myproj） 需要跟 import 路径 （<code>import myproj/xxx/yyy</code>） 保持一致，新建项目时就要考虑，clone 之后不能修改目录名。</li>
<li>推荐使用官方的依赖管理工具 dep，所有第三方依赖都会拷贝到 vendor 跟源码一起管理，clone 后不需 <code>go get</code> 对应的依赖。</li>
</ul>
<h3 id="3-2-编译"><a href="#3-2-编译" class="headerlink" title="3.2 编译"></a>3.2 编译</h3><p>在确保做好包管理的基础上，编译就很简单了，在根目录打开 cmd：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go build</div></pre></td></tr></table></figure>
<p>即可。 </p>
<p>（后续项目复杂度增加后，编译建议交给 make 管理。）</p>
<h2 id="4-IDE"><a href="#4-IDE" class="headerlink" title="4. IDE"></a>4. IDE</h2><ul>
<li><p><a href="https://github.com/visualfc/liteide" target="_blank" rel="external">LiteIDE</a>：LiteIDE is a simple, open source, cross-platform Go IDE</p>
<p>国人开发的开源跨平台 IDE，简单，免费，够用。</p>
</li>
<li><p><a href="https://www.jetbrains.com/go/" target="_blank" rel="external">GoLand</a>：A Clever IDE to Go by JetBrains</p>
<p>IDE 名门 JetBrains 出品，口碑很好，就是要付费。</p>
</li>
<li><p><a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a>：Code Editing. Redefined</p>
<p>传统软件巨头微软拥抱开源之后的 开源 IDE ，热度很高；并非专门为 Go 设计，但提供相关插件。</p>
</li>
</ul>
<p>视乎你更习惯哪个 IDE，看你自己喜欢。</p>
<h2 id="5-其他工具"><a href="#5-其他工具" class="headerlink" title="5. 其他工具"></a>5. 其他工具</h2><ul>
<li>bindata：将资源文件编译成 go 源码，参与编译。（类似 Android 下的 R.java）</li>
<li>dep：Go 官方依赖管理工具，将指定版本的第三方依赖拷贝到 vendor 目录，跟源码一起管理。</li>
</ul>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为想尝试 Go 的朋友开个头，介绍环境的配置。语言的优缺点不在此展开。&lt;/p&gt;
&lt;p&gt;因身边多数使用 Win64 环境，以下无特殊说明均以 Win64 为例，日后有需要再补充其他平台部分。&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://jaycechant.info/tags/golang/"/>
    
      <category term="dep" scheme="https://jaycechant.info/tags/dep/"/>
    
  </entry>
  
  <entry>
    <title>golang 依赖管理：glide 从入门到放弃（转投 dep）</title>
    <link href="https://jaycechant.info/2018/glide-from-start-up-to-give-up/"/>
    <id>https://jaycechant.info/2018/glide-from-start-up-to-give-up/</id>
    <published>2018-10-24T10:01:17.000Z</published>
    <updated>2020-01-07T09:06:14.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x0-结论"><a href="#0x0-结论" class="headerlink" title="0x0 结论"></a>0x0 结论</h2><p>先丢结论，两个推荐选项：</p>
<ul>
<li>forked glide + 配置 mirror ：<a href="https://github.com/xkeyideal/glide" target="_blank" rel="external">https://github.com/xkeyideal/glide</a> ，具体修复哪些 bug ，以及它特有的 mirror 配置，请看 <a href="https://github.com/xkeyideal/glide/blob/master/README_CN.md" target="_blank" rel="external">https://github.com/xkeyideal/glide/blob/master/README_CN.md</a></li>
<li>dep + proxy ：<a href="https://github.com/golang/dep" target="_blank" rel="external">https://github.com/golang/dep</a> ，proxy 不过是设置 <code>http_proxy</code> 和 <code>https_proxy</code> 两个环境变量。</li>
</ul>
<a id="more"></a>
<p>glide 声名在外，但太子 dep 出生以来不再活跃，bug 不少且修复不活跃，要改用网友 fork 的版本。<strong>如果不会搞 proxy，推荐这个</strong> 。</p>
<p>而 <strong>长远考虑，官方支持的 dep 更好</strong> ，别的不说，光 prune 一个特性就值了。</p>
<p>折腾过程请看下文：</p>
<hr>
<p>go 最近几年热了起来，我一个长期靠 Java 吃饭的人，也从 Python 吹，变成了 go 吹。</p>
<h2 id="0x1-依赖管起来-glide-init"><a href="#0x1-依赖管起来-glide-init" class="headerlink" title="0x1 依赖管起来 glide init"></a>0x1 依赖管起来 glide init</h2><p>一开始就知道 go 官方的依赖管理不给力。如果第三方依赖有 breaking changes，或者干脆删库走人，好好一个项目，换个没有依赖包缓存的机器，就编译不能了。1.5 开始引入了 vendor 目录，但毕竟没有默认启用，工具支持也不够（当时 dep 不知道是没发布，还是还在 alpha）。</p>
<p>当时看了网上的讨论，好像一致推崇 glide 。安装，玩一下就算了。当时写小工具，依赖很少，没把 glide 用起来。（多数是用 go 重写 Python 工具。把工具共享出去时别人没装 Python，懒得折腾打包。）</p>
<h3 id="breaking-changes"><a href="#breaking-changes" class="headerlink" title="breaking changes"></a>breaking changes</h3><p>直到写稍大一点的项目，依赖多起来。但还是拖着，心想具体用哪个包可能还会变，不会刚写两天就来一个 breaking change。</p>
<p>写到稍有模样，碰到个 bug，最后发现是依赖包引起的，去主页一看，作者已经 fix 了，是个 breaking change，发了个大版本。我升级了，还好 breaking 的地方对我没有影响。但这样一来，就下决心把依赖管理起来。</p>
<h3 id="碰『壁』"><a href="#碰『壁』" class="headerlink" title="碰『壁』"></a>碰『壁』</h3><p>（这不是教学帖，不教安装使用。反正教程一搜一大把。）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">glide init</div><div class="line">...... // 省略 glide 问我的一堆问题</div><div class="line">glide install</div><div class="line">[INFO]  Lock file (glide.lock) does not exist. Performing update.</div><div class="line">[INFO]  Downloading dependencies. Please wait...</div><div class="line">...... // 省略那些成功的包</div><div class="line">[INFO]  --&gt; Fetching golang.org/x/crypto/acme/autocert</div><div class="line">[WARN]  Unable to checkout golang.org/x/crypto/acme/autocert</div><div class="line">[ERROR] Error looking <span class="keyword">for</span> golang.org/x/crypto/acme/autocert: Cannot detect VCS</div><div class="line">...... // 这种报错一个 4 个，都是 golang.org 上的包</div></pre></td></tr></table></figure>
<p>出问题问谷歌，然后找到这么一个文章： <a href="https://studygolang.com/articles/10453" target="_blank" rel="external">https://studygolang.com/articles/10453</a> ， 里面说是 golang.org 被墙了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">curl golang.org</div><div class="line">curl: (7) Failed to connect to golang.org port 80: Timed out</div><div class="line"></div><div class="line">curl https://golang.org</div><div class="line">curl: (7) Failed to connect to golang.org port 443: Timed out</div><div class="line"></div><div class="line">curl -x socks5://127.0.0.1:1080 https://golang.org/x/crypto/acme/autocert</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>/&gt;</div><div class="line">&lt;meta name=<span class="string">"go-import"</span> content=<span class="string">"golang.org/x/crypto git https://go.googlesource.com/crypto"</span>&gt;</div><div class="line">&lt;meta name=<span class="string">"go-source"</span> content=<span class="string">"golang.org/x/crypto https://github.com/golang/crypto/ https://github.com/golang/crypto/tree/master&#123;/dir&#125; https://github.com/golang/crypto/blob/master&#123;/dir&#125;/&#123;file&#125;#L&#123;line&#125;"</span>&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"refresh"</span> content=<span class="string">"0; url=https://godoc.org/golang.org/x/crypto/acme/autocert"</span>&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">Nothing to see here; &lt;a href=<span class="string">"https://godoc.org/golang.org/x/crypto/acme/autocert"</span>&gt;move along&lt;/a&gt;.</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>确实被墙了。那平时上为什么毫无障碍的？这时才想起翻 pac 配置，发现 golang.org 赫然在列，说明被屏蔽不是一天两天，早早被加入了 gfwlist。（后来得知网站托管在 google 服务器上）</p>
<p>而且结合 <code>golang.org/x/crypto</code> 的重定向 和 meta 信息，可以看出来 golang.org 只是提供重定向信息，<code>go get</code> 和 <code>glide</code> 应该是解析这些信息之后，再去 googlesource 或者 github 取代码。而目前第一步就 Time out 了，所以即使给 git 加 proxy 也没用。</p>
<h2 id="0x2-配置镜像-glide-mirror"><a href="#0x2-配置镜像-glide-mirror" class="headerlink" title="0x2 配置镜像 glide mirror"></a>0x2 配置镜像 glide mirror</h2><h3 id="mirror-的-N-种配置方法"><a href="#mirror-的-N-种配置方法" class="headerlink" title="mirror 的 N 种配置方法"></a>mirror 的 N 种配置方法</h3><p>那配置镜像吧。咦，不对，别人的例子都是 import 依赖包的根目录，例如 <code>golang.org/x/crypto</code> ，可以直接映射 <code>github.com/golang/crypto</code> ，但是子包 <code>golang.org/x/crypto/acme/autocert</code> 怎么办？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">glide mirror <span class="built_in">set</span> golang.org/x/crypto github.com/golang/crypto</div></pre></td></tr></table></figure>
<p>照样 <code>Cannot detect VCS</code> 。 这个命令实际上写入了 <code>~/.glide/mirrors.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">repos:</span> <span class="comment"># 以这个包为例子，省略同理的其他包，下同</span></div><div class="line"><span class="attr">- original:</span> golang.org/x/crypto</div><div class="line"><span class="attr">  repo:</span> github.com/golang/crypto</div></pre></td></tr></table></figure>
<p>所以为了避免反复 <code>glide mirror remove</code>  再 set，我直接在 <code>mirrors.yaml</code> 上修改：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">repos:</span> <span class="comment"># 考虑 import 的路径是 golang.org/x/crypto/acme/autocert，可能不会命中 golang.org/x/crypto</span></div><div class="line"><span class="attr">- original:</span> golang.org/x/crypto/acme/autocert</div><div class="line"><span class="attr">  repo:</span> github.com/golang/crypto/acme/autocert</div></pre></td></tr></table></figure>
<p>继续一样的错误，再改</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">repos:</span> <span class="comment"># github 上实际的地址是 github.com/golang/crypto/tree/master&#123;/dir&#125;， github.com/golang/crypto/acme/autocert 根本不存在，也许映射到根目录，余下的会根据规则匹配？</span></div><div class="line"><span class="attr">- original:</span> golang.org/x/crypto/acme/autocert</div><div class="line"><span class="attr">  repo:</span> github.com/golang/crypto</div></pre></td></tr></table></figure>
<p>照旧，再改</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">repos:</span> <span class="comment"># 看到有些人加了 https，死马当活马医，加上试试</span></div><div class="line"><span class="attr">- original:</span> https://golang.org/x/crypto/acme/autocert</div><div class="line"><span class="attr">  repo:</span> https://github.com/golang/crypto</div></pre></td></tr></table></figure>
<p>好了，终于不报该死的 <code>Cannot detect VCS</code> 了。</p>
<h3 id="看不见的折腾"><a href="#看不见的折腾" class="headerlink" title="看不见的折腾"></a>看不见的折腾</h3><p>这数次不断尝试和失败的过程非常痛苦。因为没有一次跑到最后，没有生成 gllide.lock 文件，所以每次执行 <code>glide install</code> ，实际触发的都是 <code>glide update</code> ；而 github 虽然可以访问，速度并不快，在知道关键的 4 个包是否成功 fetch 前，先要忍受一堆包的 fetch updates，偶尔还会因为超时出现 <code>exit status 128</code>。</p>
<p>而除了上面列出的，还尝试过加 <code>--vcs git</code> ，加 <code>--base</code> ，给 git 加 proxy …… 尝试次数比看到的要多，只是最后证明无关就没有列出；每次失败之后都要思考背后的原因，看哪里还能调整一下。在这上面耗了大半天。</p>
<h2 id="0x3-还有-ERROR？-另一个-glide"><a href="#0x3-还有-ERROR？-另一个-glide" class="headerlink" title="0x3 还有 ERROR？ 另一个 glide"></a>0x3 还有 ERROR？ 另一个 glide</h2><h3 id="endless-errors"><a href="#endless-errors" class="headerlink" title="endless errors"></a>endless errors</h3><p>你以为这就完了？并没有！</p>
<p>在终于消灭了所有 <code>Cannot detect VCS</code> 之后</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[ERROR] Unable to <span class="built_in">export</span> dependencies to vendor directory: Error moving files: <span class="built_in">exit</span> status 1. output</div><div class="line">: ***********</div><div class="line">************** // 乱码会打乱这篇文章的编码，所以用 * 代替</div></pre></td></tr></table></figure>
<p>还有 ERROR，而且还乱码，什么鬼啊！？？ 然后我就找到了这个：</p>
<p><a href="https://github.com/xkeyideal/glide/blob/master/README_CN.md" target="_blank" rel="external">https://github.com/xkeyideal/glide/blob/master/README_CN.md</a></p>
<p>简单说，glide 有两个 bug，一个是子包的目录映射错误（还没成功 export 过，无缘见识），一个是 Windows 下 export dependencies 时的权限问题，乱码是由于编码（Windows 默认 GB2312，但 glide 输出 UTF-8）。因为原作者迟迟没有合 PR <a href="https://github.com/Masterminds/glide/pull/889/commits/cc37dc711a3191c2b91b01b9593c685660eeb9af" target="_blank" rel="external">#889</a> ，作者就 fork 之后修复了。（我去看了，17 年 7 月的 PR，到现在 18 年 10 月，仍然没有合并……）</p>
<h3 id="forked-glide"><a href="#forked-glide" class="headerlink" title="forked glide"></a>forked glide</h3><p>先把原来的 glide 重命名为 <code>glide.Materminds.bk</code> （在 <code>~/go/bin</code> 下），然后</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get github.com/xkeyideal/glide</div></pre></td></tr></table></figure>
<p>另外，记得加上 base 参数，实测过不加 export 的目录结构确实是错的。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">repos:</span></div><div class="line"><span class="attr">- original:</span> https://golang.org/x/crypto</div><div class="line"><span class="attr">  repo:</span> https://github.com/golang/crypto</div><div class="line"><span class="attr">  base:</span> github.com/golang/crypto</div></pre></td></tr></table></figure>
<p>已经忘了是第几次执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># glide init 只需执行一次，只要 glide.yaml 存在就不必再次执行</span></div><div class="line">glide install</div></pre></td></tr></table></figure>
<p>终于执行到了最后。</p>
<h2 id="0x4-转投-dep"><a href="#0x4-转投-dep" class="headerlink" title="0x4 转投 dep"></a>0x4 转投 dep</h2><p>完事了吗？还没有。</p>
<p>从上面的尝试可以看出，glide 虽在一众依赖管理工具中收获了人气， 但存在不少 bug；而 364 个 open issue / 34 个 oepn pr ，多数有一年没有处理，最早的居然是 15 年的 （截止 2018/10/24），可以看出来作者 <strong>不再活跃</strong> ，对一个开源项目来说， <strong>比有 bug 更糟糕</strong> 。</p>
<p>像 Windows 下的权限问题，上面 #889 一年多前提了 PR 没人管，9月又有人提了重复的PR <a href="https://github.com/Masterminds/glide/pull/1020" target="_blank" rel="external">#1020: Update winbug.go</a> ，作者依旧没有处理。</p>
<p>fork 项目虽解决了几个明显问题，毕竟不是活跃的原项目，更多是先修复继续用的权益之计，以后也很难代替原作者继续推进开发。</p>
<h3 id="重新评估"><a href="#重新评估" class="headerlink" title="重新评估"></a>重新评估</h3><p>我要考虑对于 go 依赖管理工具的认知是不是已经过时了。重新查这方面的对比，尽量留意时间近的帖子，翻到这么两篇：</p>
<ul>
<li><p><a href="https://github.com/golang/go/wiki/PackageManagementTools" target="_blank" rel="external">PackageManagementTools</a></p>
</li>
<li><p><a href="https://github.com/blindpirate/report-of-build-tools-for-java-and-golang" target="_blank" rel="external">A Survey on Build Tools of Golang and Java</a></p>
</li>
</ul>
<p>挑重点说：go 有了官方的依赖管理工具 dep，关注度很高，而这还是 17 年 11 月的比较，当时 dep 刚出不久。</p>
<p>关键我还在原版 glide 的 release history 发现这么个东西：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Release 0.13.0</div><div class="line">@mattfarina mattfarina released this on 29 Sep 2017 · 16 commits to master since this release</div><div class="line"></div><div class="line">The latest release of Glide brings continued support.</div><div class="line"></div><div class="line">Consider switching to dep</div><div class="line">Glide is used by a great number of projects and will continue to get support for some time. But, the near future is likely in dep. dep can handle importing Glide config files. Please consider trying dep on your project or converting to dep. If you encounter an issue please check if there is an existing bug report and file one if there is not.</div><div class="line"></div><div class="line">Glide will continue to be supported for some time as there are many users who rely on it and some are not able or ready to move to dep.</div></pre></td></tr></table></figure>
<p>重点就是：这是 Glide 最后一个持续支持的版本了（我的理解是，往后只 patch，不大改），你们考虑切换到 dep 吧。dep 都能导入 Glide 的配置了，未来是官方亲儿子的。</p>
<h3 id="亲儿子-dep"><a href="#亲儿子-dep" class="headerlink" title="亲儿子 dep"></a>亲儿子 dep</h3><p>说得那么好，试试。地址在这 <a href="https://github.com/golang/dep" target="_blank" rel="external">https://github.com/golang/dep</a></p>
<p>安装略过，请按官方指引来，以后也许会变。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 加 -gopath 优先检查本地 gopath，加 -v 看详细输出否则啥进度没有干着急</span></div><div class="line">dep init -gopath -v</div><div class="line">...... // 省略正常内容</div><div class="line">init failed: unable to solve the dependency graph: Solving failure: No versions of github.com/kataras/pio met constraints:</div><div class="line">        master: unable to deduce repository and <span class="built_in">source</span> <span class="built_in">type</span> <span class="keyword">for</span> <span class="string">"golang.org/x/sys/unix"</span>: unable to <span class="built_in">read</span> metadata: unable to fetch raw metadata: failed HTTP request to URL <span class="string">"http://golang.org/x/sys/unix?go-get=1"</span>: Get http://golang.org/x/sys/unix?go-get=1: dial tcp 216.239.37.1:80: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.</div></pre></td></tr></table></figure>
<p>又是 golang.org 无法访问。是不是同样的配方，熟悉的味道？</p>
<p>这还没到下载，而是分析依赖图时获取 metadata 就出错了，所以 gopath 里已有了 cache 并不改变结果。难道 glide 上的困难又得重来一遍？继续问谷歌，又找到一篇：<a href="https://my.oschina.net/u/553243/blog/1504715" target="_blank" rel="external">https://my.oschina.net/u/553243/blog/1504715</a></p>
<p>具体说，就是设置 <code>http_proxy</code> 和 <code>https_proxy</code> 两个环境变量，dep 自然会读取并使用。环境变量根据系统有差异，为了不影响其他地方，每次打开 cmd / shell 设一下也不算麻烦；当然 alias 也是一种解决办法。</p>
<h3 id="意外惊喜"><a href="#意外惊喜" class="headerlink" title="意外惊喜"></a>意外惊喜</h3><p>这回终于好了。依赖图分析需要网络，稍有点久，后面直接读 gopath，速度很快。之后就是把 vendor 提交掉。</p>
<p>不过，提交过程太流畅了，隐约有一丝不对劲。毕竟用 glide 的时候，提交卡顿了一会儿，70+M 的一堆小文件，很正常。去看一眼 vendor 文件夹，这次居然才 25+M！？太小了吧，难道漏文件了？</p>
<p>可是点进去看我就懂了，dep 把引用不到的子包删掉了。换言之，glide 的最小粒度是 项目，哪怕只引用了大项目里的一个子包，也会把整个项目 export 到 vendor； 而 dep 应该是基于 subpackage 或者 文件的，先分析依赖图，没有引用到的文件都不要。<code>Gopkg.toml</code> 里的这段可以作为佐证：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[prune]</div><div class="line">  go-tests = true</div><div class="line">  unused-packages = true</div></pre></td></tr></table></figure>
<p>用过之后，感觉 dep 相当简洁，<code>-gopath</code> 选项 和 prune 特性则是意外之喜。</p>
<h2 id="0x5-写在最后"><a href="#0x5-写在最后" class="headerlink" title="0x5 写在最后"></a>0x5 写在最后</h2><ul>
<li>在程序员的节日折腾这些，感受 GFW 带来的不便，相当不友好，感叹国内开发的不易，总有额外成本</li>
<li>今天这『群雄并起，太子一统』的故事套路，怎么感觉跟当年 pip 那么像</li>
</ul>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x0-结论&quot;&gt;&lt;a href=&quot;#0x0-结论&quot; class=&quot;headerlink&quot; title=&quot;0x0 结论&quot;&gt;&lt;/a&gt;0x0 结论&lt;/h2&gt;&lt;p&gt;先丢结论，两个推荐选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;forked glide + 配置 mirror ：&lt;a href=&quot;https://github.com/xkeyideal/glide&quot;&gt;https://github.com/xkeyideal/glide&lt;/a&gt; ，具体修复哪些 bug ，以及它特有的 mirror 配置，请看 &lt;a href=&quot;https://github.com/xkeyideal/glide/blob/master/README_CN.md&quot;&gt;https://github.com/xkeyideal/glide/blob/master/README_CN.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;dep + proxy ：&lt;a href=&quot;https://github.com/golang/dep&quot;&gt;https://github.com/golang/dep&lt;/a&gt; ，proxy 不过是设置 &lt;code&gt;http_proxy&lt;/code&gt; 和 &lt;code&gt;https_proxy&lt;/code&gt; 两个环境变量。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://jaycechant.info/tags/golang/"/>
    
      <category term="glide" scheme="https://jaycechant.info/tags/glide/"/>
    
      <category term="dep" scheme="https://jaycechant.info/tags/dep/"/>
    
  </entry>
  
  <entry>
    <title>为什么你应该学 Python</title>
    <link href="https://jaycechant.info/2017/why-you-should-learn-python/"/>
    <id>https://jaycechant.info/2017/why-you-should-learn-python/</id>
    <published>2017-10-18T15:37:29.000Z</published>
    <updated>2017-10-18T16:45:35.565Z</updated>
    
    <content type="html"><![CDATA[<p>人生苦短，我用Python</p>
<a id="more"></a>
<h2 id="1-What-amp-Why"><a href="#1-What-amp-Why" class="headerlink" title="1 What &amp; Why"></a>1 What &amp; Why</h2><h3 id="1-1-What’s-Python"><a href="#1-1-What’s-Python" class="headerlink" title="1.1 What’s Python?"></a>1.1 What’s Python?</h3><p><strong>Python</strong>（英语发音：/ˈpaɪθən/，类似 『派森』）, 是一种 <strong>面向对象</strong>、<strong>解释型</strong>、<strong>动态 强类型</strong> 程序设计语言。</p>
<p>由 Guido van Rossum 于 <strong>1989年底</strong> 发明，第一个公开发行版发行于 1991 年。</p>
<p>Python 语法 <strong>简洁而清晰</strong>，具有 <strong>丰富和强大的类库</strong>。常被称为 <strong>胶水语言</strong>，能够把用其他语言制作的各种模块（尤其是 C/C++）很轻松地联结在一起。</p>
<p>常见一种应用情形是，使用 Python 快速生成程序原型（有时是程序的最终界面），然后对其中有特别要求的部分，用更合适的语言改写，比如 3D 游戏中的图形渲染模块，性能要求特别高，就可以用 C++ 重写。</p>
<h3 id="1-2-Why-Python"><a href="#1-2-Why-Python" class="headerlink" title="1.2 Why Python?"></a>1.2 Why Python?</h3><blockquote>
<p>生产工具决定生产效率</p>
</blockquote>
<p>理由很多，我列举一些普遍公认的好处，以及优秀特性。</p>
<h4 id="1-2-1-明确、简单、优雅"><a href="#1-2-1-明确、简单、优雅" class="headerlink" title="1.2.1 明确、简单、优雅"></a>1.2.1 明确、简单、优雅</h4><p>这必须放在最前面，而且有可能是最重要的。</p>
<p>Python 在设计上坚持了 <strong>清晰划一</strong> 的风格，这使 Python 非常易读、易写、易维护。</p>
<p>Python 哲学里有这样一句话</p>
<blockquote>
<p>In the face of ambiguity, refuse the temptation to guess.<br>当存在多种可能时，不要尝试去猜测<br>There should be one– and preferably only one –obvious way to do it.<br>应该有一个——而且最好只有一个——最明显的方法去完成</p>
</blockquote>
<p>（Python 在语法上接近C语言，后面的例子会C/C++或者Java的人应该很快可以理解。）</p>
<hr>
<p>以下问题应该多少遇过：</p>
<ul>
<li>C语言 <code>b = a+++++a;</code> 的优先级问题</li>
<li>纠结 <code>while(){}</code> 和 <code>do{}while();</code> 的差别。</li>
<li>凌乱的括号和缩进，团队内难以统一</li>
<li>……</li>
</ul>
<p>于 Python，这些问题都不存在：</p>
<ul>
<li>没有 <code>++</code></li>
<li>只有 <code>while</code> 没有 <code>do</code> </li>
<li>推荐一行一句，不推荐分号</li>
<li>没有花括号</li>
<li>唯一缩进风格，缩进决定代码层级（换言之，缩进不仅仅是排版，而是语义的一部分）</li>
</ul>
<p>一般语言缩进不对，是风格问题，影响可读性，不影响运行；Python 哪怕多一个空格，<strong>报错，罢工。</strong></p>
<p>你可能会不习惯，甚至觉得蛮不讲理。可一旦你习惯并使用一段时间，需要阅读自己以前的代码，或者别人的代码：你会发现，可读性真好！</p>
<p>Python 有意设计 <strong>限制性很强的语法</strong>，使得不好的编程习惯直接不能通过编译（注：需要编译为字节码）。你只有两个选择：清晰易读的代码，和不能运行的代码，没有中间选项。同时也避免了初学者在多种写法中选择困难，在歧义中玩猜谜游戏。</p>
<hr>
<p>去掉令人费解的特性同时，Python 加入了很多符合直觉的语法</p>
<h5 id="同时赋值"><a href="#同时赋值" class="headerlink" title="同时赋值"></a>同时赋值</h5><p>（注：背后的机制是自动打包与解包）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C code</span></div><div class="line">temp = a;</div><div class="line">a = b;</div><div class="line">b = temp;</div></pre></td></tr></table></figure>
<p><br></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python code</span></div><div class="line">a, b = b, a</div></pre></td></tr></table></figure>
<p>五个变量按以下顺序交换，如果用 C 怎么写？多少个临时变量？按什么顺序赋值？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python</span></div><div class="line">a, b, c, d, e = b, d, a, e, c</div></pre></td></tr></table></figure>
<p>不仅是少了两行代码 和 一个临时变量，而是大大提升可读性！</p>
<h5 id="列表推导"><a href="#列表推导" class="headerlink" title="列表推导"></a>列表推导</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C Code</span></div><div class="line"><span class="keyword">int</span> <span class="built_in">list</span>[SIZE];</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; SIZE; i++)&#123;</div><div class="line">    <span class="built_in">list</span>[i] = i * <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python code</span></div><div class="line"></div><div class="line">list = [i * <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(SIZE)]</div></pre></td></tr></table></figure>
<h5 id="默认参数-和-命名参数"><a href="#默认参数-和-命名参数" class="headerlink" title="默认参数 和 命名参数"></a>默认参数 和 命名参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java code</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</div><div class="line">        bar(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> arg1)</span> </span>&#123;</div><div class="line">        bar(arg1, <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2)</span> </span>&#123;</div><div class="line">        System.out.println(arg1 + <span class="string">", "</span> + arg2)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// main() here</span></div><div class="line">Foo f = <span class="keyword">new</span> Foo();</div><div class="line">f.bar(); <span class="comment">// 1, 2</span></div><div class="line">f.bar(<span class="number">11</span>); <span class="comment">// 11, 2</span></div><div class="line">f.bar(<span class="number">11</span>, <span class="number">55</span>); <span class="comment">// 11, 55</span></div></pre></td></tr></table></figure>
<p><br></p>
<p>严格来说，由于 Python 的参数表没有指定类型，无法基于参数表做重载。<br>不过由于 <strong>默认参数</strong> 和 <strong>命名参数</strong> 的存在，Python 不需要重载，还更易用。  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python code</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self, arg1=<span class="number">1</span>, arg2=<span class="number">2</span>, arg3=<span class="number">3</span>, arg4=<span class="number">4</span>)</span>:</span></div><div class="line">        print(<span class="string">', '</span>.join(arg1, arg2, arg3, arg4))</div><div class="line">    </div><div class="line"><span class="comment"># main() here</span></div><div class="line">f = Foo()</div><div class="line">f.bar() <span class="comment"># 1, 2, 3, 4</span></div><div class="line">f.bar(<span class="number">56</span>) <span class="comment"># 56, 2, 3, 4</span></div><div class="line">f.bar(<span class="number">56</span>, <span class="number">78</span>) <span class="comment"># 56, 78, 3, 4</span></div><div class="line">f.bar(<span class="number">56</span>, arg3=<span class="number">99</span>) <span class="comment"># 56, 2, 99, 4 # 如果跳过了中间的参数，后面的参数都要用命名参数</span></div></pre></td></tr></table></figure>
<h5 id="map-与-匿名函数（λ-计算）"><a href="#map-与-匿名函数（λ-计算）" class="headerlink" title="map() 与 匿名函数（λ 计算）"></a>map() 与 匿名函数（λ 计算）</h5><p>以下代码试图将一个列表的每个数变成自己的平方</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C code</span></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; SIZE; i++)&#123;</div><div class="line">    <span class="built_in">list</span>[i] = <span class="built_in">list</span>[i] * <span class="built_in">list</span>[i];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python code</span></div><div class="line">list = map(<span class="keyword">lambda</span> n : n**<span class="number">2</span>, list)</div></pre></td></tr></table></figure>
<p><code>map()</code> 的两个参数分别是 <strong>函数</strong> 和 <strong>列表</strong>。（Python一切皆对象，包括函数本身也可以赋值和作为参数传递）作用是将 列表 中的每一个元素，都放进函数运行，将结果重新构成一个 新的列表 返回。</p>
<p>其中，这个匿名函数等价于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n**<span class="number">2</span></div></pre></td></tr></table></figure>
<h5 id="in-关键字"><a href="#in-关键字" class="headerlink" title="in 关键字"></a>in 关键字</h5><p>多条件判断</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C code</span></div><div class="line"><span class="keyword">if</span>((a == <span class="number">1</span> || a == <span class="number">2</span> || a == <span class="number">4</span> || a == <span class="number">9</span>) &amp;&amp; (b != <span class="number">3</span> &amp;&amp; b != <span class="number">8</span>))&#123;</div><div class="line">    <span class="comment">// so something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python code</span></div><div class="line"><span class="keyword">if</span> a <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>) <span class="keyword">and</span> b <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">3</span>, <span class="number">8</span>):</div><div class="line">    <span class="comment"># do something</span></div></pre></td></tr></table></figure>
<p>容器遍历</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C code</span></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ROW_SIZE; i++)&#123;</div><div class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; COL_SIZE; j++)&#123;</div><div class="line">        <span class="comment">// do something with list[i][j]</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python code</span></div><div class="line"><span class="keyword">for</span> row <span class="keyword">in</span> list:</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> row:</div><div class="line">        <span class="comment"># do something with x</span></div></pre></td></tr></table></figure>
<h5 id="容器特性"><a href="#容器特性" class="headerlink" title="容器特性"></a>容器特性</h5><p>按照一定间隔取元素</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C code</span></div><div class="line"><span class="keyword">for</span>(i = <span class="number">3</span>; i &lt; <span class="number">100</span>; i += <span class="number">4</span>)&#123;</div><div class="line">    <span class="comment">// do something with list[i]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python code</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> list[<span class="number">3</span>:<span class="number">100</span>:<span class="number">4</span>]:</div><div class="line">    <span class="comment"># do something with x</span></div></pre></td></tr></table></figure>
<p>访问尾部元素</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java code</span></div><div class="line">list[list.length - <span class="number">1</span>];</div></pre></td></tr></table></figure>
<p><br></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python code</span></div><div class="line">list[<span class="number">-1</span>]</div></pre></td></tr></table></figure>
<p>一不小心就介绍了太多特性</p>
<p>好用的特性不止这些，像 自动打包与解包，装饰器，闭包这些特性，以后有机会再讨论。</p>
<hr>
<p>大家可以发现，Python 代码非常接近自然语言，基本可以当作英语去阅读理解。所以 Python 又有 『可以运行的伪代码』 之称。</p>
<p>它的简单，让大脑从细节中解放，集中精力放在业务流程和算法上。</p>
<h4 id="1-2-2-跨平台、胶水语言、丰富和强大的类库"><a href="#1-2-2-跨平台、胶水语言、丰富和强大的类库" class="headerlink" title="1.2.2 跨平台、胶水语言、丰富和强大的类库"></a>1.2.2 跨平台、胶水语言、丰富和强大的类库</h4><h5 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h5><p>Python 是开源的语言，只要目标平台实现一个解析环境就能支持。</p>
<p>实际上 Mac 和 大多数 Linux 发行版 内置支持Python。只有 Windows 和 手机 需要安装一下。</p>
<h5 id="胶水语言"><a href="#胶水语言" class="headerlink" title="胶水语言"></a>胶水语言</h5><p>Python 可以跟很多语言互相调用。首先是 C。</p>
<p>这意味着如果某些地方用 Python 实现不好（譬如太慢），你可以换成更适合的语言实现。</p>
<h5 id="强大的类库"><a href="#强大的类库" class="headerlink" title="强大的类库"></a>强大的类库</h5><p>自带的库就包含大量高级数据类型，如 列表、元组、字典、集合、队列… 非常强大。<br>甚至于你要启动一个简单的 Server，一般的语言都要费点劲，Python 自带 HTTPServer ，跑起来就一两行代码。</p>
<p>至于各种第三方库，就强大到令人发指了。除了本身 Python 编写的库，由于 Python 对 C/C++ 友好，众多强大的开源软件包即使不是用 Python 写的，也往往提供 Python API。</p>
<ul>
<li>GUI 库 Qt</li>
<li>计算机视觉库 OpenCV</li>
<li>三维可视化库 VTK</li>
<li>医学图像处理库 ITK</li>
<li>3个著名的科学计算库 NumPy / SciPy / matplotlib </li>
<li>…</li>
</ul>
<p>良好的类库支持，聚集了一大批活跃的开发者，将开发成果继续开源发布出来……</p>
<p>强大的类库支持，让我们从重复造轮子的劳动中解放出来。</p>
<h4 id="1-2-3-快！"><a href="#1-2-3-快！" class="headerlink" title="1.2.3 快！"></a>1.2.3 快！</h4><p>这一点是前面两点的结果。</p>
<p>有网友实践，一个ASF XML 序列化工具，C++ 需要 1580 行，而Python只用 130 行。Python 作为一个高级语言的代码生产力高于多数语言的。（这里高级是指抽象层级更高，无好坏之分）</p>
<p>只要敲非常少的代码，引用强大的类库，就实现了需求；每次修改之后，不需要等待编译，马上可以运行。</p>
<p>这对于 <strong>快速原型</strong> 和 <strong>流程自动化</strong> 很重要。</p>
<h4 id="1-2-4-需求巨大"><a href="#1-2-4-需求巨大" class="headerlink" title="1.2.4 需求巨大"></a>1.2.4 需求巨大</h4><p>最新的 Github 语言排行，Python 已代替 Java 上升到第二的位置。</p>
<p>科学计算、数据挖掘、人工智能、自动化运维/测试 … 未来对于 Python 的需求非常大。</p>
<h4 id="1-2-5-缺点"><a href="#1-2-5-缺点" class="headerlink" title="1.2.5 缺点"></a>1.2.5 缺点</h4><p>Python 没有缺点吗？有：</p>
<ul>
<li><p>慢： 相对于 C/C++ ,  Java 而言，抽象层级高的代价，是执行效率不高。<br>但随着运算力越来越廉价 和 人的时间越来越宝贵，很多时候这变得不那么重要。<br>何况：</p>
<ol>
<li>自己写的 C/C++ 代码，算法效率未必比得上 Python 库里的实现</li>
<li>Python 已经优化得越来越快了，某些特定领域甚至超过了 C（通过 PyPy 的 JIT 技术）</li>
<li>根据 20/80 定律，可以把性能瓶颈用 C/C++ 重写。为什么不一开始就用 C/C++ ？Python 可以快速实现原型。<br>一般的自动化工具，根本感觉不到速度问题。</li>
</ol>
</li>
<li><p>动态语言难以维护大型项目：对于编程习惯不好的人，是的。  </p>
<p>但是同样的人，在静态语言也会面临问题。Java 之所以存在大量复杂的 Design Pattern ，很大一部分是为了绕过语言设置的限制，为此逻辑弄得晦涩难明。<br>Python 语法上做了大量限制，逻辑上却给予了很大的自由，可以很简单就实现原本复杂的设计模式才有的功能。<br>至于大型项目的可维护性，要依赖良好的设计 和 编码规范。另外也可以通过装饰器限制参数类型。不过从公司的角度，要找到合格的开发者，确实比 Java 要难。</p>
</li>
</ul>
<h2 id="2-How-to-Python"><a href="#2-How-to-Python" class="headerlink" title="2 How to Python"></a>2 How to Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python 3.x</span></div><div class="line">print(<span class="string">"Hello world!"</span>)</div></pre></td></tr></table></figure>
<p>That’s all!</p>
<hr>
<p>是的，我没有打算展开讲。</p>
<p>语法接近C，而且非常直观。我到现在为止没有买过任何一本 Python 的书，大多数早期的问题， API 文档就够了。（注1：Windows 版 Python 安装时，会附带一份 API 文档。注2：这段话写于 2015年，后来我买了一本 《Python cookbook》）</p>
<p>文档还看不懂，请打开浏览器。（谷哥还是度娘，自己选择）</p>
<p>到不得不买书的时候，往往已经比较深入了。</p>
<h3 id="Python-2-x-VS-Python-3-x"><a href="#Python-2-x-VS-Python-3-x" class="headerlink" title="Python 2.x VS Python 3.x"></a>Python 2.x VS Python 3.x</h3><p>作为将 <strong>简洁清晰</strong> 视作生命的语言，为了减轻历史包袱，Python 3.0 以后的版本，并 <strong>不兼容</strong> 之前的版本。于是，关于用哪一个版本就分成了两派。</p>
<p>其实很简单</p>
<ul>
<li>如果有什么理由不得不用 Python 2.x，例如有个库只有 2.x 的版本，那就用 2.x （注：随着时间推移这种情况已经越来越少）</li>
<li>否则，推荐从 3.x 开始。它代表未来 Python 的方向。到了今天，多数的库都已移植到 3.x ，官方宣布 2020 停止维护 2.x 。</li>
<li>或者不得已，都用。差别没那么大。</li>
</ul>
<hr>
<blockquote>
<p>Life is short, you need Python!<br><cite>– Bruce Eckel, ANSI C++ Comitee member</cite></p>
</blockquote>
<p><br></p>
<p>文章的最后，一起来看一下 <strong>Python 之禅</strong></p>
<blockquote>
<p><strong>The Zen of Python </strong><br><cite>——Tim Peters</cite><br>Beautiful is better than ugly.<br>Explicit is better than implicit.<br>Simple is better than complex.<br>Complex is better than complicated.<br>Flat is better than nested.<br>Sparse is better than dense.<br>Readability counts.<br>Special cases aren’t special enough to break the rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In the face of ambiguity, refuse the temptation to guess.<br>There should be one– and preferably only one –obvious way to do it.<br>Although that way may not be obvious at first unless you’re Dutch.<br>Now is better than never.<br>Although never is often better than <em>right</em> now.<br>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>Namespaces are one honking great idea – let’s do more of those!  </p>
</blockquote>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生苦短，我用Python&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://jaycechant.info/tags/Python/"/>
    
      <category term="why" scheme="https://jaycechant.info/tags/why/"/>
    
  </entry>
  
  <entry>
    <title>改用 screen 作为 byobu 的后端</title>
    <link href="https://jaycechant.info/2017/use-screen-as-byobu-backend/"/>
    <id>https://jaycechant.info/2017/use-screen-as-byobu-backend/</id>
    <published>2017-09-19T08:57:40.000Z</published>
    <updated>2017-10-12T14:41:16.668Z</updated>
    
    <content type="html"><![CDATA[<p>如题，一分钟Mark文。</p>
<a id="more"></a>
<p><strong>byobu</strong> 是很方便的 Unix 窗口管理器 和 Terminal Multiplexer，它是一套 profiles 或者说 wrapper ，降低使用 tmux 或 screen 的 配置 和 操作 成本。（如果不知道我说什么，看这里<a href="../special-for-tools/">《小工具专题》</a> ，还有 <a href="http://www.byobu.co/" target="_blank" rel="external">byobu主页</a>）</p>
<p>不过我只能算轻度用户，多数时间只使用两个功能：</p>
<ul>
<li>通过 detach 让我下线之后 Session 还能继续干活，以及下次上线不用重新找目录</li>
<li>方便的多窗口管理（F2，F3，F4 完事）</li>
</ul>
<p>从没关心过后面是 tmux 还是 screen。直到公司服务器的 byobu 由我一个人用，到大家都用。大家直接敲 <code>byobu</code> 完事，于是都挤在一个 Session 里，互相干扰。</p>
<hr>
<p>用 byobu 之前我是一个 screen 用户，自然想到大家各自连自己的 Session 。试着给 byobu 加 screen 的参数，发现不行。这时才想到去确认，发现当前版本（5.74）byobu 默认 backend 是 tmux。（印象中是不是早期 byobu 试过以 screen 为默认？忘了）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ byobu --version</div><div class="line">byobu version 5.74</div><div class="line">tmux 1.8</div><div class="line">$ cat ~/.byobu/backend</div><div class="line">BYOBU_BACKEND=tmux</div></pre></td></tr></table></figure>
<p>我知道 tmux 也很强大，加上一些指令和参数，也可以分别创建和管理 Session。可是，我已经习惯 screen ，所以决定把后端换掉。（各位看到这里不必跟我争论哪个好用）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 首先你要确定装了 screen，我一直有装就跳过</span></div><div class="line">$ vim ~/.byobu/backend <span class="comment"># 把里面的值改为 screen，然后保存</span></div><div class="line">$ cat ~/.byobu/backend</div><div class="line">BYOBU_BACKEND=screen</div></pre></td></tr></table></figure>
<p>这时候开始，执行 <code>byobu</code> 背后已经是 screen 在干活。最初目的是为了方便分别创建 Session，对应 <code>screen -S SessionName</code>，相应的 byobu 指令是否可行呢？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ byobu -S jayce</div><div class="line"><span class="comment"># 执行完跳到了一个新的窗口，但是不是真的成功了呢？</span></div><div class="line">~ byobu -ls</div><div class="line">There is a screen on:</div><div class="line">        151664.jayce    (Tuesday, September 19, 2017 05:30:12 CST)      (Attached)</div><div class="line">1 Socket <span class="keyword">in</span> /var/run/screen/jayce.</div></pre></td></tr></table></figure>
<p>注意最后的那个 Attached，表明现在就在这个 Session 里。</p>
<p>如果按 <code>F6</code> 或者 <code>Ctrl-A,Ctrl-D</code> detach ，之后再看：（注意，如果第一次在 screen 按 <code>Ctrl-A</code> ，它会询问 Escape Sequence，建议选 <code>1 screen mode</code> 就好）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ byobu -ls</div><div class="line">There is a screen on:</div><div class="line">        151664.jayce    (Tuesday, September 19, 2017 05:30:12 CST)      (Detached)</div><div class="line">1 Socket <span class="keyword">in</span> /var/run/screen/jayce.</div></pre></td></tr></table></figure>
<hr>
<p>基本能用了，只是还有一个小问题：如果不记得/不确定之前的 Session 还在不在，那么操作流程是</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ byobu -ls <span class="comment"># 列出当前所有 Session</span></div><div class="line">$ byobu -r mysession <span class="comment"># 如果 Session 还在就重连</span></div><div class="line">$ byobu -S mysession <span class="comment"># 如果因为重启的原因不在，新建一个</span></div></pre></td></tr></table></figure>
<p>比较麻烦。screen 自带 <code>-R SessionName</code> 参数实现『有则重连，无则新建』 的动作。可尝试把 <code>-R</code>加载 byobu 后面，不支持。byobu 是怎样接受参数并传递给 screen 的呢？试一下在没有 Session 的情况下，执行没有参数的 byobu：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ byobu</div><div class="line"><span class="comment"># Ctrl-A,D detach</span></div><div class="line">$ screen -ls <span class="comment"># 跟 byobu -ls 等价</span></div><div class="line">There is a screen on:</div><div class="line">        152910.byobu    (Tuesday, September 19, 2017 05:48:24 CST)      (Detached)</div><div class="line">1 Socket <span class="keyword">in</span> /var/run/screen/jayce.</div></pre></td></tr></table></figure>
<p><code>byobu</code> 背后执行的是 <code>screen -S byobu</code> ，也就是说，如果不指定任何参数，byobu 默认会创建一个名字叫 『byobu』 的 Session。而如果指定了（某些）参数，默认名字就不会起效。但 <code>-R</code> 不算在某些参数里。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ sudo vim `<span class="built_in">which</span> byobu`</div><div class="line"><span class="comment"># 省略....</span></div><div class="line">148                 BYOBU_SESSION_NAME=<span class="string">"-S <span class="variable">$PKG</span>"</span> <span class="comment"># 这里的 $PKG 的值就是 byobu</span></div><div class="line">149                 <span class="comment"># Zero out $BYOBU_SESSION_NAME if user has specified a session name</span></div><div class="line">150                 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span>; <span class="keyword">do</span></div><div class="line">151                         <span class="keyword">case</span> <span class="variable">$i</span> <span class="keyword">in</span></div><div class="line">152                                 -*r*|-*d*|-*D*|-*S*|-ls|-list)</div><div class="line">153                                         BYOBU_SESSION_NAME=</div><div class="line">154                                 ;;</div><div class="line">155                         <span class="keyword">esac</span></div><div class="line">156                 <span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>看完上面的内容，应该就知道了『某些参数』是哪些。当指定这几个参数时，默认 Session 名就会被清空。</p>
<p>那容易，把『某些参数』改成下面的样子：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">152                                 -*r*|-*R*|-*d*|-*D*|-*S*|-ls|-list)</div></pre></td></tr></table></figure>
<p>保存。好了，<code>-R</code> 可以用了。</p>
<p>就酱。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如题，一分钟Mark文。&lt;/p&gt;
    
    </summary>
    
    
      <category term="screen" scheme="https://jaycechant.info/tags/screen/"/>
    
      <category term="byobu" scheme="https://jaycechant.info/tags/byobu/"/>
    
  </entry>
  
  <entry>
    <title>OpenGrok + Universal ctags</title>
    <link href="https://jaycechant.info/2017/OpenGrok-Universal-ctags/"/>
    <id>https://jaycechant.info/2017/OpenGrok-Universal-ctags/</id>
    <published>2017-03-06T02:30:56.000Z</published>
    <updated>2017-09-24T09:04:30.354Z</updated>
    
    <content type="html"><![CDATA[<p>OpenGrok 环境搭建踩坑。</p>
<a id="more"></a>
<p>不知道 OpenGrok 自己放 Google ，为何选它不选 Source Insight 或者 Source Navigator 也请自己查。</p>
<p>安装时，服务器上已有 JDK 和 Tomcat，这部分直接跳过。</p>
<h2 id="Ctags"><a href="#Ctags" class="headerlink" title="Ctags"></a>Ctags</h2><h3 id="Exuberant-V-S-Universal"><a href="#Exuberant-V-S-Universal" class="headerlink" title="Exuberant V.S. Universal"></a>Exuberant V.S. Universal</h3><p>OpenGrok 官方 Requirements</p>
<blockquote>
<ul>
<li>Latest <a href="http://www.oracle.com/technetwork/java//" target="_blank" rel="external">Java</a> 1.8</li>
<li>A servlet container like <a href="https://glassfish.dev.java.net/" target="_blank" rel="external">GlassFish</a> or <a href="http://tomcat.apache.org/" target="_blank" rel="external">Tomcat</a> (8.x or later) also running with Java at least 1.8</li>
<li><a href="http://ctags.sourceforge.net/" target="_blank" rel="external">Exuberant Ctags</a></li>
</ul>
</blockquote>
<p>前两个就不说。原打算装 Exuberant Ctags（以下简称EC） ，结果看到知乎上大家讨论，说Universal Ctags （以下简称UC）更好。</p>
<p>官网在此 <a href="http://ctags.io/" target="_blank" rel="external">http://ctags.io/</a></p>
<p>简单说，就是 EC 托管在 SourceForge 不再活跃了，UC 作为 Fork 接过接力棒，继续开发。</p>
<hr>
<blockquote>
<p> autogen.sh runs autoreconf internally. If you use a (binary oriented) GNU/Linux distribution, autoreconf may be part of the autoconf package. In addition you may have to install automake and/or pkg-config, too.</p>
</blockquote>
<h3 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h3><p>官方提醒 autogen.sh 脚本里面调用了 <code>autoreconf</code> ，先安装 automake</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install automake <span class="comment"># ubuntu, centos 用 yum</span></div></pre></td></tr></table></figure>
<p>然后跟着官方走：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/universal-ctags/ctags.git</div><div class="line">$ <span class="built_in">cd</span> ctags</div><div class="line">$ ./autogen.sh</div><div class="line">$ ./configure --prefix=/<span class="built_in">where</span>/you/want <span class="comment"># defaults to /usr/local</span></div><div class="line">configure.ac:120: error: possibly undefined macro: AC_DEFINE</div><div class="line">      If this token and others are legitimate, please use m4_pattern_allow.</div><div class="line">      See the Autoconf documentation.</div><div class="line">configure.ac:342: error: possibly undefined macro: AC_MSG_ERROR</div><div class="line">configure.ac:596: error: possibly undefined macro: AS_IF</div><div class="line">autoreconf: /usr/bin/autoreconf failed with <span class="built_in">exit</span> status: 1</div></pre></td></tr></table></figure>
<p>报错，几个宏找不到。用这几个错误搜索，有人说这个包那个包，最后发现是 <code>pkg-config</code> 解决掉：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install pkg-config</div></pre></td></tr></table></figure>
<p>是不是很眼熟？是的，一开始那段提醒里就已经提到，因为 写着 or ，没当回事。安装完就不再报错了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ ./autogen.sh</div><div class="line">$ ./configure --prefix=/<span class="built_in">where</span>/you/want <span class="comment"># defaults to /usr/local</span></div><div class="line">$ make</div><div class="line">$ make install <span class="comment"># may require extra privileges depending on where to install</span></div><div class="line">$ ctags --version</div><div class="line">Universal Ctags 0.0.0(d2efd07), Copyright (C) 2015 Universal Ctags Team</div><div class="line">Universal Ctags is derived from Exuberant Ctags.</div><div class="line">Exuberant Ctags 5.8, Copyright (C) 1996-2009 Darren Hiebert</div><div class="line">  Compiled: Feb 15 2017, 15:19:35</div><div class="line">  URL: https://ctags.io/</div><div class="line">  Optional compiled features: +wildcards, +regex, +option-directory, +coproc</div></pre></td></tr></table></figure>
<p>UC 安装完毕。</p>
<h2 id="OpenGrok"><a href="#OpenGrok" class="headerlink" title="OpenGrok"></a>OpenGrok</h2><h3 id="初次索引"><a href="#初次索引" class="headerlink" title="初次索引"></a>初次索引</h3><p><a href="http://opengrok.github.io/OpenGrok/" target="_blank" rel="external">OpenGrok</a> 分两个主要部分：</p>
<ol>
<li>index 生成工具</li>
<li>搜索查询的 webapp</li>
</ol>
<p>下载之后，解压目录主要都是 1) ，llib/ 目录下的 <code>source.war</code> 则是 2)。</p>
<p>war 包直接放到 Tomcat 的 webapp 目录即可 通过 <code>http://path/to/tomcat/source/</code> 访问，只不过现在没有项目。</p>
<p>index 工具部分，主要是 lib/ 下的 <code>opengrok.jar</code> 和 bin/ 下的 <code>OpenGrok</code> 脚本。</p>
<p>网上大家讨论，往往要配置很多环境变量，调用 opengrok.jar 时还要给一堆参数。</p>
<p>我懒，直接来最简单的版本：</p>
<ol>
<li>环境变量只配置 <code>OPENGROK_INSTANCE_BASE</code> ，设为 OpenGrok 根目录，其他相关目录，你没有配置会自动在根目录下生成。然后把 <code>OPENGROK_INSTANCE_BASE/bin/</code> 加入 PATH （为了全局执行 OpenGrok ）。</li>
<li>上述配置生效后（source 或者 重新登录 ssh），将项目源码放到 <code>OPENGROK_INSTANCE_BASE/src/</code> 下 （我是直接<code>ln</code> 过去，当然你真放也行），然后 <code>sudo -E OpenGrok index</code> 。</li>
</ol>
<p>尽可能使用默认配置，除了上面半开玩笑的懒，另一方面原因是怕以后会忘掉自己怎么配置。默认配置有它的道理，刚接触拍脑袋决定很难比默认好，集中放在根目录下也方便管理。以后有新需要，再改不晚。</p>
<h3 id="关闭历史"><a href="#关闭历史" class="headerlink" title="关闭历史"></a>关闭历史</h3><p>第一次生成索引，非常顺利。</p>
<p>一段时间之后，代码有更新，重新生成索引，结果一堆报错，几乎每条都是相同内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">14:43:02 WARNING: Non-zero <span class="built_in">exit</span> code status 1 from <span class="built_in">command</span> [/usr/bin/svn, <span class="built_in">log</span>, --trust-server-cert, --non-interactive, --xml, -v] <span class="keyword">in</span> directory /path/to/the/<span class="built_in">source</span>: svn E170001: Unable to connect to a repository at URL <span class="string">'svn://path/to/SVN/repo'</span></div><div class="line">svn: E170001: Can<span class="string">'t get username or password</span></div></pre></td></tr></table></figure>
<p>原因清楚明白：OG 试图生成文件历史，对每个文件都执行 <code>svn log</code>。可是没有账号密码。</p>
<p>当然没有，我都没给它。</p>
<p>我后来查到，只要定义两个宏的值，就可以告诉它账号密码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">OPENGROK_SUBVERSION_USERNAME=<span class="string">"xxx"</span></div><div class="line">OPENGROK_SUBVERSION_PASSWORD=<span class="string">"yyy"</span></div></pre></td></tr></table></figure>
<p>其实你去看 OpenGrok 托管在 github 的 <a href="https://github.com/OpenGrok/OpenGrok" target="_blank" rel="external">源码</a> ，看<a href="https://github.com/OpenGrok/OpenGrok/blob/d2db363d135fe9eb6498bf458bbc49e30a494480/src/org/opensolaris/opengrok/history/SubversionRepository.java" target="_blank" rel="external">src/org/opensolaris/opengrok/history/SubversionRepository.java</a> ，源码里写得很清楚。</p>
<p>不过因为某些原因，我暂时不想生成历史，怎么关闭历史索引功能呢？我找到了一个讨论：<a href="https://github.com/OpenGrok/OpenGrok/issues/32" target="_blank" rel="external">https://github.com/OpenGrok/OpenGrok/issues/32</a></p>
<p>简单说，只有加了 <code>-S</code> 和 <code>-H</code> 参数，才会生成历史；这点去看 <a href="https://github.com/OpenGrok/OpenGrok/blob/75f1fc793f0b203cc97c1a75dc82522f171aa431/src/org/opensolaris/opengrok/index/Indexer.java" target="_blank" rel="external">src/org/opensolaris/opengrok/index/Indexer.java</a> 能得到证实。</p>
<hr>
<p>然而，我并没有加任何参数 ？！</p>
<p>一研究，是这样，参数是传给 oepngrok.jar 的。OpenGrok 脚本默认有添加一系列参数。</p>
<p>那就简单了，直接在 /path/to/OpenGrok/bin/OpenGrok 脚本里搜索，将 <code>-S</code> 和 <code>-H</code> 去掉。很简单，就不贴出来了。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OpenGrok 环境搭建踩坑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="OpenGrok" scheme="https://jaycechant.info/tags/OpenGrok/"/>
    
      <category term="ctags" scheme="https://jaycechant.info/tags/ctags/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins + 蒲公英 自动发布两个小技巧</title>
    <link href="https://jaycechant.info/2017/two-tips-for-jenkins-pgyer/"/>
    <id>https://jaycechant.info/2017/two-tips-for-jenkins-pgyer/</id>
    <published>2017-02-23T06:05:53.000Z</published>
    <updated>2017-09-24T09:32:31.724Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins 自动编译打包应用，配合蒲公英上传发布，可以做到扫码安装，简化测试步骤。这不是什么新鲜事物，以下两篇文章基本讲得很全：</p>
<ul>
<li><a href="http://www.jianshu.com/p/441e75f527f2" target="_blank" rel="external">jenkins配合蒲公英实现APK的自动发布</a></li>
<li><a href="http://blog.csdn.net/u011904605/article/details/54619549" target="_blank" rel="external">使用Jenkins生成 二维码</a></li>
</ul>
<p>我只说两个没有提到的小技巧。</p>
<a id="more"></a>
<h1 id="获取上传文件路径"><a href="#获取上传文件路径" class="headerlink" title="获取上传文件路径"></a>获取上传文件路径</h1><p>网上文章要么是直接用插件上传，要么学官方示例直接 curl。文件名要么直接跳过，要么需要 生成物名字 固定不变。</p>
<p>可我这里就不固定，为区分不同编译输出，会带有版本号日期等信息在文件名里。</p>
<p>我的做法是让 <code>find</code> 来处理，上代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FILENAME=`find ./app/build/outputs/apk/ -type f -name <span class="string">"*.apk"</span>`</div><div class="line">curl -F <span class="string">"file=@<span class="variable">$&#123;FILENAME&#125;</span>"</span> -F <span class="string">"uKey=yourUserKey"</span> -F <span class="string">"_api_key=yourApiKey"</span> http://www.pgyer.com/apiv1/app/upload</div></pre></td></tr></table></figure>
<p>脚本有效的前提是，对应目录下只能有一个apk，否则 FILENAME 里面就不止一个文件名了。要是不止一个 apk ，就要修改 <code>-name</code> 参数，让正则式只匹配想要的文件。</p>
<h1 id="获取二维码"><a href="#获取二维码" class="headerlink" title="获取二维码"></a>获取二维码</h1><p>基本原理是利用 <a href="http://wiki.jenkins-ci.org/display/JENKINS/Description+Setter+Plugin" target="_blank" rel="external">Jenkins description setter</a> ，并且在 <code>管理 &gt; Global Security &gt; Markup Formatter</code>  里打开 HTML。选 Safe HTML 也行，选 PegDown 然后不要 Suppress HTML 也行。我习惯Markdown，选了后者。</p>
<p>虽然启用 Markdown，但二维码还是要用 <code>&lt;img&gt;</code> 而不是 <code>![]()</code> ：因为 Markdown 在 Job 页面不解析，非得进入具体 build 页面才能看到，多点一下，不够方便。</p>
<p>上传应用后，在蒲公英管理页能看到二维码。可看地址，发现是与 应用 相关的 <strong>固定地址</strong>，相当于指向 latest-build 的链接。用这个链接，所有 build 都是相同二维码，都指向最新 build。</p>
<p>这当然不是想要的效果。前面列出的第二篇文章解决办法是，每次都把最新的二维码下载下来保存在本地，显示本地图片。</p>
<p>其实不用那么麻烦，让我们看看log输出：（星号是消去敏感信息）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"code"</span>:0,<span class="string">"message"</span>:<span class="string">""</span>,<span class="string">"data"</span>:&#123;<span class="string">"appKey"</span>:<span class="string">"*****"</span>,<span class="string">"userKey"</span>:<span class="string">"*****"</span>,<span class="string">"appType"</span>:<span class="string">"2"</span>,<span class="string">"appIsLastest"</span>:<span class="string">"1"</span>,<span class="string">"appFileSize"</span>:<span class="string">"*****"</span>,<span class="string">"appName"</span>:<span class="string">"*****"</span>,<span class="string">"appVersion"</span>:<span class="string">"1.1.3"</span>,<span class="string">"appVersionNo"</span>:<span class="string">"113"</span>,<span class="string">"appBuildVersion"</span>:<span class="string">"13"</span>,<span class="string">"appIdentifier"</span>:<span class="string">"**.**.**"</span>,<span class="string">"appIcon"</span>:<span class="string">"*****"</span>,<span class="string">"appDescription"</span>:<span class="string">"*****"</span>,<span class="string">"appUpdateDescription"</span>:<span class="string">""</span>,<span class="string">"appScreenshots"</span>:<span class="string">""</span>,<span class="string">"appShortcutUrl"</span>:<span class="string">"****"</span>,<span class="string">"appCreated"</span>:<span class="string">"2017-02-23 13:52:58"</span>,<span class="string">"appUpdated"</span>:<span class="string">"2017-02-23 13:52:58"</span>,<span class="string">"appQRCodeURL"</span>:<span class="string">"http:\/\/static.pgyer.com\/app\/qrcodeHistory\/*****(长度64的16进制hash，相当于256bit)"</span>&#125;&#125;</div></pre></td></tr></table></figure>
<p>这是 curl post 之后的输出，其实就是 服务器的 response。</p>
<p>appShortcutUrl 就是上面提到固定不变的短链接，假定这个值是 abcd，那么对应的链接就是 <code>static.pgyer.com/app/qrcode/abcd</code>。</p>
<p>不过，仔细留意的话，二维码的真实链接也已经在里面，就是：<code>&quot;appQRCodeURL&quot;:&quot;http:\/\/static.pgyer.com\/app\/qrcodeHistory\/*****(长度64的hash)&quot;</code> 。</p>
<p>怎么用呢？要知道 Jenkins description setter 本来就支持 正则式！</p>
<blockquote>
<p>If configured, the regular expression will be applied to each line in the build log. A description will be set based on the first match.</p>
</blockquote>
<p>换言之，它可以用正则式在 log 输出中找匹配，并且将匹配到的 match 用于description。</p>
<p>直接上配置：</p>
<p>Regular expression : <code>.*qrcodeHistory\\/(\S{64})</code></p>
<p>Description : <code>&lt;img src=&quot;http://static.pgyer.com/app/qrcodeHistory/\1&quot;&gt;</code></p>
<p>其中 <code>\1</code> 表示引用第一个匹配。（注意，匹配从0开始算，不过 <code>\0</code> 是整个匹配行）</p>
<p>搞定，提交代码之后，点一下build，然后扫码就可以测试了！！</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins 自动编译打包应用，配合蒲公英上传发布，可以做到扫码安装，简化测试步骤。这不是什么新鲜事物，以下两篇文章基本讲得很全：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/441e75f527f2&quot;&gt;jenkins配合蒲公英实现APK的自动发布&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/u011904605/article/details/54619549&quot;&gt;使用Jenkins生成 二维码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我只说两个没有提到的小技巧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="https://jaycechant.info/tags/Jenkins/"/>
    
      <category term="pgyer" scheme="https://jaycechant.info/tags/pgyer/"/>
    
  </entry>
  
  <entry>
    <title>json-lib-2.4-jdk15 的疑似 bug</title>
    <link href="https://jaycechant.info/2017/suspected-bug-in-json-lib-2-4-jdk15/"/>
    <id>https://jaycechant.info/2017/suspected-bug-in-json-lib-2-4-jdk15/</id>
    <published>2017-02-21T09:12:31.000Z</published>
    <updated>2017-09-24T10:00:50.146Z</updated>
    
    <content type="html"><![CDATA[<p>使用 json-lib 时发现了比较诡异的现象，分析半天没有找到原因。最后因时间关系，直接替换成 org.json 解决了。疑似json-lib 有 bug，Mark 一个，以后再看。</p>
<a id="more"></a>
<p>最近尝试封装某网络 API ，提供接口给上层调用。该 API 使用 json 发送数据。一开始图方便，本想直接用 String 拼接了事，后来实际一写，发现 json 结构有三层，比较复杂，而且有动态增删改字段的需求，改为老老实实构建 JSONObject ，发送前转成 String 。</p>
<p>不像 JavaScript 和 Python 那样有官方的 json 实现，Java 的 json 实现山头林立。我粗略数了一下 json.org 官网上都有25个之多！我也不要什么复杂的功能，只要</p>
<ol>
<li>根据需要建立标准 json 对象结构</li>
<li>方便在 对象 和 字符串 之间互相转换</li>
</ol>
<p>够了。</p>
<p>大概扫一眼，<code>net.sf.json-lib</code> 和 <code>org.json</code> 都够用，刚好这两个包接口极为接近。项目别的地方已经引用了 json-lib，干脆就它。</p>
<p><em>注：代码是对某网络 API的封装，它的API都是公开信息。敏感信息我已经消去。</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setPredefinedKeyValue</span><span class="params">(String key, Object value)</span></span></div><div class="line">        <span class="keyword">throws</span> Exception &#123;</div><div class="line">    System.out.println(<span class="string">"key:"</span> + key + <span class="string">", value:"</span> + value);</div><div class="line">    <span class="keyword">if</span> (ROOT_KEYS.contains(key)) &#123;</div><div class="line">        rootJson.put(key, value);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (PAYLOAD_KEYS.contains(key)) &#123;</div><div class="line">        JSONObject payloadJson = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (rootJson.has(<span class="string">"payload"</span>)) &#123;</div><div class="line">            payloadJson = rootJson.getJSONObject(<span class="string">"payload"</span>);</div><div class="line">            System.out.println(<span class="string">"payload exists: "</span> + payloadJson.toString());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            payloadJson = <span class="keyword">new</span> JSONObject();</div><div class="line">            rootJson.put(<span class="string">"payload"</span>, payloadJson);</div><div class="line">            System.out.println(<span class="string">"new payload."</span>);</div><div class="line">        &#125;</div><div class="line">        payloadJson.put(key, value);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (BODY_KEYS.contains(key)) &#123;</div><div class="line">        System.out.println(<span class="string">"Enter body =========="</span>);</div><div class="line">        JSONObject bodyJson = <span class="keyword">null</span>;</div><div class="line">        JSONObject payloadJson = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (rootJson.has(<span class="string">"payload"</span>)) &#123;</div><div class="line">            payloadJson = rootJson.getJSONObject(<span class="string">"payload"</span>);</div><div class="line">            System.out.println(<span class="string">"payload exists: "</span> + payloadJson.toString());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            payloadJson = <span class="keyword">new</span> JSONObject();</div><div class="line">            rootJson.put(<span class="string">"payload"</span>, payloadJson);</div><div class="line">            System.out.println(<span class="string">"new payload and add. root: "</span> + rootJson.toString());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"payload before has(body) : "</span> + payloadJson.toString());</div><div class="line">        <span class="keyword">if</span> (payloadJson.has(<span class="string">"body"</span>)) &#123;</div><div class="line">            bodyJson = payloadJson.getJSONObject(<span class="string">"body"</span>);</div><div class="line">            System.out.println(<span class="string">"body exists: "</span> + bodyJson.toString());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            bodyJson = <span class="keyword">new</span> JSONObject();</div><div class="line">            payloadJson.put(<span class="string">"body"</span>, bodyJson);</div><div class="line">            System.out.println(<span class="string">"new body and add. payload: "</span> + payloadJson.toString());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"body before put: "</span> + bodyJson.toString());</div><div class="line">        bodyJson.put(key, value);</div><div class="line">        System.out.println(<span class="string">"body after put: "</span> + bodyJson.toString());</div><div class="line">        System.out.println(<span class="string">"Exit body =========="</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (POLICY_KEYS.contains(key)) &#123;</div><div class="line">        <span class="comment">// ......</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// ......</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下是 <code>json-lib</code> 的log</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">key:appkey, value:********************************</div><div class="line">key:<span class="built_in">type</span>, value:customizedcast</div><div class="line">key:<span class="built_in">alias</span>, value:***********</div><div class="line">key:alias_type, value:phone</div><div class="line">key:ticker, value:测试</div><div class="line">Enter body ==========</div><div class="line">new payload and add. root: &#123;<span class="string">"alias_type"</span>:<span class="string">"phone"</span>,<span class="string">"payload"</span>:&#123;&#125;,<span class="string">"alias"</span>:<span class="string">"***********"</span>,<span class="string">"appkey"</span>:<span class="string">"********************************"</span>,<span class="string">"type"</span>:<span class="string">"customizedcast"</span>&#125;</div><div class="line">payload before has(body) : &#123;&#125;</div><div class="line">new body and add. payload: &#123;<span class="string">"body"</span>:&#123;&#125;&#125;</div><div class="line">body before put: &#123;&#125;</div><div class="line">body after put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:title, value:测试标题</div><div class="line">Enter body ==========</div><div class="line">payload exists: &#123;&#125;</div><div class="line">payload before has(body) : &#123;&#125;</div><div class="line">new body and add. payload: &#123;<span class="string">"body"</span>:&#123;&#125;&#125;</div><div class="line">body before put: &#123;&#125;</div><div class="line">body after put: &#123;<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:text, value:测试内容</div><div class="line">Enter body ==========</div><div class="line">payload exists: &#123;&#125;</div><div class="line">payload before has(body) : &#123;&#125;</div><div class="line">new body and add. payload: &#123;<span class="string">"body"</span>:&#123;&#125;&#125;</div><div class="line">body before put: &#123;&#125;</div><div class="line">body after put: &#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:after_open, value:go_app</div><div class="line">Enter body ==========</div><div class="line">payload exists: &#123;<span class="string">"body"</span>:&#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>&#125;&#125;</div><div class="line">payload before has(body) : &#123;<span class="string">"body"</span>:&#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>&#125;&#125;</div><div class="line">body exists: &#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>&#125;</div><div class="line">body before put: &#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>&#125;</div><div class="line">body after put: &#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"after_open"</span>:<span class="string">"go_app"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:display_type, value:notification</div><div class="line">payload exists: &#123;<span class="string">"body"</span>:&#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"after_open"</span>:<span class="string">"go_app"</span>&#125;&#125;</div><div class="line">key:production_mode, value:<span class="literal">true</span></div><div class="line">key:timestamp, value:**********</div><div class="line">body: &#123;<span class="string">"appkey"</span>:<span class="string">"********************************"</span>,<span class="string">"type"</span>:<span class="string">"customizedcast"</span>,<span class="string">"alias"</span>:<span class="string">"***********"</span>,<span class="string">"alias_type"</span>:<span class="string">"phone"</span>,<span class="string">"payload"</span>:&#123;<span class="string">"display_type"</span>:<span class="string">"notification"</span>,<span class="string">"body"</span>:&#123;<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"after_open"</span>:<span class="string">"go_app"</span>&#125;&#125;,<span class="string">"production_mode"</span>:<span class="string">"true"</span>,<span class="string">"timestamp"</span>:<span class="string">"**********"</span>&#125;</div></pre></td></tr></table></figure>
<p>问题在第 15 行开始出现，明明前面刚添加完 body ，马上就不见了；然而最后添加 after_open 时，包含 text 的 body 却保留下来了！ 而且每次运行结果都一样，并不随机。</p>
<p>改为 <code>org.json</code> 后的 log （因两个包接口基本兼容，只是修改 import 的包，还有把初始化 <code>JSONObject.fromObject(str)</code> 改为 <code>new JSONObject(str)</code> 而已，上面代码一点没动，就不重新贴了）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">key:appkey, value:********************************</div><div class="line">key:<span class="built_in">type</span>, value:customizedcast</div><div class="line">key:<span class="built_in">alias</span>, value:***********</div><div class="line">key:alias_type, value:phone</div><div class="line">key:ticker, value:测试</div><div class="line">Enter body ==========</div><div class="line">new payload and add. root: &#123;<span class="string">"alias_type"</span>:<span class="string">"phone"</span>,<span class="string">"payload"</span>:&#123;&#125;,<span class="string">"alias"</span>:<span class="string">"***********"</span>,<span class="string">"appkey"</span>:<span class="string">"********************************"</span>,<span class="string">"type"</span>:<span class="string">"customizedcast"</span>&#125;</div><div class="line">payload before has(body) : &#123;&#125;</div><div class="line">new body and add. payload: &#123;<span class="string">"body"</span>:&#123;&#125;&#125;</div><div class="line">body before put: &#123;&#125;</div><div class="line">body after put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:title, value:测试标题</div><div class="line">Enter body ==========</div><div class="line">payload exists: &#123;<span class="string">"body"</span>:&#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>&#125;&#125;</div><div class="line">payload before has(body) : &#123;<span class="string">"body"</span>:&#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>&#125;&#125;</div><div class="line">body exists: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>&#125;</div><div class="line">body before put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>&#125;</div><div class="line">body after put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:text, value:测试内容</div><div class="line">Enter body ==========</div><div class="line">payload exists: &#123;<span class="string">"body"</span>:&#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;&#125;</div><div class="line">payload before has(body) : &#123;<span class="string">"body"</span>:&#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;&#125;</div><div class="line">body exists: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">body before put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">body after put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:after_open, value:go_app</div><div class="line">Enter body ==========</div><div class="line">payload exists: &#123;<span class="string">"body"</span>:&#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;&#125;</div><div class="line">payload before has(body) : &#123;<span class="string">"body"</span>:&#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;&#125;</div><div class="line">body exists: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">body before put: &#123;<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">body after put: &#123;<span class="string">"after_open"</span>:<span class="string">"go_app"</span>,<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;</div><div class="line">Exit body ==========</div><div class="line">key:display_type, value:notification</div><div class="line">payload exists: &#123;<span class="string">"body"</span>:&#123;<span class="string">"after_open"</span>:<span class="string">"go_app"</span>,<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;&#125;</div><div class="line">key:production_mode, value:<span class="literal">true</span></div><div class="line">key:timestamp, value:**********</div><div class="line">body: &#123;<span class="string">"alias_type"</span>:<span class="string">"phone"</span>,<span class="string">"payload"</span>:&#123;<span class="string">"display_type"</span>:<span class="string">"notification"</span>,<span class="string">"body"</span>:&#123;<span class="string">"after_open"</span>:<span class="string">"go_app"</span>,<span class="string">"ticker"</span>:<span class="string">"测试"</span>,<span class="string">"text"</span>:<span class="string">"测试内容"</span>,<span class="string">"title"</span>:<span class="string">"测试标题"</span>&#125;&#125;,<span class="string">"alias"</span>:<span class="string">"***********"</span>,<span class="string">"appkey"</span>:<span class="string">"********************************"</span>,<span class="string">"type"</span>:<span class="string">"customizedcast"</span>,<span class="string">"production_mode"</span>:<span class="string">"true"</span>,<span class="string">"timestamp"</span>:<span class="string">"**********"</span>&#125;</div></pre></td></tr></table></figure>
<p>一个可以明显发现的细节是，json-lib 保持了添加顺序，而 org.json 没有。我看过 json-lib 源码是用 ListOrderedMap（看的最新代码，没找我引用的版本，不过估计差别不会太大）。</p>
<p>然而这并没有什么用，内容都丢了，保持顺序有毛线用。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 json-lib 时发现了比较诡异的现象，分析半天没有找到原因。最后因时间关系，直接替换成 org.json 解决了。疑似json-lib 有 bug，Mark 一个，以后再看。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://jaycechant.info/tags/Java/"/>
    
      <category term="json" scheme="https://jaycechant.info/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>我的自用 软件 和 服务 清单</title>
    <link href="https://jaycechant.info/2017/my-software-and-service-list/"/>
    <id>https://jaycechant.info/2017/my-software-and-service-list/</id>
    <published>2017-01-23T07:30:50.000Z</published>
    <updated>2020-02-28T14:51:09.592Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个 <strong>持续更新</strong> 的清单，记录我在 各个平台（目前主要是 Windows 、 Linux  和 Android） 的首选 软件 / App / 服务。供我换机或重装系统时 <strong>回顾</strong>，也供大家参考；也欢迎大家在留言推荐更好的选择。</p>
<p>我在博客新增了一个<a href="../../collections/">清单栏目</a> ，将需要持续更新的清单跟博文分开。本文的正文也已经挪到了<a href="../../collections/my-software-and-service-list/">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个 &lt;strong&gt;持续更新&lt;/strong&gt; 的清单，记录我在 各个平台（目前主要是 Windows 、 Linux  和 Android） 的首选 软件 / App / 服务。供我换机或重装系统时 &lt;strong&gt;回顾&lt;/strong&gt;，也供大家参考；也欢迎大家在
    
    </summary>
    
    
      <category term="software" scheme="https://jaycechant.info/tags/software/"/>
    
      <category term="service" scheme="https://jaycechant.info/tags/service/"/>
    
      <category term="app" scheme="https://jaycechant.info/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>git: 在两个 repo 之间 merge</title>
    <link href="https://jaycechant.info/2017/git-merge-between-different-repo/"/>
    <id>https://jaycechant.info/2017/git-merge-between-different-repo/</id>
    <published>2017-01-21T03:28:29.000Z</published>
    <updated>2017-10-12T14:20:54.010Z</updated>
    
    <content type="html"><![CDATA[<p>事情是这样，有一个叫 scripts 的 git 库，里面放了一些所属不明的脚本。我希望把这些零散脚本管理起来，它们不属于任何一个项目，为每个脚本都建一个库又太小题大做，于是有了一个『脚本孤儿院』。</p>
<p>与此同时，另外有个项目在进行，到一定程度时，它需要引用前面脚本里的一个。我突然明白，那个脚本就是这个项目的一部分，它『找到组织』，该『认祖归宗』了！</p>
<a id="more"></a>
<h1 id="剪切，粘贴？"><a href="#剪切，粘贴？" class="headerlink" title="剪切，粘贴？"></a>剪切，粘贴？</h1><p>最简单的方法当然是，从原库 <strong>剪切</strong> 相关文件， <strong>粘贴</strong> 到新库，然后两边分别提交变更。</p>
<p>确实，文件管理权移交这件事完成了。但结果是，新库历史里这些文件是凭空出现的，之前的提交历史都丢失了。你当然可以在新库提交时，在message里提一下，这些文件原本是在哪个库，详细历史请参考该库历史。可如果有一天旧库不再维护呢？你无法保证两个库生命周期一致。</p>
<h1 id="merge"><a href="#merge" class="headerlink" title="merge ?"></a>merge ?</h1><p>怎么连带提交历史一起移动呢？Merge ！Merge 就是为这个目的存在的。不过等等，merge 只能在 branch  之间进行吧，两个 repo 怎么做？（严格说，是 commit 之间，branch 也好 tag 也罢，在 git 里最后都是指向 commit 的指针）</p>
<h1 id="fetch-amp-merge"><a href="#fetch-amp-merge" class="headerlink" title="fetch &amp; merge"></a>fetch &amp; merge</h1><p>当然可以，只要把要合并来源，当做远程库，获取到目标库生成一个远程分支，再合并即可。</p>
<p>假设要做的是 <code>repo-from</code> =&gt; <code>repo-target</code> 的合并，按以下操作即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> repo-target</div><div class="line">$ git remote add other /<span class="built_in">local</span>/path/to/repo-from <span class="comment"># 不要忘了 git 支持的协议非常广泛，除了常用的http(s)和ssh，也支持文件夹作为远程库</span></div><div class="line">$ git fetch other</div><div class="line">$ git merge other/master <span class="comment"># 这里假定你要合并master，别的分支改一下就好</span></div></pre></td></tr></table></figure>
<p>完事之后再 <code>git remote rm other</code>  ， 然后 <code>git rebase</code> 稍微调整一下提交历史就好（因为这样合并，会把完整历史引进来，但实际上你可能只要部分文件和相关的提交历史）。或者 fetch 后直接选择 rebase，把需要的 commit 挑选出来，不再赘述。</p>
<h1 id="fast-export-amp-fast-import"><a href="#fast-export-amp-fast-import" class="headerlink" title="fast-export &amp; fast-import"></a>fast-export &amp; fast-import</h1><p>上述方法基本可以解决问题，非要挑剔的话：</p>
<ol>
<li>要先 添加 远程库 再删掉</li>
<li>引入的历史可能太多</li>
</ol>
<p>其实 git  自带了相关工具：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> repo-from</div><div class="line">$ git fast-export master~5..master | sed <span class="string">"s|refs/heads/master|refs/heads/other|"</span> | (<span class="built_in">cd</span> /path/to/repo-target &amp;&amp; git fast-import)</div><div class="line">$ <span class="built_in">cd</span> repo-target</div><div class="line">$ git merge other</div></pre></td></tr></table></figure>
<p>通过 <code>fast-export</code> + pipe + <code>fast-import</code> 从一个库导入到另一个库。注意的地方有几个：</p>
<ol>
<li>因为两边都是本地分支，所以为了避免重名，中间可以用 sed 改名</li>
<li>fast-export 可以指定导入的范围，譬如上面就是获取 master 最后5个commit。不过注意的是，这个只是限制了commit 历史，文件还是会整个分支（也就是最新那个 commit 的所有祖先 commit）都包含进来。文件的筛选就要在merge 阶段做了。</li>
</ol>
<p>介绍到这，内容并不复杂。 对于 Git 的使用，不排斥甚至推荐用 TortoiseGit 和 SourceTree 这样的 GUI 工具，为常规操作节省时间。但是了解命令可以做到更多！</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事情是这样，有一个叫 scripts 的 git 库，里面放了一些所属不明的脚本。我希望把这些零散脚本管理起来，它们不属于任何一个项目，为每个脚本都建一个库又太小题大做，于是有了一个『脚本孤儿院』。&lt;/p&gt;
&lt;p&gt;与此同时，另外有个项目在进行，到一定程度时，它需要引用前面脚本里的一个。我突然明白，那个脚本就是这个项目的一部分，它『找到组织』，该『认祖归宗』了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://jaycechant.info/tags/git/"/>
    
      <category term="skill" scheme="https://jaycechant.info/tags/skill/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins &#39;Could not initialize JFreeChart&#39; 和 tomcat setenv.sh</title>
    <link href="https://jaycechant.info/2017/Jenkins-Could-not-initialize-JFreeChart-and-tomcat-setenv/"/>
    <id>https://jaycechant.info/2017/Jenkins-Could-not-initialize-JFreeChart-and-tomcat-setenv/</id>
    <published>2017-01-20T06:44:31.000Z</published>
    <updated>2017-10-12T14:39:33.679Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins 有一系列插件，可以提供趋势图显示项目的情况，例如 Checkstyle, Dry, FindBugs, PMD, Tasks, 和 Warnings，还有把前面的内容合并显示的 <a href="http://wiki.jenkins-ci.org/x/tgeIAg" target="_blank" rel="external">Static Analysis Collector Plug-in</a>。实际上，你只要装最后一个，前面的会作为依赖全部装上。</p>
<p>作为尝试，先配置了 <strong>Maven Warnings Trend</strong>，打开一看，图是裂的……</p>
<a id="more"></a>
<h2 id="headless-mode"><a href="#headless-mode" class="headerlink" title="headless mode"></a>headless mode</h2><p>一看有几个Exception，根源应该是这个：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Could not initialize class org.jfree.chart.JFreeChart</div></pre></td></tr></table></figure>
<p>放Google，在官方issue里发现这个：<a href="https://issues.jenkins-ci.org/browse/JENKINS-21839" target="_blank" rel="external">https://issues.jenkins-ci.org/browse/JENKINS-21839</a></p>
<blockquote>
<p>It’s not a bug in Jenkins but a miss-configuration. Anyway I couldn’t find it in any knowledge base. Maybe adding this solution in JIRA is enough … but let me suggest you to try to add it somewhere in plugin’s documentation, for example on “Configuration” section found here <a href="https://wiki.jenkins-ci.org/display/JENKINS/Performance+Plugin" target="_blank" rel="external">https://wiki.jenkins-ci.org/display/JENKINS/Performance+Plugin</a></p>
<p>The solution is just adding</p>
<p>-Djava.awt.headless=true</p>
<p>I’m running Jenkins as a webapp on my Tomcat, so I just added this line to my /opt/tomcat/bin/catalina.sh :</p>
<p>CATALINA_OPTS=-Djava.awt.headless=true</p>
</blockquote>
<p>关于headless的信息：<a href="https://www.oschina.net/translate/using-headless-mode-in-java-se" target="_blank" rel="external">https://www.oschina.net/translate/using-headless-mode-in-java-se</a></p>
<p>简单说，JFreeChart 引用了awt 包，然后 awt 会尝试绑定本地 IO 设备——包括 显示器 和 Keyboard，结果失败就会引起异常。只要启用 headless mode 就可以避免。直接 java 命令启动的 Jenkins.war，在启动时加上参数即可。如果通过 tomcat 这样的容器启动，就要把参数加到容器去。</p>
<h2 id="setenv-sh"><a href="#setenv-sh" class="headerlink" title="setenv.sh"></a>setenv.sh</h2><p>一点题外话。</p>
<p>上面 issue 的讨论里，是直接往 <code>catalina.sh</code> 里加参数；当初配置 tomcat 时，也有文章说写到 <code>startup.sh</code> 和 <code>shutdown.sh</code> 里面去。</p>
<p>实际上这都是不那么好的做法，应该写在 <code>setenv.sh</code> 里。看一下就知道 <code>startup.sh</code> 和 <code>shutdown.sh</code>  最后都实际调用到 <code>catalina.sh</code> ，而它会自动加载 <code>setenv.sh</code>。</p>
<p>跟分别写在  <code>startup.sh</code> 和 <code>shutdown.sh</code>  比，写在一处当然更容易管理；那为什么不直接写在<code>catalina.sh</code> 开头，要多此一举呢？除了单独写在一个文件，更清晰以外，还有方便管理多个实例的好处。</p>
<p><code>catalina.sh</code> 会先检查 <code>$CATALINA_BASE/bin/setenv.sh</code> ，存在就加载，不存在再去检查 <code>$CATALINA_HOME/bin/setenv.sh</code> 并加载。也就是 <code>CATALINA_BASE</code> 的配置优先于 <code>CATALINA_HOME</code> 的配置。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ -r <span class="string">"<span class="variable">$CATALINA_BASE</span>/bin/setenv.sh"</span> ]; <span class="keyword">then</span></div><div class="line">  . <span class="string">"<span class="variable">$CATALINA_BASE</span>/bin/setenv.sh"</span></div><div class="line"><span class="keyword">elif</span> [ -r <span class="string">"<span class="variable">$CATALINA_HOME</span>/bin/setenv.sh"</span> ]; <span class="keyword">then</span></div><div class="line">  . <span class="string">"<span class="variable">$CATALINA_HOME</span>/bin/setenv.sh"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p><code>CATALINA_HOME</code> 就是 tomcat 的安装目录了。而 <code>CATALINA_BASE</code> 是工作目录，默认等于 <code>CATALINA_HOME</code> ：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Only set CATALINA_HOME if not already set</span></div><div class="line">[ -z <span class="string">"<span class="variable">$CATALINA_HOME</span>"</span> ] &amp;&amp; CATALINA_HOME=`<span class="built_in">cd</span> <span class="string">"<span class="variable">$PRGDIR</span>/.."</span> &gt;/dev/null; <span class="built_in">pwd</span>`</div><div class="line"></div><div class="line"><span class="comment"># Copy CATALINA_BASE from CATALINA_HOME if not already set</span></div><div class="line">[ -z <span class="string">"<span class="variable">$CATALINA_BASE</span>"</span> ] &amp;&amp; CATALINA_BASE=<span class="string">"<span class="variable">$CATALINA_HOME</span>"</span></div></pre></td></tr></table></figure>
<p>如果需要安装一个 tomcat 跑多个实例，这时<code>CATALINA_BASE</code> 就会指向各个实例自己的目录。这时分别写在工作目录下的 <code>setenv.sh</code> 就可以分别设置不同的配置。</p>
<p>就酱。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins 有一系列插件，可以提供趋势图显示项目的情况，例如 Checkstyle, Dry, FindBugs, PMD, Tasks, 和 Warnings，还有把前面的内容合并显示的 &lt;a href=&quot;http://wiki.jenkins-ci.org/x/tgeIAg&quot;&gt;Static Analysis Collector Plug-in&lt;/a&gt;。实际上，你只要装最后一个，前面的会作为依赖全部装上。&lt;/p&gt;
&lt;p&gt;作为尝试，先配置了 &lt;strong&gt;Maven Warnings Trend&lt;/strong&gt;，打开一看，图是裂的……&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="https://jaycechant.info/tags/Jenkins/"/>
    
      <category term="Java" scheme="https://jaycechant.info/tags/Java/"/>
    
      <category term="trouble" scheme="https://jaycechant.info/tags/trouble/"/>
    
      <category term="Tomcat" scheme="https://jaycechant.info/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>小工具专题</title>
    <link href="https://jaycechant.info/2017/special-for-tools/"/>
    <id>https://jaycechant.info/2017/special-for-tools/</id>
    <published>2017-01-16T06:56:57.000Z</published>
    <updated>2020-02-28T14:53:58.954Z</updated>
    
    <content type="html"><![CDATA[<p>本专题收集趁手的小工具，并附使用技巧。尽量小和简单，尽量用完即走，简单到不必单独成篇，集中放这里；复杂的工具，就单独开一篇不放这里。可能比较多是命令行工具也不一定。</p>
<p>另外开一篇常用软件列表，只列举优缺点对比不展开用法，所以某些工具可能会有重叠，但内容侧重点不同。</p>
<p>专题内容已移到<a href="../../collections/gadget-special/">这里</a> ，后续新建的清单也会放到新建的<a href="../../collections/">清单栏目</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本专题收集趁手的小工具，并附使用技巧。尽量小和简单，尽量用完即走，简单到不必单独成篇，集中放这里；复杂的工具，就单独开一篇不放这里。可能比较多是命令行工具也不一定。&lt;/p&gt;
&lt;p&gt;另外开一篇常用软件列表，只列举优缺点对比不展开用法，所以某些工具可能会有重叠，但内容侧重点不同
    
    </summary>
    
    
      <category term="screen" scheme="https://jaycechant.info/tags/screen/"/>
    
      <category term="byobu" scheme="https://jaycechant.info/tags/byobu/"/>
    
  </entry>
  
  <entry>
    <title>Linux 上 为 Jenkins 配置 Android-sdk 及其它</title>
    <link href="https://jaycechant.info/2017/Android-sdk-on-Linux-for-Jenkins-etc/"/>
    <id>https://jaycechant.info/2017/Android-sdk-on-Linux-for-Jenkins-etc/</id>
    <published>2017-01-16T03:24:34.000Z</published>
    <updated>2017-01-25T04:21:21.999Z</updated>
    
    <content type="html"><![CDATA[<p>用 Jenkins 编译APK，在Jenkins所在的Linux (Ubuntu) 服务器配置 Android-sdk。</p>
<p>惯例踩坑，不是完整教程。</p>
<a id="more"></a>
<h1 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h1><p>配置完 Git 库直接开跑</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.io.IOException: Cannot run program <span class="string">"gradle"</span></div></pre></td></tr></table></figure>
<p>指定了本地gradle，但服务器上并没有gradle，改为使用gradle wrapper。</p>
<p>……结果跑了一个周末，gradlew还停在：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Downloading https://services.gradle.org/distributions/gradle-2.14.1-all.zip</div></pre></td></tr></table></figure>
<p>[捂脸]国内的开发者就是困难，gradle不同版本改动大，gradle wrapper多好一个解决方案，我们享受不到。</p>
<p>好吧，好好地根据目前项目的需要，安装一个在服务器，然后到 Jenkins &gt; 系统管理 &gt; Global Tool Configuration 添加一个gradle的版本。</p>
<h1 id="Android-sdk"><a href="#Android-sdk" class="headerlink" title="Android-sdk"></a>Android-sdk</h1><p>再跑，这回找不到ANDROID_HOME。当然，我没装SDK，也没配置环境变量。一个一个去想装什么多累啊，报什么错解决什么就好了。</p>
<p>心想我不需要在服务器开发，只是要管理依赖，只要sdk-tools就好了。官方源各种连不上，到<a href="https://dsx.bugly.qq.com/repository/1" target="_blank" rel="external">腾讯大师兄</a> 下载一个 tools_r25.2.3-linux.zip，在要安装的地方（这次是/opt/下某目录）建一个android-sdk/tools目录，然后解压到里面，执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> android-sdk/tools</div><div class="line">$ sudo ./android</div></pre></td></tr></table></figure>
<p>我去，默认运行居然是GUI工具，不过我也不愿意敲一堆参数，那就配置一下x11 forwarding 然后本地开一个Xming就好了。（当然也可以选择 <code>./android update sdk --no-ui --filter sdk1, sdk2, sdk3,...</code>）</p>
<p>安装好之后，定义 <code>ANDROID_HOME</code> 为 <code>android-sdk</code> 所在目录，并且把 <code>$ANDROID_HOME/tools</code> 和 <code>$ANDROID_HOME/platform-tools</code> 加入 <code>PATH</code> 。如果不确定配置的 <code>ANDROID_HOME</code> 能不能被Jenkins读到，也可以在Jenkins的全局配置里添加这个环境变量。</p>
<p>好了，接下来就是编译报缺什么就装什么了。不过每次失败只能看到遇到的第一个错误，如果自己判断不准依赖，往往要浪费好几个build。还好build号完全不值钱。</p>
<p>这里有一个被误导的点：每次遇到缺什么依赖的时候，报的错误是</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Before building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.</div></pre></td></tr></table></figure>
<p>焦点很容易被引导到License上面去，加上我们很容易以外自己都已经安装了需要的东西，然后就开始折腾License。网上的教程往往默认你依赖的包已经安装好了（或者从别的机器挪过来了），只是没有好好同意License（或License没有一起挪过来），然后告诉你sdk-manager 会对License文件做一个签名保存在 <code>licenses/</code> 目录，要么从原来的机器导出，要么怎样同意重新生成签名云云。</p>
<p>实际上无论是 没有accept license，还是根本没有安装，都会报这个错误，所以在检查License之前，首先要确认包真的安装了。<strong>实际上确实很多时候就是安装漏了东西。要仔细留意是不是名字像，或者同一个包依赖了不同的版本。</strong></p>
<p>不过这里有个我没想明白的地方，一开始我想直接从Windows本地将包和License一起拷到Linux时，发现sdk目录下根本没有 <code>licenses/</code> 目录，Linux上也没有发现，我以为是最新的版本不再这样存放License（实际上是License的sha-1签名）。因为这样，我选择了全部在Linux上用UI重新accept然后安装一次。还好配置了大师兄的镜像速度还是很快的，比拷过去再研究自己生成签名要省事。（配置镜像请看<a href="../../2016/mirrors-collection/">这里</a>）</p>
<p>然后今天我写这篇文章的时候重新进去，忽然发现 <code>licenses/</code> 目录不知道啥时候生成了…… 里面只有一个 <code>android-sdk-license</code> 文件，里面只有一行sha-1 签名，也不知道是对哪个包的，没搞懂原理，暂时能用也先不追究了。</p>
<h1 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h1><p>一路这样一个build号搞定一个依赖，直到一个包在sdk-manager怎么也找不到</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; You have not accepted the license agreements of the following SDK components:</div><div class="line">  [com.android.support.constraint:constraint-layout:1.0.0-alpha4, com.android.support.constraint:constraint-layout-solver:1.0.0-alpha4].</div><div class="line">  Before building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.</div><div class="line">  Alternatively, to learn how to transfer the license agreements from one workstation to another, go to http://d.android.com/r/studio-ui/<span class="built_in">export</span>-licenses.html</div></pre></td></tr></table></figure>
<p>网上找了半天，发现大家都是在Android Studio的SDK Manager里安装，我就在Windows上试了一下，果然只能在Android Studio里看得到……</p>
<p>好吧先不追究原因，我装一个AS还不行吗。同样是在大师兄下载AS的包，解压到对应目录，然后执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> bin</div><div class="line">$ ./studio.sh</div></pre></td></tr></table></figure>
<p>注意这个必须要有界面，不像sdk-manager还有 –no-ui 参数可选，所以 x-server是必须的，我还是x11 forwarding + Xming。</p>
<p>然后就是第一次启动的Setup Wizard。Linux的AS不带SDK，而是在Setup Wizard时从官方(dl.google.com)下载，一般是一个最新的SDK-Tools 和 一个推荐的platform。platform和一些其他的推荐是可以取消复选框的，但是SDK-Tools是强制选中的。官方网址自然很卡，而且我们前面已经安装了一堆东西，没有必要重来，所以只要把 <code>android-sdk</code> 目录指定给AS就好，<strong>它会自动检测，有了的东西不会重复安装</strong> ，所以正常应该什么都会装就过了。启动之后进入 settings，然后在SDK-Manager部分把缺的这两个包安装了，AS的使命就完成了（我又不在服务器写代码[捂脸]）。</p>
<h1 id="gradle-task"><a href="#gradle-task" class="headerlink" title="gradle task"></a>gradle task</h1><p>按理说到了这里，应该没什么错误了，再开一个build，成功了，但是却没有生成物（Artifacts）。</p>
<p>看输出日志</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">:<span class="built_in">help</span></div><div class="line"></div><div class="line">Welcome to Gradle 2.14.1.</div><div class="line"></div><div class="line">To run a build, run gradle &lt;task&gt; ...</div><div class="line"></div><div class="line">To see a list of available tasks, run gradle tasks</div><div class="line"></div><div class="line">To see a list of <span class="built_in">command</span>-line options, run gradle --help</div><div class="line"></div><div class="line">To see more detail about a task, run gradle <span class="built_in">help</span> --task &lt;task&gt;</div></pre></td></tr></table></figure>
<p>额…光顾着搞SDK了，都没有给gradle指定task。</p>
<p>增加一个参数 <code>BUILD_TYPE</code>，然后把task指定为 <code>clean assemble${BUILD_TYPE} --stacktrace --debug</code> ，收工。（task是顺序执行的，这里是两个task，先clean，然后再assemble，参数是为了输出详细的gradle编译信息，好出问题时分析。）</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 Jenkins 编译APK，在Jenkins所在的Linux (Ubuntu) 服务器配置 Android-sdk。&lt;/p&gt;
&lt;p&gt;惯例踩坑，不是完整教程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://jaycechant.info/tags/Android/"/>
    
      <category term="Jenkins" scheme="https://jaycechant.info/tags/Jenkins/"/>
    
      <category term="Android-sdk" scheme="https://jaycechant.info/tags/Android-sdk/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins JavaMail 配置：JCE 及其他</title>
    <link href="https://jaycechant.info/2017/Jenkins-javamail-config-JCE-etc/"/>
    <id>https://jaycechant.info/2017/Jenkins-javamail-config-JCE-etc/</id>
    <published>2017-01-11T07:02:31.000Z</published>
    <updated>2017-01-11T15:19:23.187Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins 上线一段时间，逐渐完善中。原想 nightly build 缓一缓开启，前两天发现trunk有编译不过的代码导致build fail，心想着要是不早点发现，代码排查也麻烦，如果新版本上线当天发现就更折腾，于是就开了nightly build。</p>
<p>既然开了nightly build，跟手动启动的build你会去关注结果不一样，自动启动的build不一定会记得，如果没有留意到build fail就没有意义了。所以顺便就配置结果邮件了。以下是踩坑记录。JCE部分建议大家留意一下，不知道的话，做security相关开发一不小心就在这上面浪费时间。</p>
<a id="more"></a>
<h1 id="JCE"><a href="#JCE" class="headerlink" title="JCE"></a>JCE</h1><p>邮箱直接用QQ邮箱的SMTP服务，理由有二：</p>
<ol>
<li>自己配置邮件服务器，折腾</li>
<li>折腾完之后，对于这种无名服务器发出来的邮件，还极高概率被扔进垃圾箱，得一个一个通知收件同事设置例外，还是折腾</li>
</ol>
<p>这本没有什么难度，在Jenkins全局配置里，多数一看就知道怎么填：</p>
<ul>
<li>SMTP服务器：smtp.qq.com</li>
<li>使用SMTP认证：√  <ul>
<li>用户名：youraccount@qq.com</li>
<li>密码：这里比较特殊，不是填登录密码，而是在QQ邮箱设置 &gt; 账户 里打开SMTP功能时，会生成一个密码，填这个</li>
</ul>
</li>
<li>使用SSL协议：√ （QQ邮箱要求打开）  </li>
<li>SMTP端口：465</li>
</ul>
<p>发送测试邮件，发现无法连上服务器。报以下错误：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure 	at com.sun.mail.smtp.SMTPTransport.openServer(SMTPTransport.java:1934)</div></pre></td></tr></table></figure>
<p>第一反应，检查Jenkins服务器的网络环境，网络连接、端口检查了一通，没发现问题，只好拿着这个Exception放Google，然后果然就找到了原因：</p>
<p><a href="http://www.cnblogs.com/interdrp/p/5766107.html" target="_blank" rel="external">http://www.cnblogs.com/interdrp/p/5766107.html</a></p>
<p>原文一笔带过，我补充解释一下：</p>
<p>JCE，Java Cryptography Extension，在早期JDK版本中，由于受美国的密码出口条例约束，Java中涉及加解密功能的API被限制出口，所以Java中安全组件被分成了两部分: 不含加密功能的JCA（Java Cryptography Architecture ）和含加密功能的JCE（Java Cryptography Extension）。在JDK1.1-1.3版本期间，JCE属于扩展包，仅供美国和加拿大的用户下载，JDK1.4+版本后，随JDK核心包一起分发。</p>
<p>然而，即使是最新版JDK自带的JCE，仍然是受限的版本，引用unlimited JCE自带的README的内容：</p>
<blockquote>
<p>Due to import control restrictions of some countries, the version of<br>the JCE policy files that are bundled in the Java Runtime Environment,<br>or JRE(TM), 8 environment allow “strong” but limited cryptography to be<br>used. This download bundle (the one including this README file)<br>provides “unlimited strength” policy files which contain no<br>restrictions on cryptographic strengths.</p>
</blockquote>
<p>受某些国家的进口控制约束，随 JDK / JRE 发布的JCE版本的加密算法是受限制的，想摆脱这个限制，就要额外下载unlimited JCE，替换掉 <code>$JRE_HOME/lib/security/</code>下的 local_policy.jar 和 US_export_policy.jar 两个文件。</p>
<p>替换之后，要重启一下tomcat让它重新加载lib。</p>
<p><strong>个人觉得这个问题特别坑！！ 一般人只会怀疑自己的环境配置，或者代码，很少会怀疑到JDK本身上面去。建议大家记住这个坑，以后跟加密有关的错误，例如SSL相关的，可以排查一下是不是JCE的问题。或者干脆现在就去，把开发环境和生产环境的JCE换掉。</strong></p>
<h1 id="管理员邮箱"><a href="#管理员邮箱" class="headerlink" title="管理员邮箱"></a>管理员邮箱</h1><p>换了JCE之后重新测试，这次报以下错误：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">com.sun.mail.smtp.SMTPSendFailedException: 501 mail from address must be same as authorization user</div><div class="line">;</div><div class="line">  nested exception is:</div><div class="line">	com.sun.mail.smtp.SMTPSenderFailedException: 501 mail from address must be same as authorization user</div></pre></td></tr></table></figure>
<p>这倒是个小问题：前面设置管理员邮箱时，我填了我自己的邮箱；但是为了区分哪些是自动发的，哪些是我个人发的邮件，SMTP邮箱填的是团队的邮箱。</p>
<p>Jenkins 会自动把管理员邮箱设为发信人，但是QQ邮箱不允许发信人和登录账号不一致，所以报错。</p>
<p>把管理员邮箱也换成同一个邮箱就好了。</p>
<hr>
<p><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议"><br>本文为本人原创，采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 “署名-非商业性使用-相同方式共享” 4.0 (CC BY-NC-SA 4.0)”许可协议</a>进行许可。<br>本作品可自由复制、传播及基于本作品进行演绎创作。如有以上需要，请留言告知，在文章开头明显位置加上署名（Jayce Chant）、原链接及许可协议信息，并明确指出修改（如有），不得用于商业用途。谢谢合作。<br>详情请点击查看<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">协议</a>具体内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins 上线一段时间，逐渐完善中。原想 nightly build 缓一缓开启，前两天发现trunk有编译不过的代码导致build fail，心想着要是不早点发现，代码排查也麻烦，如果新版本上线当天发现就更折腾，于是就开了nightly build。&lt;/p&gt;
&lt;p&gt;既然开了nightly build，跟手动启动的build你会去关注结果不一样，自动启动的build不一定会记得，如果没有留意到build fail就没有意义了。所以顺便就配置结果邮件了。以下是踩坑记录。JCE部分建议大家留意一下，不知道的话，做security相关开发一不小心就在这上面浪费时间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="https://jaycechant.info/tags/Jenkins/"/>
    
      <category term="trouble" scheme="https://jaycechant.info/tags/trouble/"/>
    
      <category term="JavaMail" scheme="https://jaycechant.info/tags/JavaMail/"/>
    
      <category term="smtp" scheme="https://jaycechant.info/tags/smtp/"/>
    
      <category term="JCE" scheme="https://jaycechant.info/tags/JCE/"/>
    
  </entry>
  
</feed>
